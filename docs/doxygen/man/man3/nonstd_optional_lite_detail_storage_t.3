.TH "nonstd::optional_lite::detail::storage_t< T >" 3 "Tue Aug 13 2024" "Version 0.1.0" "FFTMatvec" \" -*- nroff -*-
.ad l
.nh
.SH NAME
nonstd::optional_lite::detail::storage_t< T > \- C++03 constructed union to hold value\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <table\&.hpp>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBaligned_storage_t\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef T \fBvalue_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBconstruct_value\fP (value_type const &v)"
.br
.ti -1c
.RI "void \fBdestruct_value\fP ()"
.br
.ti -1c
.RI "optional_nodiscard value_type const * \fBvalue_ptr\fP () const"
.br
.ti -1c
.RI "value_type * \fBvalue_ptr\fP ()"
.br
.ti -1c
.RI "optional_nodiscard value_type const & \fBvalue\fP () const optional_ref_qual"
.br
.ti -1c
.RI "value_type & \fBvalue\fP () optional_ref_qual"
.br
.ti -1c
.RI "typedef \fBoptional_ALIGN_AS\fP (value_type) align_as_type"
.br
.ti -1c
.RI "optional_nodiscard void * \fBptr\fP () optional_noexcept"
.br
.ti -1c
.RI "optional_nodiscard void const * \fBptr\fP () const optional_noexcept"
.br
.ti -1c
.RI "template<typename U > optional_nodiscard U * \fBas\fP ()"
.br
.ti -1c
.RI "template<typename U > optional_nodiscard U const * \fBas\fP () const"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBaligned_storage_t\fP \fBdata\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename T>
.br
union nonstd::optional_lite::detail::storage_t< T >"C++03 constructed union to hold value\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for FFTMatvec from the source code\&.
