.TH "Matrix" 3 "Tue Aug 13 2024" "Version 0.1.0" "FFTMatvec" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Matrix \- Represents a matrix and provides matrix operations\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Matrix\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMatrix\fP (\fBComm\fP &comm, unsigned int num_cols, unsigned int num_rows, unsigned int block_size, bool conjugate, bool full)"
.br
.RI "Constructs a \fBMatrix\fP object\&. "
.ti -1c
.RI "\fB~Matrix\fP ()"
.br
.RI "Destroys the \fBMatrix\fP object\&. "
.ti -1c
.RI "void \fBinit_mat_from_file\fP (std::string filename)"
.br
.RI "Initializes the matrix from a file\&. "
.ti -1c
.RI "void \fBinit_mat_ones\fP ()"
.br
.RI "Initializes the matrix with ones\&. "
.ti -1c
.RI "void \fBmatvec\fP (\fBVector\fP &x, \fBVector\fP &y, bool full=false)"
.br
.RI "Performs matrix-vector multiplication\&. "
.ti -1c
.RI "void \fBtranspose_matvec\fP (\fBVector\fP &x, \fBVector\fP &y, bool full=false)"
.br
.RI "Performs transpose matrix-vector multiplication\&. "
.ti -1c
.RI "double * \fBget_col_vec_unpad\fP ()"
.br
.ti -1c
.RI "double * \fBget_col_vec_pad\fP ()"
.br
.ti -1c
.RI "double * \fBget_row_vec_pad\fP ()"
.br
.ti -1c
.RI "double * \fBget_row_vec_unpad\fP ()"
.br
.ti -1c
.RI "double * \fBget_res_pad\fP ()"
.br
.ti -1c
.RI "Complex * \fBget_col_vec_freq\fP ()"
.br
.ti -1c
.RI "Complex * \fBget_row_vec_freq\fP ()"
.br
.ti -1c
.RI "Complex * \fBget_col_vec_freq_tosi\fP ()"
.br
.ti -1c
.RI "Complex * \fBget_row_vec_freq_tosi\fP ()"
.br
.ti -1c
.RI "Complex * \fBget_mat_freq_tosi\fP ()"
.br
.ti -1c
.RI "Complex * \fBget_mat_freq_tosi_other\fP ()"
.br
.ti -1c
.RI "cufftHandle \fBget_forward_plan\fP ()"
.br
.ti -1c
.RI "cufftHandle \fBget_inverse_plan\fP ()"
.br
.ti -1c
.RI "cufftHandle \fBget_forward_plan_conj\fP ()"
.br
.ti -1c
.RI "cufftHandle \fBget_inverse_plan_conj\fP ()"
.br
.ti -1c
.RI "\fBComm\fP & \fBget_comm\fP ()"
.br
.ti -1c
.RI "unsigned int \fBget_num_cols\fP ()"
.br
.ti -1c
.RI "unsigned int \fBget_num_rows\fP ()"
.br
.ti -1c
.RI "unsigned int \fBget_block_size\fP ()"
.br
.ti -1c
.RI "bool \fBis_conjugate\fP ()"
.br
.ti -1c
.RI "bool \fBis_full\fP ()"
.br
.ti -1c
.RI "bool \fBis_initialized\fP ()"
.br
.ti -1c
.RI "bool \fBget_has_mat_freq_tosi_other\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
Represents a matrix and provides matrix operations\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Matrix::Matrix (\fBComm\fP & comm, unsigned int num_cols, unsigned int num_rows, unsigned int block_size, bool conjugate, bool full)"

.PP
Constructs a \fBMatrix\fP object\&. 
.PP
\fBParameters\fP
.RS 4
\fIcomm\fP The communication object\&. 
.br
\fInum_cols\fP The number of columns in the matrix\&. 
.br
\fInum_rows\fP The number of rows in the matrix\&. 
.br
\fIblock_size\fP The block size of the matrix\&. 
.br
\fIconjugate\fP Flag indicating if the matrix is conjugate\&. 
.br
\fIfull\fP Flag indicating if the matrix is full\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "unsigned int Matrix::get_block_size ()\fC [inline]\fP"
Returns the block size of the matrix\&. 
.SS "Complex * Matrix::get_col_vec_freq ()\fC [inline]\fP"
Returns the column vector frequency\&. 
.SS "Complex * Matrix::get_col_vec_freq_tosi ()\fC [inline]\fP"
Returns the column vector frequency in TOSI format\&. 
.SS "double * Matrix::get_col_vec_pad ()\fC [inline]\fP"
Returns the padded column vector\&. 
.SS "double * Matrix::get_col_vec_unpad ()\fC [inline]\fP"
Returns the unpadded column vector\&. 
.SS "\fBComm\fP & Matrix::get_comm ()\fC [inline]\fP"
Returns reference to the communication object\&. 
.SS "cufftHandle Matrix::get_forward_plan ()\fC [inline]\fP"
Returns the forward plan for FFT\&. 
.SS "cufftHandle Matrix::get_forward_plan_conj ()\fC [inline]\fP"
Returns the forward plan for conjugate FFT\&. 
.SS "bool Matrix::get_has_mat_freq_tosi_other ()\fC [inline]\fP"
Returns true if the other matrix frequency in TOSI format exists, false otherwise\&. 
.SS "cufftHandle Matrix::get_inverse_plan ()\fC [inline]\fP"
Returns the inverse plan for FFT\&. 
.SS "cufftHandle Matrix::get_inverse_plan_conj ()\fC [inline]\fP"
Returns the inverse plan for conjugate FFT\&. 
.SS "Complex * Matrix::get_mat_freq_tosi ()\fC [inline]\fP"
Returns the matrix frequency in TOSI format\&. 
.SS "Complex * Matrix::get_mat_freq_tosi_other ()\fC [inline]\fP"
Returns the other matrix frequency in TOSI format\&. 
.SS "unsigned int Matrix::get_num_cols ()\fC [inline]\fP"
Returns the number of columns in the matrix\&. 
.SS "unsigned int Matrix::get_num_rows ()\fC [inline]\fP"
Returns the number of rows in the matrix\&. 
.SS "double * Matrix::get_res_pad ()\fC [inline]\fP"
Returns the padded result vector\&. 
.SS "Complex * Matrix::get_row_vec_freq ()\fC [inline]\fP"
Returns the row vector frequency\&. 
.SS "Complex * Matrix::get_row_vec_freq_tosi ()\fC [inline]\fP"
Returns the row vector frequency in TOSI format\&. 
.SS "double * Matrix::get_row_vec_pad ()\fC [inline]\fP"
Returns the padded row vector\&. 
.SS "double * Matrix::get_row_vec_unpad ()\fC [inline]\fP"
Returns the unpadded row vector\&. 
.SS "void Matrix::init_mat_from_file (std::string filename)"

.PP
Initializes the matrix from a file\&. 
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP The name of the file\&. 
.RE
.PP

.SS "bool Matrix::is_conjugate ()\fC [inline]\fP"
Returns true if the matrix is conjugate, false otherwise\&. 
.SS "bool Matrix::is_full ()\fC [inline]\fP"
Returns true if the matrix is full, false otherwise\&. 
.SS "bool Matrix::is_initialized ()\fC [inline]\fP"
Returns true if the matrix is initialized, false otherwise\&. 
.SS "void Matrix::matvec (\fBVector\fP & x, \fBVector\fP & y, bool full = \fCfalse\fP)"

.PP
Performs matrix-vector multiplication\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The input vector\&. 
.br
\fIy\fP The output vector\&. 
.br
\fIfull\fP Flag indicating if the matrix is full\&. 
.RE
.PP

.SS "void Matrix::transpose_matvec (\fBVector\fP & x, \fBVector\fP & y, bool full = \fCfalse\fP)"

.PP
Performs transpose matrix-vector multiplication\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP The input vector\&. 
.br
\fIy\fP The output vector\&. 
.br
\fIfull\fP Flag indicating if the matrix is full\&.
.RE
.PP
Perform transpose matrix-vector multiplication\&.
.PP
\fBParameters\fP
.RS 4
\fIx\fP The input vector\&. 
.br
\fIy\fP The output vector\&. 
.br
\fIfull\fP Whether the matrix is of the form (FF^*\\/F^*F) or just (F\\/F^*)\&.
.RE
.PP
This function performs transpose matrix-vector multiplication using the initialized matrix\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for FFTMatvec from the source code\&.
