<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classVector" kind="class" language="C++" prot="public">
    <compoundname>Vector</compoundname>
    <includes refid="Vector_8hpp" local="no">Vector.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classVector_1ab13b8c050b17ae3e44a840680204150d" prot="private" static="no" mutable="no">
        <type><ref refid="classComm" kindref="compound">Comm</ref> &amp;</type>
        <definition>Comm&amp; Vector::comm</definition>
        <argsstring></argsstring>
        <name>comm</name>
        <qualifiedname>Vector::comm</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reference to the <ref refid="classComm" kindref="compound">Comm</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/Vector.hpp" line="18" column="10" bodyfile="/home/srvenkat/matvec-test/src/Vector.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classVector_1a520dc2e6d8c688a0e6c16f338e15d24d" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Vector::num_blocks</definition>
        <argsstring></argsstring>
        <name>num_blocks</name>
        <qualifiedname>Vector::num_blocks</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of blocks. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/Vector.hpp" line="19" column="18" bodyfile="/home/srvenkat/matvec-test/src/Vector.hpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classVector_1a19d5f38bda53abbc2e6b73aeaeb18c76" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Vector::block_size</definition>
        <argsstring></argsstring>
        <name>block_size</name>
        <qualifiedname>Vector::block_size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Size of each block. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/Vector.hpp" line="20" column="18" bodyfile="/home/srvenkat/matvec-test/src/Vector.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classVector_1a27c838fe65637c79211b025aded0ebf4" prot="private" static="no" mutable="no">
        <type>double *</type>
        <definition>double* Vector::d_vec</definition>
        <argsstring></argsstring>
        <name>d_vec</name>
        <qualifiedname>Vector::d_vec</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to the vector data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/Vector.hpp" line="21" column="12" bodyfile="/home/srvenkat/matvec-test/src/Vector.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classVector_1a9d64fa346eb9c4fe17b709732f3e0859" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Vector::row_or_col</definition>
        <argsstring></argsstring>
        <name>row_or_col</name>
        <qualifiedname>Vector::row_or_col</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indicates whether the vector is row or column. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/Vector.hpp" line="22" column="17" bodyfile="/home/srvenkat/matvec-test/src/Vector.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classVector_1ab28aed3d01c87a2f7f428cacd86531f5" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Vector::initialized</definition>
        <argsstring></argsstring>
        <name>initialized</name>
        <qualifiedname>Vector::initialized</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flag indicating if the vector is initialized. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/Vector.hpp" line="23" column="10" bodyfile="/home/srvenkat/matvec-test/src/Vector.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classVector_1a4f1f744a132b611856ec38d0879735ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vector::Vector</definition>
        <argsstring>(Comm &amp;comm, unsigned int num_blocks, unsigned int block_size, std::string row_or_col)</argsstring>
        <name>Vector</name>
        <qualifiedname>Vector::Vector</qualifiedname>
        <param>
          <type><ref refid="classComm" kindref="compound">Comm</ref> &amp;</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>num_blocks</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>block_size</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>row_or_col</declname>
        </param>
        <briefdescription>
<para>Constructor for the <ref refid="classVector" kindref="compound">Vector</ref> class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comm</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classComm" kindref="compound">Comm</ref> object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of blocks. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>block_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of each block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row_or_col</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates whether the vector is row or column. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/Vector.hpp" line="33" column="5" bodyfile="/home/srvenkat/matvec-test/src/Vector.cpp" bodystart="11" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a51a2a096ceb7f6bffef8bba9530e46a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vector::Vector</definition>
        <argsstring>(Vector &amp;vec, bool deep_copy=false)</argsstring>
        <name>Vector</name>
        <qualifiedname>Vector::Vector</qualifiedname>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>deep_copy</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Copy constructor for the <ref refid="classVector" kindref="compound">Vector</ref> class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classVector" kindref="compound">Vector</ref> object to be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deep_copy</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to perform a deep copy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/Vector.hpp" line="40" column="5" bodyfile="/home/srvenkat/matvec-test/src/Vector.cpp" bodystart="34" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a2eb3c49587a4f12cade7895ccb73f6a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vector::~Vector</definition>
        <argsstring>()</argsstring>
        <name>~Vector</name>
        <qualifiedname>Vector::~Vector</qualifiedname>
        <briefdescription>
<para>Destructor for the <ref refid="classVector" kindref="compound">Vector</ref> class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/Vector.hpp" line="45" column="5" bodyfile="/home/srvenkat/matvec-test/src/Vector.cpp" bodystart="60" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a6192670c16f9d5e6c08ce76fa5712aa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Vector::init_vec</definition>
        <argsstring>()</argsstring>
        <name>init_vec</name>
        <qualifiedname>Vector::init_vec</qualifiedname>
        <briefdescription>
<para>Initializes the vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/Vector.hpp" line="50" column="10" bodyfile="/home/srvenkat/matvec-test/src/Vector.cpp" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a62b90f069859290f1ea98050ae93334a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Vector::init_vec_from_file</definition>
        <argsstring>(std::string filename)</argsstring>
        <name>init_vec_from_file</name>
        <qualifiedname>Vector::init_vec_from_file</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Initializes the vector from a file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/Vector.hpp" line="56" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a7fc017e5343529cfc7d89bb36cf5e586" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Vector::init_vec_ones</definition>
        <argsstring>()</argsstring>
        <name>init_vec_ones</name>
        <qualifiedname>Vector::init_vec_ones</qualifiedname>
        <briefdescription>
<para>Initializes the vector with all ones. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/Vector.hpp" line="61" column="10" bodyfile="/home/srvenkat/matvec-test/src/Vector.cpp" bodystart="101" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a97e896f5a16e1bc3d4a33f085d3e0b89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Vector::init_vec_zeros</definition>
        <argsstring>()</argsstring>
        <name>init_vec_zeros</name>
        <qualifiedname>Vector::init_vec_zeros</qualifiedname>
        <briefdescription>
<para>Initializes the vector with all zeros. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/Vector.hpp" line="66" column="10" bodyfile="/home/srvenkat/matvec-test/src/Vector.cpp" bodystart="85" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1afd0b9b363b837569dfb6bbed463ea3b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Vector::vec_axpy</definition>
        <argsstring>(double alpha, Vector &amp;x, Vector &amp;y)</argsstring>
        <name>vec_axpy</name>
        <qualifiedname>Vector::vec_axpy</qualifiedname>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Performs the operation y = alpha * x + y. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classVector" kindref="compound">Vector</ref> object x. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classVector" kindref="compound">Vector</ref> object y. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/Vector.hpp" line="74" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1aa9a0987371b81e03995274ad682298ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Vector::vec_waxpy</definition>
        <argsstring>(double alpha, Vector &amp;x, Vector &amp;y, Vector &amp;w)</argsstring>
        <name>vec_waxpy</name>
        <qualifiedname>Vector::vec_waxpy</qualifiedname>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classVector" kindref="compound">Vector</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Performs the operation w = alpha * x + y. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classVector" kindref="compound">Vector</ref> object x. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classVector" kindref="compound">Vector</ref> object y. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classVector" kindref="compound">Vector</ref> object w. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/Vector.hpp" line="83" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1af057940792298f65df0ba48fa8155c68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Vector::vec_scale</definition>
        <argsstring>(double alpha)</argsstring>
        <name>vec_scale</name>
        <qualifiedname>Vector::vec_scale</qualifiedname>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>Scales the vector by a scalar value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/Vector.hpp" line="89" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a79a0dc20b24093c5248e6a2a30993023" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Vector::on_grid</definition>
        <argsstring>()</argsstring>
        <name>on_grid</name>
        <qualifiedname>Vector::on_grid</qualifiedname>
        <briefdescription>
<para>Checks if the vector is on the grid. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the vector is on the grid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/Vector.hpp" line="95" column="10" bodyfile="/home/srvenkat/matvec-test/src/Vector.hpp" bodystart="95" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a6f5df548f7253fa635c276f07a00bf2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Vector::print</definition>
        <argsstring>(std::string name=&quot;&quot;)</argsstring>
        <name>print</name>
        <qualifiedname>Vector::print</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Prints the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/Vector.hpp" line="112" column="10" bodyfile="/home/srvenkat/matvec-test/src/Vector.cpp" bodystart="126" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1aaf2e9af539bd2cdaf64240b5d1731019" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double *</type>
        <definition>double * Vector::get_d_vec</definition>
        <argsstring>()</argsstring>
        <name>get_d_vec</name>
        <qualifiedname>Vector::get_d_vec</qualifiedname>
        <briefdescription>
<para>Gets the pointer to the vector data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The pointer to the vector data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/Vector.hpp" line="120" column="12" bodyfile="/home/srvenkat/matvec-test/src/Vector.hpp" bodystart="120" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1ad1912a9699235dd70a6ee7c35b606d9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int Vector::get_num_blocks</definition>
        <argsstring>()</argsstring>
        <name>get_num_blocks</name>
        <qualifiedname>Vector::get_num_blocks</qualifiedname>
        <briefdescription>
<para>Gets the number of blocks. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of blocks. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/Vector.hpp" line="126" column="18" bodyfile="/home/srvenkat/matvec-test/src/Vector.hpp" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1ad4f1887d3d9635fc9f4c748e402625d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int Vector::get_block_size</definition>
        <argsstring>()</argsstring>
        <name>get_block_size</name>
        <qualifiedname>Vector::get_block_size</qualifiedname>
        <briefdescription>
<para>Gets the size of each block. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of each block. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/Vector.hpp" line="132" column="18" bodyfile="/home/srvenkat/matvec-test/src/Vector.hpp" bodystart="132" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1afcf743b040db937eb9f6ee61663a711d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classComm" kindref="compound">Comm</ref> &amp;</type>
        <definition>Comm &amp; Vector::get_comm</definition>
        <argsstring>()</argsstring>
        <name>get_comm</name>
        <qualifiedname>Vector::get_comm</qualifiedname>
        <briefdescription>
<para>Gets the communication object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The communication object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/Vector.hpp" line="138" column="10" bodyfile="/home/srvenkat/matvec-test/src/Vector.hpp" bodystart="138" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a5fd1c46353a60e3f51f779d45426d238" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Vector::get_row_or_col</definition>
        <argsstring>()</argsstring>
        <name>get_row_or_col</name>
        <qualifiedname>Vector::get_row_or_col</qualifiedname>
        <briefdescription>
<para>Gets the row or column descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The row or column descriptor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/Vector.hpp" line="144" column="17" bodyfile="/home/srvenkat/matvec-test/src/Vector.hpp" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1a2433c7f2688d13171ca070dd68c7677e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Vector::is_initialized</definition>
        <argsstring>()</argsstring>
        <name>is_initialized</name>
        <qualifiedname>Vector::is_initialized</qualifiedname>
        <briefdescription>
<para>Checks if the vector is initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the vector is initialized, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/Vector.hpp" line="150" column="10" bodyfile="/home/srvenkat/matvec-test/src/Vector.hpp" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classVector_1aa448ef20add67aaa56fde0a30eb746dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Vector::set_d_vec</definition>
        <argsstring>(double *d_vec)</argsstring>
        <name>set_d_vec</name>
        <qualifiedname>Vector::set_d_vec</qualifiedname>
        <param>
          <type>double *</type>
          <declname>d_vec</declname>
        </param>
        <briefdescription>
<para>Sets the pointer to the vector data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d_vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the vector data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/Vector.hpp" line="158" column="10" bodyfile="/home/srvenkat/matvec-test/src/Vector.hpp" bodystart="158" bodyend="162"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a vector. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/srvenkat/matvec-test/src/Vector.hpp" line="16" column="1" bodyfile="/home/srvenkat/matvec-test/src/Vector.hpp" bodystart="16" bodyend="163"/>
    <listofallmembers>
      <member refid="classVector_1a19d5f38bda53abbc2e6b73aeaeb18c76" prot="private" virt="non-virtual"><scope>Vector</scope><name>block_size</name></member>
      <member refid="classVector_1ab13b8c050b17ae3e44a840680204150d" prot="private" virt="non-virtual"><scope>Vector</scope><name>comm</name></member>
      <member refid="classVector_1a27c838fe65637c79211b025aded0ebf4" prot="private" virt="non-virtual"><scope>Vector</scope><name>d_vec</name></member>
      <member refid="classVector_1ad4f1887d3d9635fc9f4c748e402625d1" prot="public" virt="non-virtual"><scope>Vector</scope><name>get_block_size</name></member>
      <member refid="classVector_1afcf743b040db937eb9f6ee61663a711d" prot="public" virt="non-virtual"><scope>Vector</scope><name>get_comm</name></member>
      <member refid="classVector_1aaf2e9af539bd2cdaf64240b5d1731019" prot="public" virt="non-virtual"><scope>Vector</scope><name>get_d_vec</name></member>
      <member refid="classVector_1ad1912a9699235dd70a6ee7c35b606d9b" prot="public" virt="non-virtual"><scope>Vector</scope><name>get_num_blocks</name></member>
      <member refid="classVector_1a5fd1c46353a60e3f51f779d45426d238" prot="public" virt="non-virtual"><scope>Vector</scope><name>get_row_or_col</name></member>
      <member refid="classVector_1a6192670c16f9d5e6c08ce76fa5712aa4" prot="public" virt="non-virtual"><scope>Vector</scope><name>init_vec</name></member>
      <member refid="classVector_1a62b90f069859290f1ea98050ae93334a" prot="public" virt="non-virtual"><scope>Vector</scope><name>init_vec_from_file</name></member>
      <member refid="classVector_1a7fc017e5343529cfc7d89bb36cf5e586" prot="public" virt="non-virtual"><scope>Vector</scope><name>init_vec_ones</name></member>
      <member refid="classVector_1a97e896f5a16e1bc3d4a33f085d3e0b89" prot="public" virt="non-virtual"><scope>Vector</scope><name>init_vec_zeros</name></member>
      <member refid="classVector_1ab28aed3d01c87a2f7f428cacd86531f5" prot="private" virt="non-virtual"><scope>Vector</scope><name>initialized</name></member>
      <member refid="classVector_1a2433c7f2688d13171ca070dd68c7677e" prot="public" virt="non-virtual"><scope>Vector</scope><name>is_initialized</name></member>
      <member refid="classVector_1a520dc2e6d8c688a0e6c16f338e15d24d" prot="private" virt="non-virtual"><scope>Vector</scope><name>num_blocks</name></member>
      <member refid="classVector_1a79a0dc20b24093c5248e6a2a30993023" prot="public" virt="non-virtual"><scope>Vector</scope><name>on_grid</name></member>
      <member refid="classVector_1a6f5df548f7253fa635c276f07a00bf2e" prot="public" virt="non-virtual"><scope>Vector</scope><name>print</name></member>
      <member refid="classVector_1a9d64fa346eb9c4fe17b709732f3e0859" prot="private" virt="non-virtual"><scope>Vector</scope><name>row_or_col</name></member>
      <member refid="classVector_1aa448ef20add67aaa56fde0a30eb746dd" prot="public" virt="non-virtual"><scope>Vector</scope><name>set_d_vec</name></member>
      <member refid="classVector_1afd0b9b363b837569dfb6bbed463ea3b1" prot="public" virt="non-virtual"><scope>Vector</scope><name>vec_axpy</name></member>
      <member refid="classVector_1af057940792298f65df0ba48fa8155c68" prot="public" virt="non-virtual"><scope>Vector</scope><name>vec_scale</name></member>
      <member refid="classVector_1aa9a0987371b81e03995274ad682298ad" prot="public" virt="non-virtual"><scope>Vector</scope><name>vec_waxpy</name></member>
      <member refid="classVector_1a4f1f744a132b611856ec38d0879735ee" prot="public" virt="non-virtual"><scope>Vector</scope><name>Vector</name></member>
      <member refid="classVector_1a51a2a096ceb7f6bffef8bba9530e46a1" prot="public" virt="non-virtual"><scope>Vector</scope><name>Vector</name></member>
      <member refid="classVector_1a2eb3c49587a4f12cade7895ccb73f6a0" prot="public" virt="non-virtual"><scope>Vector</scope><name>~Vector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
