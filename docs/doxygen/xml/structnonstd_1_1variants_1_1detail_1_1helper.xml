<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="structnonstd_1_1variants_1_1detail_1_1helper" kind="struct" language="C++" prot="public">
    <compoundname>nonstd::variants::detail::helper</compoundname>
    <templateparamlist>
      <param>
        <type>class <ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T0</ref></type>
      </param>
      <param>
        <type>class <ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T1</ref></type>
      </param>
      <param>
        <type>class <ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T2</ref></type>
      </param>
      <param>
        <type>class <ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T3</ref></type>
      </param>
      <param>
        <type>class <ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T4</ref></type>
      </param>
      <param>
        <type>class <ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T5</ref></type>
      </param>
      <param>
        <type>class <ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T6</ref></type>
      </param>
      <param>
        <type>class <ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T7</ref></type>
      </param>
      <param>
        <type>class <ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T8</ref></type>
      </param>
      <param>
        <type>class <ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T9</ref></type>
      </param>
      <param>
        <type>class <ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T10</ref></type>
      </param>
      <param>
        <type>class <ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T11</ref></type>
      </param>
      <param>
        <type>class <ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T12</ref></type>
      </param>
      <param>
        <type>class <ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T13</ref></type>
      </param>
      <param>
        <type>class <ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T14</ref></type>
      </param>
      <param>
        <type>class <ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T15</ref></type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structnonstd_1_1variants_1_1detail_1_1helper_1ade11d672f33f33de56d12afaebaadf45" prot="public" static="no">
        <type>signed char</type>
        <definition>typedef signed char nonstd::variants::detail::helper&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15 &gt;::type_index_t</definition>
        <argsstring></argsstring>
        <name>type_index_t</name>
        <qualifiedname>nonstd::variants::detail::helper::type_index_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="901" column="23" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="901" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structnonstd_1_1variants_1_1detail_1_1helper_1a5f1045e7cfa5aef9a968f90f0c754c4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>typedef</type>
        <definition>typedef nonstd::variants::detail::helper&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15 &gt;::variant_TL16</definition>
        <argsstring>(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) variant_types</argsstring>
        <name>variant_TL16</name>
        <qualifiedname>nonstd::variants::detail::helper::variant_TL16</qualifiedname>
        <param>
          <type><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T0</ref></type>
        </param>
        <param>
          <type><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T1</ref></type>
        </param>
        <param>
          <type><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T2</ref></type>
        </param>
        <param>
          <type><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T3</ref></type>
        </param>
        <param>
          <type><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T4</ref></type>
        </param>
        <param>
          <type><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T5</ref></type>
        </param>
        <param>
          <type><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T6</ref></type>
        </param>
        <param>
          <type><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T7</ref></type>
        </param>
        <param>
          <type><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T8</ref></type>
        </param>
        <param>
          <type><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T9</ref></type>
        </param>
        <param>
          <type><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T10</ref></type>
        </param>
        <param>
          <type><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T11</ref></type>
        </param>
        <param>
          <type><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T12</ref></type>
        </param>
        <param>
          <type><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T13</ref></type>
        </param>
        <param>
          <type><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T14</ref></type>
        </param>
        <param>
          <type><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T15</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="902" column="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structnonstd_1_1variants_1_1detail_1_1helper_1a724567cb219913fc647232fefb4d33ac" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>U *</type>
        <definition>static U * nonstd::variants::detail::helper&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15 &gt;::as</definition>
        <argsstring>(void *data)</argsstring>
        <name>as</name>
        <qualifiedname>nonstd::variants::detail::helper::as</qualifiedname>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="905" column="24" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="905" bodyend="905"/>
      </memberdef>
      <memberdef kind="function" id="structnonstd_1_1variants_1_1detail_1_1helper_1ac57a1cb0adee01c4bf5399434b048d6b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>U const *</type>
        <definition>static U const  * nonstd::variants::detail::helper&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15 &gt;::as</definition>
        <argsstring>(void const *data)</argsstring>
        <name>as</name>
        <qualifiedname>nonstd::variants::detail::helper::as</qualifiedname>
        <param>
          <type>void const *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="907" column="30" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="907" bodyend="909"/>
      </memberdef>
      <memberdef kind="function" id="structnonstd_1_1variants_1_1detail_1_1helper_1a9a9984796f5a3fbf31ffbe907110c149" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>type_index_t</type>
        <definition>static type_index_t nonstd::variants::detail::helper&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15 &gt;::to_index_t</definition>
        <argsstring>(std::size_t index)</argsstring>
        <name>to_index_t</name>
        <qualifiedname>nonstd::variants::detail::helper::to_index_t</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="911" column="23" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="911" bodyend="911"/>
      </memberdef>
      <memberdef kind="function" id="structnonstd_1_1variants_1_1detail_1_1helper_1a5800bc8fb2e047987126afb8587140a0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nonstd::variants::detail::helper&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15 &gt;::destroy</definition>
        <argsstring>(type_index_t index, void *data)</argsstring>
        <name>destroy</name>
        <qualifiedname>nonstd::variants::detail::helper::destroy</qualifiedname>
        <param>
          <type>type_index_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="913" column="15" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="913" bodyend="964"/>
      </memberdef>
      <memberdef kind="function" id="structnonstd_1_1variants_1_1detail_1_1helper_1a9208c18edc8e4e9bec57b29889bb679b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>type_index_t</type>
        <definition>static type_index_t nonstd::variants::detail::helper&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15 &gt;::copy_construct</definition>
        <argsstring>(type_index_t const from_index, const void *from_value, void *to_value)</argsstring>
        <name>copy_construct</name>
        <qualifiedname>nonstd::variants::detail::helper::copy_construct</qualifiedname>
        <param>
          <type>type_index_t const</type>
          <declname>from_index</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>from_value</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>to_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="1092" column="23" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="1092" bodyend="1145"/>
      </memberdef>
      <memberdef kind="function" id="structnonstd_1_1variants_1_1detail_1_1helper_1a37700bacf5ca1685bca4a39fd410bd3b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>type_index_t</type>
        <definition>static type_index_t nonstd::variants::detail::helper&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15 &gt;::copy_assign</definition>
        <argsstring>(type_index_t const from_index, const void *from_value, void *to_value)</argsstring>
        <name>copy_assign</name>
        <qualifiedname>nonstd::variants::detail::helper::copy_assign</qualifiedname>
        <param>
          <type>type_index_t const</type>
          <declname>from_index</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>from_value</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>to_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="1147" column="23" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="1147" bodyend="1200"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/srvenkat/matvec-test/src/table.hpp" line="900" column="1" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="900" bodyend="1201"/>
    <listofallmembers>
      <member refid="structnonstd_1_1variants_1_1detail_1_1helper_1a724567cb219913fc647232fefb4d33ac" prot="public" virt="non-virtual"><scope>nonstd::variants::detail::helper</scope><name>as</name></member>
      <member refid="structnonstd_1_1variants_1_1detail_1_1helper_1ac57a1cb0adee01c4bf5399434b048d6b" prot="public" virt="non-virtual"><scope>nonstd::variants::detail::helper</scope><name>as</name></member>
      <member refid="structnonstd_1_1variants_1_1detail_1_1helper_1a37700bacf5ca1685bca4a39fd410bd3b" prot="public" virt="non-virtual"><scope>nonstd::variants::detail::helper</scope><name>copy_assign</name></member>
      <member refid="structnonstd_1_1variants_1_1detail_1_1helper_1a9208c18edc8e4e9bec57b29889bb679b" prot="public" virt="non-virtual"><scope>nonstd::variants::detail::helper</scope><name>copy_construct</name></member>
      <member refid="structnonstd_1_1variants_1_1detail_1_1helper_1a5800bc8fb2e047987126afb8587140a0" prot="public" virt="non-virtual"><scope>nonstd::variants::detail::helper</scope><name>destroy</name></member>
      <member refid="structnonstd_1_1variants_1_1detail_1_1helper_1a9a9984796f5a3fbf31ffbe907110c149" prot="public" virt="non-virtual"><scope>nonstd::variants::detail::helper</scope><name>to_index_t</name></member>
      <member refid="structnonstd_1_1variants_1_1detail_1_1helper_1ade11d672f33f33de56d12afaebaadf45" prot="public" virt="non-virtual"><scope>nonstd::variants::detail::helper</scope><name>type_index_t</name></member>
      <member refid="structnonstd_1_1variants_1_1detail_1_1helper_1a5f1045e7cfa5aef9a968f90f0c754c4e" prot="public" virt="non-virtual"><scope>nonstd::variants::detail::helper</scope><name>variant_TL16</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
