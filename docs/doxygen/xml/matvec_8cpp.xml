<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="matvec_8cpp" kind="file" language="C++">
    <compoundname>matvec.cpp</compoundname>
    <includes refid="matvec_8hpp" local="yes">matvec.hpp</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/srvenkat/matvec-test/src/matvec.cpp</label>
        <link refid="matvec_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>matvec.hpp</label>
        <link refid="matvec_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>profiler.hpp</label>
        <link refid="profiler_8hpp_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>shared.hpp</label>
        <link refid="shared_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>table.hpp</label>
        <link refid="table_8hpp_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>utils.hpp</label>
        <link refid="utils_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>algorithm</label>
      </node>
      <node id="22">
        <label>array</label>
      </node>
      <node id="9">
        <label>assert.h</label>
      </node>
      <node id="29">
        <label>cassert</label>
      </node>
      <node id="40">
        <label>cctype</label>
      </node>
      <node id="35">
        <label>clocale</label>
      </node>
      <node id="25">
        <label>cstddef</label>
      </node>
      <node id="34">
        <label>cstdint</label>
      </node>
      <node id="33">
        <label>cstdio</label>
      </node>
      <node id="37">
        <label>cstdlib</label>
      </node>
      <node id="13">
        <label>cublas_v2.h</label>
      </node>
      <node id="8">
        <label>cuda_runtime.h</label>
      </node>
      <node id="7">
        <label>cufft.h</label>
      </node>
      <node id="44">
        <label>cutranspose.h</label>
      </node>
      <node id="21">
        <label>fstream</label>
      </node>
      <node id="42">
        <label>functional</label>
      </node>
      <node id="20">
        <label>iomanip</label>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="31">
        <label>iterator</label>
      </node>
      <node id="26">
        <label>limits</label>
      </node>
      <node id="36">
        <label>locale</label>
      </node>
      <node id="39">
        <label>memory</label>
      </node>
      <node id="16">
        <label>mpi.h</label>
      </node>
      <node id="18">
        <label>nccl.h</label>
      </node>
      <node id="27">
        <label>new</label>
      </node>
      <node id="12">
        <label>omp.h</label>
      </node>
      <node id="43">
        <label>optional</label>
      </node>
      <node id="32">
        <label>ostream</label>
      </node>
      <node id="41">
        <label>sstream</label>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
      <node id="6">
        <label>stdlib.h</label>
      </node>
      <node id="14">
        <label>string</label>
      </node>
      <node id="11">
        <label>sys/time.h</label>
      </node>
      <node id="10">
        <label>time.h</label>
      </node>
      <node id="17">
        <label>unistd.h</label>
      </node>
      <node id="28">
        <label>utility</label>
      </node>
      <node id="15">
        <label>vector</label>
      </node>
      <node id="38">
        <label>wchar.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="matvec_8cpp_1a1dffdf385a230abb160cf514e289e2f1" prot="public" static="no" mutable="no">
        <type><ref refid="classenum__array" kindref="compound">enum_array</ref>&lt; ProfilerTimesFull, <ref refid="classprofiler__t" kindref="compound">profiler_t</ref>, 3 &gt;</type>
        <definition>enum_array&lt;ProfilerTimesFull, profiler_t, 3&gt; t_list</definition>
        <argsstring></argsstring>
        <name>t_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/matvec.cpp" line="4" column="12" bodyfile="/home/srvenkat/matvec-test/src/matvec.cpp" bodystart="4" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="matvec_8cpp_1afc25d9fca3843968bdb05693e03171c5" prot="public" static="no" mutable="no">
        <type><ref refid="classenum__array" kindref="compound">enum_array</ref>&lt; ProfilerTimes, <ref refid="classprofiler__t" kindref="compound">profiler_t</ref>, 10 &gt;</type>
        <definition>enum_array&lt;ProfilerTimes, profiler_t, 10&gt; t_list_f</definition>
        <argsstring></argsstring>
        <name>t_list_f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/matvec.cpp" line="5" column="12" bodyfile="/home/srvenkat/matvec-test/src/matvec.cpp" bodystart="5" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="matvec_8cpp_1a38cf13bfa099cf1f95b8d4d282e98689" prot="public" static="no" mutable="no">
        <type><ref refid="classenum__array" kindref="compound">enum_array</ref>&lt; ProfilerTimes, <ref refid="classprofiler__t" kindref="compound">profiler_t</ref>, 10 &gt;</type>
        <definition>enum_array&lt;ProfilerTimes, profiler_t, 10&gt; t_list_fs</definition>
        <argsstring></argsstring>
        <name>t_list_fs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/matvec.cpp" line="6" column="12" bodyfile="/home/srvenkat/matvec-test/src/matvec.cpp" bodystart="6" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="matvec_8hpp" kindref="compound">matvec.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TIME_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"><ref refid="classenum__array" kindref="compound">enum_array&lt;ProfilerTimesFull, profiler_t, 3&gt;</ref><sp/>t_list;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><ref refid="classenum__array" kindref="compound">enum_array&lt;ProfilerTimes, profiler_t, 10&gt;</ref><sp/>t_list_f;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><ref refid="classenum__array" kindref="compound">enum_array&lt;ProfilerTimes, profiler_t, 10&gt;</ref><sp/>t_list_fs;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="matvec_8hpp_1aabe780dd505d3c74bda0cead3705d835" kindref="member">Matvec::setup</ref>(Complex**<sp/>mat_freq_tosi,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>h_mat,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>block_size,</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_cols,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_rows,<sp/>cublasHandle_t<sp/>cublasHandle)</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>d_mat;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftHandle<sp/>forward_plan_mat;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mat_len<sp/>=<sp/>(size_t)block_size<sp/>*<sp/>num_cols<sp/>*<sp/>num_rows<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>fft_int_t<sp/>n[1]<sp/>=<sp/>{<sp/>(fft_int_t)block_size<sp/>};</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>fft_int_t<sp/>idist<sp/>=<sp/>block_size;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>fft_int_t<sp/>odist<sp/>=<sp/>(block_size<sp/>/<sp/>2<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>fft_int_t<sp/>inembed[]<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>fft_int_t<sp/>onembed[]<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>fft_int_t<sp/>istride<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>fft_int_t<sp/>ostride<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!FFT_64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!ROW_SETUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftPlanMany(&amp;forward_plan_mat,<sp/>rank,<sp/>n,<sp/>inembed,<sp/>istride,<sp/>idist,<sp/>onembed,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ostride,<sp/>odist,<sp/>CUFFT_D2Z,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)num_cols<sp/>*<sp/>num_rows));</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftPlanMany(&amp;forward_plan_mat,<sp/>rank,<sp/>n,<sp/>inembed,<sp/>istride,<sp/>idist,<sp/>onembed,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ostride,<sp/>odist,<sp/>CUFFT_D2Z,<sp/>num_cols));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftCreate(&amp;forward_plan_mat));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftMakePlanMany64(forward_plan_mat,<sp/>rank,<sp/>n,<sp/>inembed,<sp/>istride,<sp/>idist,<sp/>onembed,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ostride,<sp/>odist,<sp/>CUFFT_D2Z,<sp/>num_cols<sp/>*<sp/>num_rows,<sp/>&amp;ws));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaMalloc((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;d_mat,<sp/>mat_len));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaMemcpy(d_mat,<sp/>h_mat,<sp/>mat_len,<sp/>cudaMemcpyHostToDevice));</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaMalloc(</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)mat_freq_tosi,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(block_size<sp/>/<sp/>2<sp/>+<sp/>1)<sp/>*<sp/>num_cols<sp/>*<sp/>num_rows<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Complex)));</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!ROW_SETUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftExecD2Z(forward_plan_mat,<sp/>d_mat,<sp/>*mat_freq_tosi));</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_rows;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cufftSafeCall(cufftExecD2Z(forward_plan_mat,<sp/>d_mat<sp/>+<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)i<sp/>*<sp/>block_size<sp/>*<sp/>num_cols,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*mat_freq_tosi<sp/>+<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)i<sp/>*<sp/>num_cols<sp/>*<sp/>(block_size<sp/>/<sp/>2<sp/>+<sp/>1)));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftDestroy(forward_plan_mat));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaFree(d_mat));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>1.0<sp/>/<sp/>block_size;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!FFT_64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>cublasSafeCall(cublasZdscal(cublasHandle,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(block_size<sp/>/<sp/>2<sp/>+<sp/>1)<sp/>*<sp/>num_cols<sp/>*<sp/>num_rows,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;scale,<sp/>*mat_freq_tosi,<sp/>1));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>cublasSafeCall(cublasZdscal_64(cublasHandle,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(block_size<sp/>/<sp/>2<sp/>+<sp/>1)<sp/>*<sp/>num_cols<sp/>*<sp/>num_rows,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;scale,<sp/>*mat_freq_tosi,<sp/>1));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>Complex*<sp/>d_mat_freq_trans;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaMalloc(</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)&amp;d_mat_freq_trans,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Complex)<sp/>*<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(block_size<sp/>/<sp/>2<sp/>+<sp/>1)<sp/>*<sp/>num_cols<sp/>*<sp/>num_rows));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_cols<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>num_rows<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sz[3]<sp/>=<sp/>{<sp/>(int)(block_size<sp/>/<sp/>2<sp/>+<sp/>1),<sp/>(int)num_cols,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)num_rows<sp/>};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>perm[3]<sp/>=<sp/>{<sp/>2,<sp/>1,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elements_per_thread<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cut_transpose3d(d_mat_freq_trans,<sp/>*mat_freq_tosi,<sp/>sz,<sp/>perm,<sp/>elements_per_thread)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>while<sp/>performing<sp/>transpose.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuDoubleComplex<sp/>aa({<sp/>1,<sp/>0<sp/>});</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuDoubleComplex<sp/>bb({<sp/>0,<sp/>0<sp/>});</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_rows<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!FFT_64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cublasSafeCall(</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cublasZgeam(cublasHandle,<sp/>CUBLAS_OP_T,<sp/>CUBLAS_OP_N,<sp/>num_cols,<sp/>(block_size<sp/>/<sp/>2<sp/>+<sp/>1),<sp/>&amp;aa,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*mat_freq_tosi,<sp/>(block_size<sp/>/<sp/>2<sp/>+<sp/>1),<sp/>&amp;bb,<sp/>NULL,<sp/>num_cols,<sp/>d_mat_freq_trans,<sp/>num_cols));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cublasSafeCall(cublasZgeam_64(cublasHandle,<sp/>CUBLAS_OP_T,<sp/>CUBLAS_OP_N,<sp/>num_cols,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(block_size<sp/>/<sp/>2<sp/>+<sp/>1),<sp/>&amp;aa,<sp/>*mat_freq_tosi,<sp/>(block_size<sp/>/<sp/>2<sp/>+<sp/>1),<sp/>&amp;bb,<sp/>NULL,<sp/>num_cols,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d_mat_freq_trans,<sp/>num_cols));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!FFT_64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cublasSafeCall(</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cublasZgeam(cublasHandle,<sp/>CUBLAS_OP_T,<sp/>CUBLAS_OP_N,<sp/>num_rows,<sp/>(block_size<sp/>/<sp/>2<sp/>+<sp/>1),<sp/>&amp;aa,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*mat_freq_tosi,<sp/>(block_size<sp/>/<sp/>2<sp/>+<sp/>1),<sp/>&amp;bb,<sp/>NULL,<sp/>num_rows,<sp/>d_mat_freq_trans,<sp/>num_rows));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cublasSafeCall(cublasZgeam_64(cublasHandle,<sp/>CUBLAS_OP_T,<sp/>CUBLAS_OP_N,<sp/>num_rows,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(block_size<sp/>/<sp/>2<sp/>+<sp/>1),<sp/>&amp;aa,<sp/>*mat_freq_tosi,<sp/>(block_size<sp/>/<sp/>2<sp/>+<sp/>1),<sp/>&amp;bb,<sp/>NULL,<sp/>num_rows,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d_mat_freq_trans,<sp/>num_rows));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaFree(*mat_freq_tosi));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>*mat_freq_tosi<sp/>=<sp/>d_mat_freq_trans;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="matvec_8hpp_1a88ade5f11b1bb8dff52f6cf9af8c5c0e" kindref="member">Matvec::local_matvec</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>out_vec,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>in_vec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Complex*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>d_mat_freq,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>block_size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_cols,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_rows,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>conjugate,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>unpad,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device,<sp/>cufftHandle<sp/>forward_plan,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftHandle<sp/>inverse_plan,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>out_vec_pad,<sp/>Complex*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>in_vec_freq,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>Complex*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>out_vec_freq_tosi,<sp/>Complex*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>in_vec_freq_tosi,<sp/>Complex*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>out_vec_freq,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaStream_t<sp/>s,<sp/>cublasHandle_t<sp/>cublasHandle)</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vec_in_len<sp/>=<sp/>(conjugate)<sp/>?<sp/>num_rows<sp/>:<sp/>num_cols;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vec_out_len<sp/>=<sp/>(conjugate)<sp/>?<sp/>num_cols<sp/>:<sp/>num_rows;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TIME_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classenum__array" kindref="compound">enum_array&lt;ProfilerTimes, profiler_t, 10&gt;</ref>*<sp/>tl<sp/>=<sp/>(conjugate)<sp/>?<sp/>&amp;t_list_fs<sp/>:<sp/>&amp;t_list_f;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>(*tl)[ProfilerTimes::FFT].start();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftExecD2Z(forward_plan,<sp/>in_vec,<sp/>in_vec_freq));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TIME_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>(*tl)[ProfilerTimes::FFT].stop();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TIME_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>(*tl)[ProfilerTimes::TRANS1].start();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>cuDoubleComplex<sp/>alpha({<sp/>1,<sp/>0<sp/>});</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>cuDoubleComplex<sp/>beta({<sp/>0,<sp/>0<sp/>});</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!FFT_64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>cublasSafeCall(</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cublasZgeam(cublasHandle,<sp/>CUBLAS_OP_T,<sp/>CUBLAS_OP_N,<sp/>vec_in_len,<sp/>(block_size<sp/>/<sp/>2<sp/>+<sp/>1),<sp/>&amp;alpha,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_vec_freq,<sp/>(block_size<sp/>/<sp/>2<sp/>+<sp/>1),<sp/>&amp;beta,<sp/>NULL,<sp/>vec_in_len,<sp/>in_vec_freq_tosi,<sp/>vec_in_len));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>cublasSafeCall(</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cublasZgeam_64(cublasHandle,<sp/>CUBLAS_OP_T,<sp/>CUBLAS_OP_N,<sp/>vec_in_len,<sp/>(block_size<sp/>/<sp/>2<sp/>+<sp/>1),<sp/>&amp;alpha,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_vec_freq,<sp/>(block_size<sp/>/<sp/>2<sp/>+<sp/>1),<sp/>&amp;beta,<sp/>NULL,<sp/>vec_in_len,<sp/>in_vec_freq_tosi,<sp/>vec_in_len));</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TIME_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>(*tl)[ProfilerTimes::TRANS1].stop();</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TIME_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>(*tl)[ProfilerTimes::SBGEMV].start();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>cublasOperation_t<sp/>transa<sp/>=<sp/>(conjugate)<sp/>?<sp/>CUBLAS_OP_C<sp/>:<sp/>CUBLAS_OP_N;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!FFT_64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>cublasSafeCall(cublasZgemvStridedBatched(cublasHandle,<sp/>transa,<sp/>num_rows,<sp/>num_cols,<sp/>&amp;alpha,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d_mat_freq,<sp/>num_rows,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)num_rows<sp/>*<sp/>num_cols,<sp/>in_vec_freq_tosi,<sp/>1,<sp/>vec_in_len,<sp/>&amp;beta,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_vec_freq_tosi,<sp/>1,<sp/>vec_out_len,<sp/>(block_size<sp/>/<sp/>2<sp/>+<sp/>1)));</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>cublasSafeCall(cublasZgemvStridedBatched_64(cublasHandle,<sp/>transa,<sp/>num_rows,<sp/>num_cols,<sp/>&amp;alpha,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d_mat_freq,<sp/>num_rows,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)num_rows<sp/>*<sp/>num_cols,<sp/>in_vec_freq_tosi,<sp/>1,<sp/>vec_in_len,<sp/>&amp;beta,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_vec_freq_tosi,<sp/>1,<sp/>vec_out_len,<sp/>(block_size<sp/>/<sp/>2<sp/>+<sp/>1)));</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TIME_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>(*tl)[ProfilerTimes::SBGEMV].stop();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TIME_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>(*tl)[ProfilerTimes::TRANS2].start();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!FFT_64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>cublasSafeCall(cublasZgeam(cublasHandle,<sp/>CUBLAS_OP_T,<sp/>CUBLAS_OP_N,<sp/>(block_size<sp/>/<sp/>2<sp/>+<sp/>1),<sp/>vec_out_len,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;alpha,<sp/>out_vec_freq_tosi,<sp/>vec_out_len,<sp/>&amp;beta,<sp/>NULL,<sp/>(block_size<sp/>/<sp/>2<sp/>+<sp/>1),<sp/>out_vec_freq,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(block_size<sp/>/<sp/>2<sp/>+<sp/>1)));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>cublasSafeCall(cublasZgeam_64(cublasHandle,<sp/>CUBLAS_OP_T,<sp/>CUBLAS_OP_N,<sp/>(block_size<sp/>/<sp/>2<sp/>+<sp/>1),</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec_out_len,<sp/>&amp;alpha,<sp/>out_vec_freq_tosi,<sp/>vec_out_len,<sp/>&amp;beta,<sp/>NULL,<sp/>(block_size<sp/>/<sp/>2<sp/>+<sp/>1),</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_vec_freq,<sp/>(block_size<sp/>/<sp/>2<sp/>+<sp/>1)));</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TIME_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>(*tl)[ProfilerTimes::TRANS2].stop();</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TIME_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>(*tl)[ProfilerTimes::IFFT].start();</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftExecZ2D(inverse_plan,<sp/>out_vec_freq,<sp/>out_vec_pad));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TIME_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>(*tl)[ProfilerTimes::IFFT].stop();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TIME_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>(*tl)[ProfilerTimes::UNPAD].start();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceUtils_1a9d0ccfc29aa0ef4861f810002058a8ff" kindref="member">Utils::UnpadRepadVector</ref>(out_vec_pad,<sp/>out_vec,<sp/>vec_out_len,<sp/>block_size,<sp/>unpad,<sp/>s);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TIME_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>(*tl)[ProfilerTimes::UNPAD].stop();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="matvec_8hpp_1a1a73c2b528fe5b4b2ec3fd4de4765659" kindref="member">Matvec::compute_matvec</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>out_vec,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>in_vec,<sp/>Complex*<sp/>mat_freq_tosi,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>block_size,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_cols,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_rows,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>conjugate,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device,<sp/>ncclComm_t<sp/>nccl_row_comm,<sp/>ncclComm_t<sp/>nccl_col_comm,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaStream_t<sp/>s,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>in_vec_pad,<sp/>cufftHandle<sp/>forward_plan,<sp/>cufftHandle<sp/>inverse_plan,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftHandle<sp/>forward_plan_conj,<sp/>cufftHandle<sp/>inverse_plan_conj,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>out_vec_pad,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>Complex*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>in_vec_freq,<sp/>Complex*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>out_vec_freq_tosi,<sp/>Complex*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>in_vec_freq_tosi,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>Complex*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>out_vec_freq,<sp/>cublasHandle_t<sp/>cublasHandle,<sp/>Complex*<sp/>mat_freq_tosi_other,</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>res_pad)</highlight></codeline>
<codeline lineno="229"><highlight class="normal">{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TIME_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classenum__array" kindref="compound">enum_array&lt;ProfilerTimes, profiler_t, 10&gt;</ref>*tl,<sp/>*tl2;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tl2<sp/>=<sp/>(conjugate)<sp/>?<sp/>&amp;t_list_fs<sp/>:<sp/>&amp;t_list_f;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>tl<sp/>=<sp/>(conjugate)<sp/>?<sp/>&amp;t_list_fs<sp/>:<sp/>&amp;t_list_f;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>MPICHECK(MPI_Barrier(MPI_COMM_WORLD));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>(*tl)[ProfilerTimes::TOT].start();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vec_in_len<sp/>=<sp/>(conjugate)<sp/>?<sp/>num_rows<sp/>:<sp/>num_cols;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vec_out_len<sp/>=<sp/>(conjugate)<sp/>?<sp/>num_cols<sp/>:<sp/>num_rows;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TIME_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>MPICHECK(MPI_Barrier(MPI_COMM_WORLD));</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>(*tl)[ProfilerTimes::BROADCAST].start();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>ncclComm_t<sp/>comm<sp/>=<sp/>(conjugate)<sp/>?<sp/>nccl_row_comm<sp/>:<sp/>nccl_col_comm;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>ncclComm_t<sp/>comm2<sp/>=<sp/>(conjugate)<sp/>?<sp/>nccl_col_comm<sp/>:<sp/>nccl_row_comm;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>NCCLCHECK(ncclBroadcast(</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)in_vec,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)in_vec,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)vec_in_len<sp/>*<sp/>block_size<sp/>/<sp/>2,<sp/>ncclDouble,<sp/>0,<sp/>comm,<sp/>s));</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaStreamSynchronize(s));</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TIME_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>MPICHECK(MPI_Barrier(MPI_COMM_WORLD));</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>(*tl)[ProfilerTimes::BROADCAST].stop();</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TIME_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>(*tl)[ProfilerTimes::PAD].start();</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceUtils_1adc2f304acec8ac21939f8ccd69324cd3" kindref="member">Utils::PadVector</ref>(in_vec,<sp/>in_vec_pad,<sp/>vec_in_len,<sp/>block_size,<sp/>s);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TIME_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>(*tl)[ProfilerTimes::PAD].stop();</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>Complex<sp/>*mat_freq_tosi1,<sp/>*mat_freq_tosi2;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(conjugate)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_freq_tosi1<sp/>=<sp/>(mat_freq_tosi_other)<sp/>?<sp/>mat_freq_tosi_other<sp/>:<sp/>mat_freq_tosi;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_freq_tosi2<sp/>=<sp/>mat_freq_tosi;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_freq_tosi1<sp/>=<sp/>mat_freq_tosi;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_freq_tosi2<sp/>=<sp/>(mat_freq_tosi_other)<sp/>?<sp/>mat_freq_tosi_other<sp/>:<sp/>mat_freq_tosi;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_freq_tosi1<sp/>=<sp/>mat_freq_tosi;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_freq_tosi2<sp/>=<sp/>mat_freq_tosi;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>res_vec<sp/>=<sp/>(full)<sp/>?<sp/>res_pad<sp/>:<sp/>out_vec;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="matvec_8hpp_1a88ade5f11b1bb8dff52f6cf9af8c5c0e" kindref="member">local_matvec</ref>(res_vec,<sp/>in_vec_pad,<sp/>mat_freq_tosi1,<sp/>block_size,<sp/>num_cols,<sp/>num_rows,<sp/>conjugate,<sp/>!(full),</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,<sp/>forward_plan,<sp/>inverse_plan,<sp/>out_vec_pad,<sp/>in_vec_freq,<sp/>out_vec_freq_tosi,<sp/>in_vec_freq_tosi,<sp/>out_vec_freq,<sp/>s,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cublasHandle);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TIME_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!full)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TIME_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPICHECK(MPI_Barrier(MPI_COMM_WORLD));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*tl)[ProfilerTimes::NCCLC].start();</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NCCLCHECK(ncclReduce((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)res_vec,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)res_vec,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)vec_out_len<sp/>*<sp/>block_size<sp/>/<sp/>2,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncclDouble,<sp/>ncclSum,<sp/>0,<sp/>comm2,<sp/>s));</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpuErrchk(cudaStreamSynchronize(s));</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TIME_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPICHECK(MPI_Barrier(MPI_COMM_WORLD));</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*tl)[ProfilerTimes::NCCLC].stop();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*tl)[ProfilerTimes::TOT].stop();</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TIME_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPICHECK(MPI_Barrier(MPI_COMM_WORLD));</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*tl)[ProfilerTimes::NCCLC].start();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NCCLCHECK(ncclAllReduce((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)res_vec,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)res_vec,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)vec_out_len<sp/>*<sp/>block_size,</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncclDouble,<sp/>ncclSum,<sp/>comm2,<sp/>s));</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpuErrchk(cudaStreamSynchronize(s));</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TIME_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPICHECK(MPI_Barrier(MPI_COMM_WORLD));</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*tl)[ProfilerTimes::NCCLC].stop();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*tl)[ProfilerTimes::TOT].stop();</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TIME_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPICHECK(MPI_Barrier(MPI_COMM_WORLD));</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*tl2)[ProfilerTimes::TOT].start();</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matvec_8hpp_1a88ade5f11b1bb8dff52f6cf9af8c5c0e" kindref="member">local_matvec</ref>(out_vec,<sp/>res_vec,<sp/>mat_freq_tosi2,<sp/>block_size,<sp/>num_cols,<sp/>num_rows,<sp/>!(conjugate),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device,<sp/>forward_plan_conj,<sp/>inverse_plan_conj,<sp/>in_vec_pad,<sp/>out_vec_freq,<sp/>in_vec_freq_tosi,</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_vec_freq_tosi,<sp/>in_vec_freq,<sp/>s,<sp/>cublasHandle);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TIME_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpuErrchk(cudaDeviceSynchronize());</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPICHECK(MPI_Barrier(MPI_COMM_WORLD));</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*tl2)[ProfilerTimes::NCCLC].start();</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NCCLCHECK(ncclReduce((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)out_vec,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)out_vec,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)vec_in_len<sp/>*<sp/>block_size<sp/>/<sp/>2,</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ncclDouble,<sp/>ncclSum,<sp/>0,<sp/>comm,<sp/>s));</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpuErrchk(cudaStreamSynchronize(s));</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TIME_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPICHECK(MPI_Barrier(MPI_COMM_WORLD));</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*tl2)[ProfilerTimes::NCCLC].stop();</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*tl2)[ProfilerTimes::TOT].stop();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/srvenkat/matvec-test/src/matvec.cpp"/>
  </compounddef>
</doxygen>
