<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespaceUtils" kind="namespace" language="C++">
    <compoundname>Utils</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceUtils_1a7f1ae45e1fa6c658c451fd26c361c66f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t Utils::getHostHash</definition>
        <argsstring>(const char *string)</argsstring>
        <name>getHostHash</name>
        <qualifiedname>Utils::getHostHash</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Get the host hash. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the hash of the host name.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The host name. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The hash of the host name. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/utils.hpp" line="25" column="10" declfile="/home/srvenkat/matvec-test/src/utils.hpp" declline="25" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceUtils_1abe2d56751904f51d670f0ead1a510a28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::getHostName</definition>
        <argsstring>(char *hostname, int maxlen)</argsstring>
        <name>getHostName</name>
        <qualifiedname>Utils::getHostName</qualifiedname>
        <param>
          <type>char *</type>
          <declname>hostname</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxlen</declname>
        </param>
        <briefdescription>
<para>Get the host name. </para>
        </briefdescription>
        <detaileddescription>
<para>This function gets the host name and stores it in the provided buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hostname</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to store the host name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxlen</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum length of the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/utils.hpp" line="35" column="6" declfile="/home/srvenkat/matvec-test/src/utils.hpp" declline="35" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceUtils_1adc2f304acec8ac21939f8ccd69324cd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::PadVector</definition>
        <argsstring>(const double *const d_in, double *const d_pad, const unsigned int num_cols, const unsigned int size, cudaStream_t s)</argsstring>
        <name>PadVector</name>
        <qualifiedname>Utils::PadVector</qualifiedname>
        <param>
          <type>const double *const</type>
          <declname>d_in</declname>
        </param>
        <param>
          <type>double *const</type>
          <declname>d_pad</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>num_cols</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>cudaStream_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Pads each block of a vector to twice the length with zeros. </para>
        </briefdescription>
        <detaileddescription>
<para>This function takes an input vector <computeroutput>d_in</computeroutput> and pads each block of the vector to twice the length with zeros. The padded vector is stored in the output vector <computeroutput>d_pad</computeroutput>. The number of columns in each block is specified by <computeroutput>num_cols</computeroutput>. The total size of the vector is specified by <computeroutput>size</computeroutput>. The padding operation is performed asynchronously on the CUDA stream <computeroutput>s</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d_in</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the input vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d_pad</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output padded vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns in each block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Total size of the vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>CUDA stream for asynchronous execution. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/utils.hpp" line="51" column="6" declfile="/home/srvenkat/matvec-test/src/utils.hpp" declline="51" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceUtils_1a9d0ccfc29aa0ef4861f810002058a8ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::UnpadRepadVector</definition>
        <argsstring>(const double *const d_in, double *const d_out, const unsigned int num_cols, const unsigned int size, const bool unpad, cudaStream_t s)</argsstring>
        <name>UnpadRepadVector</name>
        <qualifiedname>Utils::UnpadRepadVector</qualifiedname>
        <param>
          <type>const double *const</type>
          <declname>d_in</declname>
        </param>
        <param>
          <type>double *const</type>
          <declname>d_out</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>num_cols</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>unpad</declname>
        </param>
        <param>
          <type>cudaStream_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Unpads or repads a vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This function either unpads each block of the vector back to the original length or resets the second half of each block to zeros.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d_in</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the input vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d_out</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_cols</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of columns in the vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unpad</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to unpad or repad the vector. If true, the vector will be unpadded. If false, the second half of each block will be reset to zeros. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>The CUDA stream to use for the operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/utils.hpp" line="68" column="6" declfile="/home/srvenkat/matvec-test/src/utils.hpp" declline="68" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceUtils_1afc7acb2b6248e999e44b69df4d5968ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::printVec</definition>
        <argsstring>(double *vec, int len, int unpad_size, std::string name=&quot;Vector&quot;)</argsstring>
        <name>printVec</name>
        <qualifiedname>Utils::printVec</qualifiedname>
        <param>
          <type>double *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>unpad_size</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;Vector&quot;</defval>
        </param>
        <briefdescription>
<para>Prints the elements of a vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This function prints the elements of a vector to the console.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unpad_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the unpadded vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) The name of the vector. Defaults to &quot;Vector&quot;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/utils.hpp" line="81" column="6" declfile="/home/srvenkat/matvec-test/src/utils.hpp" declline="81" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceUtils_1ae04d65fb199f9ea094484826841cde2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::printVecComplex</definition>
        <argsstring>(Complex *vec, int len, int unpad_size, std::string name=&quot;Vector&quot;)</argsstring>
        <name>printVecComplex</name>
        <qualifiedname>Utils::printVecComplex</qualifiedname>
        <param>
          <type>Complex *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>unpad_size</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;Vector&quot;</defval>
        </param>
        <briefdescription>
<para>Prints a complex vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This function prints the elements of a complex vector to the console.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The complex vector to be printed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unpad_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the unpadded vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the vector (optional). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/utils.hpp" line="93" column="6" declfile="/home/srvenkat/matvec-test/src/utils.hpp" declline="93" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceUtils_1a0a7bd8883afe67961fad599b27a385a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::printVecMPI</definition>
        <argsstring>(double *vec, int len, int unpad_size, int rank, int world_size, std::string name=&quot;Vector&quot;)</argsstring>
        <name>printVecMPI</name>
        <qualifiedname>Utils::printVecMPI</qualifiedname>
        <param>
          <type>double *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>unpad_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rank</declname>
        </param>
        <param>
          <type>int</type>
          <declname>world_size</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
          <defval>&quot;Vector&quot;</defval>
        </param>
        <briefdescription>
<para>Prints a vector using MPI. </para>
        </briefdescription>
        <detaileddescription>
<para>This function prints the elements of a vector using MPI. It takes the following parameters:<itemizedlist>
<listitem><para><computeroutput>vec</computeroutput>: A pointer to the vector to be printed.</para>
</listitem><listitem><para><computeroutput>len</computeroutput>: The length of the vector.</para>
</listitem><listitem><para><computeroutput>unpad_size</computeroutput>: The size of the unpadded vector.</para>
</listitem><listitem><para><computeroutput>rank</computeroutput>: The rank of the current process.</para>
</listitem><listitem><para><computeroutput>world_size</computeroutput>: The total number of processes.</para>
</listitem><listitem><para><computeroutput>name</computeroutput>: (Optional) The name of the vector (default is &quot;Vector&quot;).</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the vector to be printed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unpad_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the unpadded vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rank</parametername>
</parameternamelist>
<parameterdescription>
<para>The rank of the current process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>world_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The total number of processes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>(Optional) The name of the vector (default is &quot;Vector&quot;). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/utils.hpp" line="113" column="6" declfile="/home/srvenkat/matvec-test/src/utils.hpp" declline="113" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceUtils_1a2eb3dd7a1eabb25acfc1fcae3780d9f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::printTimes</definition>
        <argsstring>(int reps=1, bool table=true)</argsstring>
        <name>printTimes</name>
        <qualifiedname>Utils::printTimes</qualifiedname>
        <param>
          <type>int</type>
          <declname>reps</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>table</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Print the times for the different parts of the code. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reps</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of repetitions of the code. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag indicating whether to print the times in a table or print raw values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/utils.hpp" line="121" column="6" declfile="/home/srvenkat/matvec-test/src/utils.hpp" declline="121" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceUtils_1a2087376d30e113031da868ee9e6da68d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::makeTable</definition>
        <argsstring>(std::vector&lt; std::string &gt; col_names, std::vector&lt; long double &gt; mean, std::vector&lt; long double &gt; min, std::vector&lt; long double &gt; max)</argsstring>
        <name>makeTable</name>
        <qualifiedname>Utils::makeTable</qualifiedname>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>col_names</declname>
        </param>
        <param>
          <type>std::vector&lt; long double &gt;</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>std::vector&lt; long double &gt;</type>
          <declname>min</declname>
        </param>
        <param>
          <type>std::vector&lt; long double &gt;</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Make a table of timing data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>col_names</parametername>
</parameternamelist>
<parameterdescription>
<para>The names of the columns (first entry is the title). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mean</parametername>
</parameternamelist>
<parameterdescription>
<para>The mean times. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum times. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum times. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/utils.hpp" line="130" column="6" declfile="/home/srvenkat/matvec-test/src/utils.hpp" declline="130" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceUtils_1a0dfdccf48b9c5cae7b29109a80d7b495" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Utils::printRaw</definition>
        <argsstring>(long double *mean_times, long double *min_times, long double *max_times, long double *mean_times_f, long double *min_times_f, long double *max_times_f, long double *mean_times_fs, long double *min_times_fs, long double *max_times_fs, int times_len)</argsstring>
        <name>printRaw</name>
        <qualifiedname>Utils::printRaw</qualifiedname>
        <param>
          <type>long double *</type>
          <declname>mean_times</declname>
        </param>
        <param>
          <type>long double *</type>
          <declname>min_times</declname>
        </param>
        <param>
          <type>long double *</type>
          <declname>max_times</declname>
        </param>
        <param>
          <type>long double *</type>
          <declname>mean_times_f</declname>
        </param>
        <param>
          <type>long double *</type>
          <declname>min_times_f</declname>
        </param>
        <param>
          <type>long double *</type>
          <declname>max_times_f</declname>
        </param>
        <param>
          <type>long double *</type>
          <declname>mean_times_fs</declname>
        </param>
        <param>
          <type>long double *</type>
          <declname>min_times_fs</declname>
        </param>
        <param>
          <type>long double *</type>
          <declname>max_times_fs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>times_len</declname>
        </param>
        <briefdescription>
<para>Print the raw timing data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mean_times</parametername>
</parameternamelist>
<parameterdescription>
<para>The mean times. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_times</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum times. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_times</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum times. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mean_times_f</parametername>
</parameternamelist>
<parameterdescription>
<para>The mean times for the forward FFT. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_times_f</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum times for the forward FFT. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_times_f</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum times for the forward FFT. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mean_times_fs</parametername>
</parameternamelist>
<parameterdescription>
<para>The mean times for the forward FFT in TOSI format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_times_fs</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum times for the forward FFT in TOSI format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_times_fs</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum times for the forward FFT in TOSI format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>times_len</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of timing segments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/utils.hpp" line="146" column="6" declfile="/home/srvenkat/matvec-test/src/utils.hpp" declline="146" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Namespace containing utility functions. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/srvenkat/matvec-test/src/utils.hpp" line="13" column="1"/>
  </compounddef>
</doxygen>
