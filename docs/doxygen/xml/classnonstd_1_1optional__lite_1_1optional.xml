<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classnonstd_1_1optional__lite_1_1optional" kind="class" language="C++" prot="public">
    <compoundname>nonstd::optional_lite::optional</compoundname>
    <includes refid="table_8hpp" local="no">table.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classnonstd_1_1optional__lite_1_1optional_1a9422463ea61e667d92ae1ffc5721866f" prot="private" static="no">
        <type>void(optional::*</type>
        <definition>typedef void(optional::* nonstd::optional_lite::optional&lt; T &gt;::safe_bool) () const</definition>
        <argsstring>)() const</argsstring>
        <name>safe_bool</name>
        <qualifiedname>nonstd::optional_lite::optional::safe_bool</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3256" column="11" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3256" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classnonstd_1_1optional__lite_1_1optional_1afb67abeaaad640aa25b81f8564e53476" prot="public" static="no">
        <type>T</type>
        <definition>typedef T nonstd::optional_lite::optional&lt; T &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>nonstd::optional_lite::optional::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3259" column="13" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3259" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classnonstd_1_1optional__lite_1_1optional_1aa756d67787488b1e2bba885ce4da6fe0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class optional</definition>
        <argsstring></argsstring>
        <name>optional</name>
        <qualifiedname>nonstd::optional_lite::optional::optional</qualifiedname>
        <param>
          <type><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3254" column="27" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3254" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnonstd_1_1optional__lite_1_1optional_1ac2b1ced67fe8728cf7325d872d2f2353" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nonstd::optional_lite::optional&lt; T &gt;::has_value_</definition>
        <argsstring></argsstring>
        <name>has_value_</name>
        <qualifiedname>nonstd::optional_lite::optional::has_value_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3732" column="8" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3732" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnonstd_1_1optional__lite_1_1optional_1a46ee511e34b82eac1a46e567242b321c" prot="private" static="no" mutable="no">
        <type><ref refid="unionnonstd_1_1optional__lite_1_1detail_1_1storage__t" kindref="compound">detail::storage_t</ref>&lt; value_type &gt;</type>
        <definition>detail::storage_t&lt;value_type&gt; nonstd::optional_lite::optional&lt; T &gt;::contained</definition>
        <argsstring></argsstring>
        <name>contained</name>
        <qualifiedname>nonstd::optional_lite::optional::contained</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3733" column="21" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3733" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnonstd_1_1optional__lite_1_1optional_1ab4b9bcd1052a174bc0db48f882e56316" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>optional_constexpr</type>
        <definition>optional_constexpr nonstd::optional_lite::optional&lt; T &gt;::optional</definition>
        <argsstring>() optional_noexcept</argsstring>
        <name>optional</name>
        <qualifiedname>nonstd::optional_lite::optional::optional</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3264" column="22" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3264" bodyend="3264"/>
      </memberdef>
      <memberdef kind="function" id="classnonstd_1_1optional__lite_1_1optional_1a12154ea396c33ebb669643908f9d885d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>optional_constexpr</type>
        <definition>optional_constexpr nonstd::optional_lite::optional&lt; T &gt;::optional</definition>
        <argsstring>(nullopt_t) optional_noexcept</argsstring>
        <name>optional</name>
        <qualifiedname>nonstd::optional_lite::optional::optional</qualifiedname>
        <param>
          <type><ref refid="structnonstd_1_1optional__lite_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3268" column="22" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3268" bodyend="3269"/>
      </memberdef>
      <memberdef kind="function" id="classnonstd_1_1optional__lite_1_1optional_1afdf54512fc239c7e871bc314cc1811db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>optional_constexpr14</type>
        <definition>optional_constexpr14 nonstd::optional_lite::optional&lt; T &gt;::optional</definition>
        <argsstring>(optional const &amp;other)</argsstring>
        <name>optional</name>
        <qualifiedname>nonstd::optional_lite::optional::optional</qualifiedname>
        <param>
          <type><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3280" column="24" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3280" bodyend="3284"/>
      </memberdef>
      <memberdef kind="function" id="classnonstd_1_1optional__lite_1_1optional_1a42bee710920018175be2cdf6b275e77c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>nonstd::optional_lite::optional&lt; T &gt;::optional</definition>
        <argsstring>(optional&lt; U &gt; const &amp;other)</argsstring>
        <name>optional</name>
        <qualifiedname>nonstd::optional_lite::optional::optional</qualifiedname>
        <param>
          <type><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref>&lt; U &gt; const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3337" column="4" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3337" bodyend="3341"/>
      </memberdef>
      <memberdef kind="function" id="classnonstd_1_1optional__lite_1_1optional_1ad7affb46d381a36c869146c1439d1e5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nonstd::optional_lite::optional&lt; T &gt;::optional</definition>
        <argsstring>(value_type const &amp;value)</argsstring>
        <name>optional</name>
        <qualifiedname>nonstd::optional_lite::optional::optional</qualifiedname>
        <param>
          <type>value_type const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3421" column="3" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3421" bodyend="3421"/>
      </memberdef>
      <memberdef kind="function" id="classnonstd_1_1optional__lite_1_1optional_1a85649b228f6422000d4ddbf67e4d79be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nonstd::optional_lite::optional&lt; T &gt;::~optional</definition>
        <argsstring>()</argsstring>
        <name>~optional</name>
        <qualifiedname>nonstd::optional_lite::optional::~optional</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3427" column="3" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3427" bodyend="3431"/>
      </memberdef>
      <memberdef kind="function" id="classnonstd_1_1optional__lite_1_1optional_1aaee895f5d8c119315ec44d2cc6763f93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref> &amp;</type>
        <definition>optional &amp; nonstd::optional_lite::optional&lt; T &gt;::operator=</definition>
        <argsstring>(nullopt_t) optional_noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>nonstd::optional_lite::optional::operator=</qualifiedname>
        <param>
          <type><ref refid="structnonstd_1_1optional__lite_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3436" column="12" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3436" bodyend="3439"/>
      </memberdef>
      <memberdef kind="function" id="classnonstd_1_1optional__lite_1_1optional_1abb5848fa58dde69d13e3a276248439ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref> &amp;</type>
        <definition>optional &amp; nonstd::optional_lite::optional&lt; T &gt;::operator=</definition>
        <argsstring>(optional const &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>nonstd::optional_lite::optional::operator=</qualifiedname>
        <param>
          <type><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3452" column="12" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3452" bodyend="3463"/>
      </memberdef>
      <memberdef kind="function" id="classnonstd_1_1optional__lite_1_1optional_1a20d77743fd247d24433297c673bba89b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref> &amp;</type>
        <definition>optional &amp; nonstd::optional_lite::optional&lt; T &gt;::operator=</definition>
        <argsstring>(U const &amp;value)</argsstring>
        <name>operator=</name>
        <qualifiedname>nonstd::optional_lite::optional::operator=</qualifiedname>
        <param>
          <type>U const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3507" column="25" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3507" bodyend="3513"/>
      </memberdef>
      <memberdef kind="function" id="classnonstd_1_1optional__lite_1_1optional_1a49a6065dd162fa58cdf64ebccca8906f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref> &amp;</type>
        <definition>optional &amp; nonstd::optional_lite::optional&lt; T &gt;::operator=</definition>
        <argsstring>(optional&lt; U &gt; const &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>nonstd::optional_lite::optional::operator=</qualifiedname>
        <param>
          <type><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref>&lt; U &gt; const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3540" column="3" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3540" bodyend="3542"/>
      </memberdef>
      <memberdef kind="function" id="classnonstd_1_1optional__lite_1_1optional_1a473a8646a91f486fd499f58db3cc15a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nonstd::optional_lite::optional&lt; T &gt;::swap</definition>
        <argsstring>(optional &amp;other)</argsstring>
        <name>swap</name>
        <qualifiedname>nonstd::optional_lite::optional::swap</qualifiedname>
        <param>
          <type><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3592" column="8" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3592" bodyend="3607"/>
      </memberdef>
      <memberdef kind="function" id="classnonstd_1_1optional__lite_1_1optional_1a352300d0bb7cabe46352c8e19c48e2c1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>optional_constexpr value_type const *</type>
        <definition>optional_constexpr value_type const  * nonstd::optional_lite::optional&lt; T &gt;::operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <qualifiedname>nonstd::optional_lite::optional::operator-&gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3611" column="39" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3611" bodyend="3613"/>
      </memberdef>
      <memberdef kind="function" id="classnonstd_1_1optional__lite_1_1optional_1a012ce05977283a1f8ca47f5f780a484a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>optional_constexpr14 value_type *</type>
        <definition>optional_constexpr14 value_type * nonstd::optional_lite::optional&lt; T &gt;::operator-&gt;</definition>
        <argsstring>()</argsstring>
        <name>operator-&gt;</name>
        <qualifiedname>nonstd::optional_lite::optional::operator-&gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3615" column="35" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3615" bodyend="3617"/>
      </memberdef>
      <memberdef kind="function" id="classnonstd_1_1optional__lite_1_1optional_1a1016a6cc722f02dea5c2eaf9c377493d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>optional_constexpr value_type const &amp;</type>
        <definition>optional_constexpr value_type const  &amp; nonstd::optional_lite::optional&lt; T &gt;::operator*</definition>
        <argsstring>() const optional_ref_qual</argsstring>
        <name>operator*</name>
        <qualifiedname>nonstd::optional_lite::optional::operator*</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3619" column="39" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3619" bodyend="3621"/>
      </memberdef>
      <memberdef kind="function" id="classnonstd_1_1optional__lite_1_1optional_1a32348cca957ae29a906036f7cb328fcc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>optional_constexpr14 value_type &amp;</type>
        <definition>optional_constexpr14 value_type &amp; nonstd::optional_lite::optional&lt; T &gt;::operator*</definition>
        <argsstring>() optional_ref_qual</argsstring>
        <name>operator*</name>
        <qualifiedname>nonstd::optional_lite::optional::operator*</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3623" column="35" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3623" bodyend="3625"/>
      </memberdef>
      <memberdef kind="function" id="classnonstd_1_1optional__lite_1_1optional_1a540ac15713bad0c4cec887505e8891c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>optional_constexpr</type>
        <definition>optional_constexpr nonstd::optional_lite::optional&lt; T &gt;::operator safe_bool</definition>
        <argsstring>() const optional_noexcept</argsstring>
        <name>operator safe_bool</name>
        <qualifiedname>nonstd::optional_lite::optional::operator safe_bool</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3640" column="22" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3640" bodyend="3642"/>
      </memberdef>
      <memberdef kind="function" id="classnonstd_1_1optional__lite_1_1optional_1a8d36137e398950bfbd63e02d2dac7789" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>optional_constexpr bool</type>
        <definition>optional_constexpr bool nonstd::optional_lite::optional&lt; T &gt;::has_value</definition>
        <argsstring>() const optional_noexcept</argsstring>
        <name>has_value</name>
        <qualifiedname>nonstd::optional_lite::optional::has_value</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3646" column="28" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3646" bodyend="3648"/>
      </memberdef>
      <memberdef kind="function" id="classnonstd_1_1optional__lite_1_1optional_1a96d1fee2fad2bb1ae239064125d8ed78" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>optional_constexpr14 value_type const &amp;</type>
        <definition>optional_constexpr14 value_type const  &amp; nonstd::optional_lite::optional&lt; T &gt;::value</definition>
        <argsstring>() const optional_ref_qual</argsstring>
        <name>value</name>
        <qualifiedname>nonstd::optional_lite::optional::value</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3651" column="42" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3651" bodyend="3660"/>
      </memberdef>
      <memberdef kind="function" id="classnonstd_1_1optional__lite_1_1optional_1ac7a4bfd161fc1facbbe0ba18908f7178" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>optional_constexpr14 value_type &amp;</type>
        <definition>optional_constexpr14 value_type &amp; nonstd::optional_lite::optional&lt; T &gt;::value</definition>
        <argsstring>() optional_ref_qual</argsstring>
        <name>value</name>
        <qualifiedname>nonstd::optional_lite::optional::value</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3662" column="35" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3662" bodyend="3671"/>
      </memberdef>
      <memberdef kind="function" id="classnonstd_1_1optional__lite_1_1optional_1a4dd8f8fc1549fee78bd80f1977b504dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>optional_constexpr value_type</type>
        <definition>optional_constexpr value_type nonstd::optional_lite::optional&lt; T &gt;::value_or</definition>
        <argsstring>(U const &amp;v) const</argsstring>
        <name>value_or</name>
        <qualifiedname>nonstd::optional_lite::optional::value_or</qualifiedname>
        <param>
          <type>U const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3697" column="45" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3697" bodyend="3699"/>
      </memberdef>
      <memberdef kind="function" id="classnonstd_1_1optional__lite_1_1optional_1a024284c4c1a99a5bf0813c3ec5d6b5b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nonstd::optional_lite::optional&lt; T &gt;::reset</definition>
        <argsstring>() optional_noexcept</argsstring>
        <name>reset</name>
        <qualifiedname>nonstd::optional_lite::optional::reset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3705" column="8" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3705" bodyend="3711"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnonstd_1_1optional__lite_1_1optional_1a5ec2f17cf46a8f70ac20cb792c2bfb0c" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nonstd::optional_lite::optional&lt; T &gt;::this_type_does_not_support_comparisons</definition>
        <argsstring>() const</argsstring>
        <name>this_type_does_not_support_comparisons</name>
        <qualifiedname>nonstd::optional_lite::optional::this_type_does_not_support_comparisons</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3714" column="8" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3714" bodyend="3714"/>
      </memberdef>
      <memberdef kind="function" id="classnonstd_1_1optional__lite_1_1optional_1a11c7cd31607c6c6f9f2bc203fac64417" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nonstd::optional_lite::optional&lt; T &gt;::initialize</definition>
        <argsstring>(V const &amp;value)</argsstring>
        <name>initialize</name>
        <qualifiedname>nonstd::optional_lite::optional::initialize</qualifiedname>
        <param>
          <type>V const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3716" column="20" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3716" bodyend="3720"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>class optional </para>
    </briefdescription>
    <detaileddescription>
<para>optional access error</para>
<para>optional </para>
    </detaileddescription>
    <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3252" column="12" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3252" bodyend="3734"/>
    <listofallmembers>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1a46ee511e34b82eac1a46e567242b321c" prot="private" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>contained</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1a8d36137e398950bfbd63e02d2dac7789" prot="public" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>has_value</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1ac2b1ced67fe8728cf7325d872d2f2353" prot="private" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>has_value_</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1a11c7cd31607c6c6f9f2bc203fac64417" prot="private" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>initialize</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1a540ac15713bad0c4cec887505e8891c5" prot="public" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>operator safe_bool</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1a1016a6cc722f02dea5c2eaf9c377493d" prot="public" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>operator*</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1a32348cca957ae29a906036f7cb328fcc" prot="public" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>operator*</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1a352300d0bb7cabe46352c8e19c48e2c1" prot="public" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>operator-&gt;</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1a012ce05977283a1f8ca47f5f780a484a" prot="public" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>operator-&gt;</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1aaee895f5d8c119315ec44d2cc6763f93" prot="public" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>operator=</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1abb5848fa58dde69d13e3a276248439ce" prot="public" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>operator=</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1a20d77743fd247d24433297c673bba89b" prot="public" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>operator=</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1a49a6065dd162fa58cdf64ebccca8906f" prot="public" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>operator=</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1aa756d67787488b1e2bba885ce4da6fe0" prot="private" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>optional</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1ab4b9bcd1052a174bc0db48f882e56316" prot="public" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>optional</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1a12154ea396c33ebb669643908f9d885d" prot="public" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>optional</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1afdf54512fc239c7e871bc314cc1811db" prot="public" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>optional</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1a42bee710920018175be2cdf6b275e77c" prot="public" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>optional</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1ad7affb46d381a36c869146c1439d1e5e" prot="public" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>optional</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1a024284c4c1a99a5bf0813c3ec5d6b5b9" prot="public" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>reset</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1a9422463ea61e667d92ae1ffc5721866f" prot="private" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>safe_bool</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1a473a8646a91f486fd499f58db3cc15a7" prot="public" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>swap</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1a5ec2f17cf46a8f70ac20cb792c2bfb0c" prot="private" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>this_type_does_not_support_comparisons</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1a96d1fee2fad2bb1ae239064125d8ed78" prot="public" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>value</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1ac7a4bfd161fc1facbbe0ba18908f7178" prot="public" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>value</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1a4dd8f8fc1549fee78bd80f1977b504dd" prot="public" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>value_or</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1afb67abeaaad640aa25b81f8564e53476" prot="public" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>value_type</name></member>
      <member refid="classnonstd_1_1optional__lite_1_1optional_1a85649b228f6422000d4ddbf67e4d79be" prot="public" virt="non-virtual"><scope>nonstd::optional_lite::optional</scope><name>~optional</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
