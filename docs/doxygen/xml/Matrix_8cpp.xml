<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="Matrix_8cpp" kind="file" language="C++">
    <compoundname>Matrix.cpp</compoundname>
    <includes refid="Matrix_8hpp" local="yes">Matrix.hpp</includes>
    <incdepgraph>
      <node id="23">
        <label>Comm.hpp</label>
        <link refid="Comm_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/srvenkat/matvec-test/src/Matrix.cpp</label>
        <link refid="Matrix_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Matrix.hpp</label>
        <link refid="Matrix_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>Vector.hpp</label>
        <link refid="Vector_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>matvec.hpp</label>
        <link refid="matvec_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>profiler.hpp</label>
        <link refid="profiler_8hpp_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>shared.hpp</label>
        <link refid="shared_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>table.hpp</label>
        <link refid="table_8hpp_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>utils.hpp</label>
        <link refid="utils_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>algorithm</label>
      </node>
      <node id="22">
        <label>array</label>
      </node>
      <node id="9">
        <label>assert.h</label>
      </node>
      <node id="30">
        <label>cassert</label>
      </node>
      <node id="41">
        <label>cctype</label>
      </node>
      <node id="36">
        <label>clocale</label>
      </node>
      <node id="26">
        <label>cstddef</label>
      </node>
      <node id="35">
        <label>cstdint</label>
      </node>
      <node id="34">
        <label>cstdio</label>
      </node>
      <node id="38">
        <label>cstdlib</label>
      </node>
      <node id="13">
        <label>cublas_v2.h</label>
      </node>
      <node id="8">
        <label>cuda_runtime.h</label>
      </node>
      <node id="7">
        <label>cufft.h</label>
      </node>
      <node id="47">
        <label>cutranspose.h</label>
      </node>
      <node id="21">
        <label>fstream</label>
      </node>
      <node id="43">
        <label>functional</label>
      </node>
      <node id="20">
        <label>iomanip</label>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="32">
        <label>iterator</label>
      </node>
      <node id="27">
        <label>limits</label>
      </node>
      <node id="37">
        <label>locale</label>
      </node>
      <node id="40">
        <label>memory</label>
      </node>
      <node id="16">
        <label>mpi.h</label>
      </node>
      <node id="18">
        <label>nccl.h</label>
      </node>
      <node id="28">
        <label>new</label>
      </node>
      <node id="12">
        <label>omp.h</label>
      </node>
      <node id="44">
        <label>optional</label>
      </node>
      <node id="33">
        <label>ostream</label>
      </node>
      <node id="42">
        <label>sstream</label>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
      <node id="6">
        <label>stdlib.h</label>
      </node>
      <node id="14">
        <label>string</label>
      </node>
      <node id="11">
        <label>sys/time.h</label>
      </node>
      <node id="10">
        <label>time.h</label>
      </node>
      <node id="17">
        <label>unistd.h</label>
      </node>
      <node id="29">
        <label>utility</label>
      </node>
      <node id="15">
        <label>vector</label>
      </node>
      <node id="39">
        <label>wchar.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Matrix_8hpp" kindref="compound">Matrix.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"><ref refid="classMatrix_1afe7d1bcd790920eaa5542aa8f4fc3125" kindref="member">Matrix::Matrix</ref>(<ref refid="classComm" kindref="compound">Comm</ref><sp/>&amp;comm,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_cols,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_rows,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>block_size,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>conjugate,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full)<sp/>:<sp/>comm(comm),<sp/>num_cols(num_cols),<sp/>num_rows(num_rows),<sp/>block_size(block_size),<sp/>conjugate(conjugate),<sp/>full(full)</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>matrix<sp/>data<sp/>structures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>fft_int_t<sp/>n[1]<sp/>=<sp/>{(fft_int_t)block_size};</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>fft_int_t<sp/>idist<sp/>=<sp/>block_size;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>fft_int_t<sp/>odist<sp/>=<sp/>(block_size<sp/>/<sp/>2<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>fft_int_t<sp/>inembed[]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>fft_int_t<sp/>onembed[]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>fft_int_t<sp/>istride<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>fft_int_t<sp/>ostride<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!FFT_64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftPlanMany(&amp;(forward_plan),<sp/>rank,<sp/>n,<sp/>inembed,<sp/>istride,<sp/>idist,<sp/>onembed,<sp/>ostride,<sp/>odist,<sp/>CUFFT_D2Z,<sp/>num_cols));</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftPlanMany(&amp;(inverse_plan),<sp/>rank,<sp/>n,<sp/>onembed,<sp/>ostride,<sp/>odist,<sp/>inembed,<sp/>istride,<sp/>idist,<sp/>CUFFT_Z2D,<sp/>num_rows));</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ws<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftCreate(&amp;(forward_plan)));</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftMakePlanMany64(forward_plan,<sp/>rank,<sp/>n,<sp/>inembed,<sp/>istride,<sp/>idist,<sp/>onembed,<sp/>ostride,<sp/>odist,<sp/>CUFFT_D2Z,<sp/>num_cols,<sp/>&amp;ws));</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftCreate(&amp;(inverse_plan)));</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftMakePlanMany64(inverse_plan,<sp/>rank,<sp/>n,<sp/>onembed,<sp/>ostride,<sp/>odist,<sp/>inembed,<sp/>istride,<sp/>idist,<sp/>CUFFT_Z2D,<sp/>num_rows,<sp/>&amp;ws));</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaStream_t<sp/>s<sp/>=<sp/>comm.<ref refid="classComm_1a437d58a124a2b5d8ebc48bbcf197b835" kindref="member">get_stream</ref>();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftSetStream(forward_plan,<sp/>s));</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftSetStream(inverse_plan,<sp/>s));</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaMalloc((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)&amp;(col_vec_pad),<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)num_cols<sp/>*<sp/>block_size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaMalloc((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)&amp;(col_vec_freq),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Complex)<sp/>*<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(block_size<sp/>/<sp/>2<sp/>+<sp/>1)<sp/>*<sp/>num_cols));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaMalloc((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)&amp;(col_vec_freq_tosi),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Complex)<sp/>*<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(block_size<sp/>/<sp/>2<sp/>+<sp/>1)<sp/>*<sp/>num_cols));</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaMalloc((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)&amp;(row_vec_freq_tosi),<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Complex)<sp/>*<sp/>(block_size<sp/>/<sp/>2<sp/>+<sp/>1)<sp/>*<sp/>num_rows));</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaMalloc((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)&amp;(row_vec_freq),<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Complex)<sp/>*<sp/>(block_size<sp/>/<sp/>2<sp/>+<sp/>1)<sp/>*<sp/>num_rows));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaMalloc((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)&amp;(row_vec_pad),<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>*<sp/>block_size<sp/>*<sp/>num_rows));<sp/></highlight><highlight class="comment">//<sp/>num_cols<sp/>*<sp/>num_rows));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!FFT_64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftPlanMany(&amp;(forward_plan_conj),<sp/>rank,<sp/>n,<sp/>inembed,<sp/>istride,<sp/>idist,<sp/>onembed,<sp/>ostride,<sp/>odist,<sp/>CUFFT_D2Z,<sp/>num_rows));</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftPlanMany(&amp;(inverse_plan_conj),<sp/>rank,<sp/>n,<sp/>onembed,<sp/>ostride,<sp/>odist,<sp/>inembed,<sp/>istride,<sp/>idist,<sp/>CUFFT_Z2D,<sp/>num_cols));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftCreate(&amp;(forward_plan_conj)));</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftMakePlanMany64(forward_plan_conj,<sp/>rank,<sp/>n,<sp/>inembed,<sp/>istride,<sp/>idist,<sp/>onembed,<sp/>ostride,<sp/>odist,<sp/>CUFFT_D2Z,<sp/>num_rows,<sp/>&amp;ws));</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftCreate(&amp;(inverse_plan_conj)));</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftMakePlanMany64(inverse_plan_conj,<sp/>rank,<sp/>n,<sp/>onembed,<sp/>ostride,<sp/>odist,<sp/>inembed,<sp/>istride,<sp/>idist,<sp/>CUFFT_Z2D,<sp/>num_cols,<sp/>&amp;ws));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftSetStream(forward_plan_conj,<sp/>s));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftSetStream(inverse_plan_conj,<sp/>s));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_block_len<sp/>=<sp/>(num_cols<sp/>&gt;<sp/>num_rows)<sp/>?<sp/>num_cols<sp/>:<sp/>num_rows;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaMalloc((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)&amp;(res_pad),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>*<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)block_size<sp/>*<sp/>max_block_len));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaMalloc((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)&amp;(col_vec_unpad),<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)num_cols<sp/>*<sp/>block_size<sp/>/<sp/>2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaMalloc((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)&amp;(row_vec_unpad),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>*<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)block_size<sp/>/<sp/>2<sp/>*<sp/>num_rows));</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><ref refid="classMatrix_1a9b1c3627f573d78a2f08623fdfef990f" kindref="member">Matrix::~Matrix</ref>()</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftDestroy(forward_plan));</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftDestroy(inverse_plan));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaFree(col_vec_pad));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaFree(col_vec_freq));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaFree(col_vec_freq_tosi));</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaFree(row_vec_freq_tosi));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaFree(row_vec_freq));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaFree(row_vec_pad));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftDestroy(forward_plan_conj));</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>cufftSafeCall(cufftDestroy(inverse_plan_conj));</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaFree(col_vec_unpad));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaFree(row_vec_unpad));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaFree(res_pad));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(initialized)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpuErrchk(cudaFree(mat_freq_tosi));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_mat_freq_tosi_other<sp/>&amp;&amp;<sp/>initialized)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpuErrchk(cudaFree(mat_freq_tosi_other));</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classMatrix_1ad283bb30fdf703e377d374a0627e4f5a" kindref="member">Matrix::init_mat_ones</ref>()</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*h_mat<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[(size_t)block_size<sp/>*<sp/>num_cols<sp/>*<sp/>num_rows];</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>parallel<sp/>for<sp/>collapse(3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_rows;<sp/>i++)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>num_cols;<sp/>j++)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>block_size;<sp/>k++)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>to<sp/>1<sp/>if<sp/>k<sp/>&lt;<sp/>block_size<sp/>/<sp/>2,<sp/>0<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h_mat[(size_t)i<sp/>*<sp/>num_cols<sp/>*<sp/>block_size<sp/>+<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)j<sp/>*<sp/>block_size<sp/>+<sp/>k]<sp/>=<sp/>(k<sp/>&lt;<sp/>block_size<sp/>/<sp/>2)<sp/>?<sp/>1.0<sp/>:<sp/>0.0;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>cublasHandle_t<sp/>cublasHandle<sp/>=<sp/>comm.<ref refid="classComm_1af49c51d6d8dbacf8110fafeb3244e05f" kindref="member">get_cublasHandle</ref>();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="matvec_8hpp_1aabe780dd505d3c74bda0cead3705d835" kindref="member">Matvec::setup</ref>(&amp;mat_freq_tosi,<sp/>h_mat,<sp/>block_size,<sp/>num_cols,<sp/>num_rows,<sp/>cublasHandle);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>h_mat;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>initialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classMatrix_1ae783ee8f81d18bff66a3dd7584693200" kindref="member">Matrix::matvec</ref>(<ref refid="classVector" kindref="compound">Vector</ref><sp/>&amp;x,<sp/><ref refid="classVector" kindref="compound">Vector</ref><sp/>&amp;y,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!initialized)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Matrix<sp/>not<sp/>initialized.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPICHECK(MPI_Abort(MPI_COMM_WORLD,<sp/>1));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!x.<ref refid="classVector_1a2433c7f2688d13171ca070dd68c7677e" kindref="member">is_initialized</ref>())</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Vector<sp/>x<sp/>not<sp/>initialized.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPICHECK(MPI_Abort(MPI_COMM_WORLD,<sp/>1));</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!y.<ref refid="classVector_1a2433c7f2688d13171ca070dd68c7677e" kindref="member">is_initialized</ref>())</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Vector<sp/>y<sp/>not<sp/>initialized.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPICHECK(MPI_Abort(MPI_COMM_WORLD,<sp/>1));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaStream_t<sp/>s<sp/>=<sp/>comm.<ref refid="classComm_1a437d58a124a2b5d8ebc48bbcf197b835" kindref="member">get_stream</ref>();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>cublasHandle_t<sp/>cublasHandle<sp/>=<sp/>comm.<ref refid="classComm_1af49c51d6d8dbacf8110fafeb3244e05f" kindref="member">get_cublasHandle</ref>();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device<sp/>=<sp/>comm.<ref refid="classComm_1a638a2b980344476d11b02dcc39c389ff" kindref="member">get_device</ref>();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>ncclComm_t<sp/>row_comm<sp/>=<sp/>comm.<ref refid="classComm_1a2170a74851ad06b4ea387b5114a2164c" kindref="member">get_gpu_row_comm</ref>();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>ncclComm_t<sp/>col_comm<sp/>=<sp/>comm.<ref refid="classComm_1a729e5f5243a1ae259a3711e882ac5431" kindref="member">get_gpu_col_comm</ref>();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*in_vec,<sp/>*out_vec;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>in_color<sp/>=<sp/>comm.<ref refid="classComm_1a905fd1890b9b3789df5fc285ff4d77ba" kindref="member">get_row_color</ref>();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>out_color<sp/>=<sp/>(full)<sp/>?<sp/>comm.<ref refid="classComm_1a905fd1890b9b3789df5fc285ff4d77ba" kindref="member">get_row_color</ref>()<sp/>:<sp/>comm.<ref refid="classComm_1ac011085efdd47ebbf906710cd761aa8d" kindref="member">get_col_color</ref>();</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in_color<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_vec<sp/>=<sp/>x.<ref refid="classVector_1aaf2e9af539bd2cdaf64240b5d1731019" kindref="member">get_d_vec</ref>();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_vec<sp/>=<sp/>col_vec_unpad;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out_color<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_vec<sp/>=<sp/>y.<ref refid="classVector_1aaf2e9af539bd2cdaf64240b5d1731019" kindref="member">get_d_vec</ref>();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_vec<sp/>=<sp/>(full)<sp/>?<sp/>col_vec_unpad<sp/>:<sp/>row_vec_unpad;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matvec_8hpp_1a1a73c2b528fe5b4b2ec3fd4de4765659" kindref="member">Matvec::compute_matvec</ref>(out_vec,<sp/>in_vec,<sp/>mat_freq_tosi,<sp/>block_size,<sp/>num_cols,<sp/>num_rows,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>device,<sp/>row_comm,<sp/>col_comm,<sp/>s,<sp/>col_vec_pad,<sp/>forward_plan,<sp/>inverse_plan,<sp/>forward_plan_conj,<sp/>inverse_plan_conj,<sp/>row_vec_pad,<sp/>col_vec_freq,<sp/>row_vec_freq,<sp/>col_vec_freq_tosi,<sp/>row_vec_freq_tosi,<sp/>cublasHandle,<sp/>mat_freq_tosi_other,<sp/>res_pad);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matvec_8hpp_1a1a73c2b528fe5b4b2ec3fd4de4765659" kindref="member">Matvec::compute_matvec</ref>(out_vec,<sp/>in_vec,<sp/>mat_freq_tosi,<sp/>block_size,<sp/>num_cols,<sp/>num_rows,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>device,<sp/>row_comm,<sp/>col_comm,<sp/>s,<sp/>col_vec_pad,<sp/>forward_plan,<sp/>inverse_plan,<sp/>forward_plan_conj,<sp/>inverse_plan_conj,<sp/>row_vec_pad,<sp/>col_vec_freq,<sp/>row_vec_freq,<sp/>col_vec_freq_tosi,<sp/>row_vec_freq_tosi,<sp/>cublasHandle,<sp/>mat_freq_tosi_other,<sp/>res_pad);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaStreamSynchronize(s));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out_color<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y.<ref refid="classVector_1aa448ef20add67aaa56fde0a30eb746dd" kindref="member">set_d_vec</ref>(out_vec);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classMatrix_1a8bb582b3010c05408cbd53d1a3b45b2b" kindref="member">Matrix::transpose_matvec</ref>(<ref refid="classVector" kindref="compound">Vector</ref><sp/>&amp;x,<sp/><ref refid="classVector" kindref="compound">Vector</ref><sp/>&amp;y,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>full)</highlight></codeline>
<codeline lineno="185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!initialized)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Matrix<sp/>not<sp/>initialized.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPICHECK(MPI_Abort(MPI_COMM_WORLD,<sp/>1));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!x.<ref refid="classVector_1a2433c7f2688d13171ca070dd68c7677e" kindref="member">is_initialized</ref>())</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Vector<sp/>x<sp/>not<sp/>initialized.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPICHECK(MPI_Abort(MPI_COMM_WORLD,<sp/>1));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!y.<ref refid="classVector_1a2433c7f2688d13171ca070dd68c7677e" kindref="member">is_initialized</ref>())</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Vector<sp/>y<sp/>not<sp/>initialized.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPICHECK(MPI_Abort(MPI_COMM_WORLD,<sp/>1));</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>cudaStream_t<sp/>s<sp/>=<sp/>comm.<ref refid="classComm_1a437d58a124a2b5d8ebc48bbcf197b835" kindref="member">get_stream</ref>();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>cublasHandle_t<sp/>cublasHandle<sp/>=<sp/>comm.<ref refid="classComm_1af49c51d6d8dbacf8110fafeb3244e05f" kindref="member">get_cublasHandle</ref>();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device<sp/>=<sp/>comm.<ref refid="classComm_1a638a2b980344476d11b02dcc39c389ff" kindref="member">get_device</ref>();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>ncclComm_t<sp/>row_comm<sp/>=<sp/>comm.<ref refid="classComm_1a2170a74851ad06b4ea387b5114a2164c" kindref="member">get_gpu_row_comm</ref>();</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>ncclComm_t<sp/>col_comm<sp/>=<sp/>comm.<ref refid="classComm_1a729e5f5243a1ae259a3711e882ac5431" kindref="member">get_gpu_col_comm</ref>();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*in_vec,<sp/>*out_vec;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>in_color<sp/>=<sp/>comm.<ref refid="classComm_1ac011085efdd47ebbf906710cd761aa8d" kindref="member">get_col_color</ref>();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>out_color<sp/>=<sp/>(full)<sp/>?<sp/>comm.<ref refid="classComm_1ac011085efdd47ebbf906710cd761aa8d" kindref="member">get_col_color</ref>()<sp/>:<sp/>comm.<ref refid="classComm_1a905fd1890b9b3789df5fc285ff4d77ba" kindref="member">get_row_color</ref>();</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in_color<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_vec<sp/>=<sp/>x.<ref refid="classVector_1aaf2e9af539bd2cdaf64240b5d1731019" kindref="member">get_d_vec</ref>();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_vec<sp/>=<sp/>row_vec_unpad;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out_color<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_vec<sp/>=<sp/>y.<ref refid="classVector_1aaf2e9af539bd2cdaf64240b5d1731019" kindref="member">get_d_vec</ref>();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_vec<sp/>=<sp/>(full)<sp/>?<sp/>row_vec_unpad<sp/>:<sp/>col_vec_unpad;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(full)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matvec_8hpp_1a1a73c2b528fe5b4b2ec3fd4de4765659" kindref="member">Matvec::compute_matvec</ref>(out_vec,<sp/>in_vec,<sp/>mat_freq_tosi,<sp/>block_size,<sp/>num_cols,<sp/>num_rows,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>device,<sp/>row_comm,<sp/>col_comm,<sp/>s,<sp/>row_vec_pad,<sp/>forward_plan_conj,<sp/>inverse_plan_conj,<sp/>forward_plan,<sp/>inverse_plan,<sp/>col_vec_pad,<sp/>row_vec_freq_tosi,<sp/>col_vec_freq_tosi,<sp/>row_vec_freq,<sp/>col_vec_freq,<sp/>cublasHandle,<sp/>mat_freq_tosi_other,<sp/>res_pad);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="matvec_8hpp_1a1a73c2b528fe5b4b2ec3fd4de4765659" kindref="member">Matvec::compute_matvec</ref>(out_vec,<sp/>in_vec,<sp/>mat_freq_tosi,<sp/>block_size,<sp/>num_cols,<sp/>num_rows,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>device,<sp/>row_comm,<sp/>col_comm,<sp/>s,<sp/>row_vec_pad,<sp/>forward_plan_conj,<sp/>inverse_plan_conj,<sp/>forward_plan,<sp/>inverse_plan,<sp/>col_vec_pad,<sp/>row_vec_freq_tosi,<sp/>col_vec_freq_tosi,<sp/>row_vec_freq,<sp/>col_vec_freq,<sp/>cublasHandle,<sp/>mat_freq_tosi_other,<sp/>res_pad);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>gpuErrchk(cudaStreamSynchronize(s));</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out_color<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y.<ref refid="classVector_1aa448ef20add67aaa56fde0a30eb746dd" kindref="member">set_d_vec</ref>(out_vec);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/srvenkat/matvec-test/src/Matrix.cpp"/>
  </compounddef>
</doxygen>
