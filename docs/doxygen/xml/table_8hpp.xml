<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="table_8hpp" kind="file" language="C++">
    <compoundname>table.hpp</compoundname>
    <includes local="no">cstddef</includes>
    <includes local="no">limits</includes>
    <includes local="no">new</includes>
    <includes local="no">utility</includes>
    <includes local="no">cassert</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">iterator</includes>
    <includes local="no">string</includes>
    <includes local="no">ostream</includes>
    <includes local="no">cstdio</includes>
    <includes local="no">iostream</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">clocale</includes>
    <includes local="no">locale</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">wchar.h</includes>
    <includes local="no">memory</includes>
    <includes local="no">cctype</includes>
    <includes local="no">sstream</includes>
    <includes local="no">vector</includes>
    <includes local="no">functional</includes>
    <includes local="no">optional</includes>
    <includedby refid="utils_8hpp" local="yes">/home/srvenkat/matvec-test/src/utils.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>/home/srvenkat/matvec-test/src/table.hpp</label>
        <link refid="table_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>algorithm</label>
      </node>
      <node id="6">
        <label>cassert</label>
      </node>
      <node id="19">
        <label>cctype</label>
      </node>
      <node id="14">
        <label>clocale</label>
      </node>
      <node id="2">
        <label>cstddef</label>
      </node>
      <node id="13">
        <label>cstdint</label>
      </node>
      <node id="11">
        <label>cstdio</label>
      </node>
      <node id="16">
        <label>cstdlib</label>
      </node>
      <node id="22">
        <label>functional</label>
      </node>
      <node id="12">
        <label>iostream</label>
      </node>
      <node id="8">
        <label>iterator</label>
      </node>
      <node id="3">
        <label>limits</label>
      </node>
      <node id="15">
        <label>locale</label>
      </node>
      <node id="18">
        <label>memory</label>
      </node>
      <node id="4">
        <label>new</label>
      </node>
      <node id="23">
        <label>optional</label>
      </node>
      <node id="10">
        <label>ostream</label>
      </node>
      <node id="20">
        <label>sstream</label>
      </node>
      <node id="9">
        <label>string</label>
      </node>
      <node id="5">
        <label>utility</label>
      </node>
      <node id="21">
        <label>vector</label>
      </node>
      <node id="17">
        <label>wchar.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>/home/srvenkat/matvec-test/src/Comm.hpp</label>
        <link refid="Comm_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/srvenkat/matvec-test/src/Matrix.hpp</label>
        <link refid="Matrix_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/srvenkat/matvec-test/src/Vector.hpp</label>
        <link refid="Vector_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/home/srvenkat/matvec-test/src/matvec.hpp</label>
        <link refid="matvec_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/srvenkat/matvec-test/src/table.hpp</label>
        <link refid="table_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/srvenkat/matvec-test/src/tester.hpp</label>
        <link refid="tester_8hpp_source"/>
      </node>
      <node id="2">
        <label>/home/srvenkat/matvec-test/src/utils.hpp</label>
        <link refid="utils_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structnonstd_1_1detail_1_1in__place__type__tag" prot="public">nonstd::detail::in_place_type_tag</innerclass>
    <innerclass refid="structnonstd_1_1detail_1_1in__place__index__tag" prot="public">nonstd::detail::in_place_index_tag</innerclass>
    <innerclass refid="structnonstd_1_1in__place__t" prot="public">nonstd::in_place_t</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1std11_1_1remove__reference" prot="public">nonstd::variants::std11::remove_reference</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1std11_1_1remove__reference_3_01T_01_6_01_4" prot="public">nonstd::variants::std11::remove_reference&lt; T &amp; &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1std11_1_1add__pointer" prot="public">nonstd::variants::std11::add_pointer</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1std11_1_1remove__const" prot="public">nonstd::variants::std11::remove_const</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1std11_1_1remove__const_3_01const_01T_01_4" prot="public">nonstd::variants::std11::remove_const&lt; const T &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1std11_1_1remove__volatile" prot="public">nonstd::variants::std11::remove_volatile</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1std11_1_1remove__volatile_3_01volatile_01T_01_4" prot="public">nonstd::variants::std11::remove_volatile&lt; volatile T &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1std11_1_1remove__cv" prot="public">nonstd::variants::std11::remove_cv</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1std11_1_1conditional_3_01true_00_01Then_00_01Else_01_4" prot="public">nonstd::variants::std11::conditional&lt; true, Then, Else &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1std11_1_1conditional_3_01false_00_01Then_00_01Else_01_4" prot="public">nonstd::variants::std11::conditional&lt; false, Then, Else &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1TX" prot="public">nonstd::variants::detail::TX</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1S0" prot="public">nonstd::variants::detail::S0</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1S1" prot="public">nonstd::variants::detail::S1</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1S2" prot="public">nonstd::variants::detail::S2</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1S3" prot="public">nonstd::variants::detail::S3</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1S4" prot="public">nonstd::variants::detail::S4</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1S5" prot="public">nonstd::variants::detail::S5</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1S6" prot="public">nonstd::variants::detail::S6</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1S7" prot="public">nonstd::variants::detail::S7</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1S8" prot="public">nonstd::variants::detail::S8</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1S9" prot="public">nonstd::variants::detail::S9</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1S10" prot="public">nonstd::variants::detail::S10</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1S11" prot="public">nonstd::variants::detail::S11</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1S12" prot="public">nonstd::variants::detail::S12</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1S13" prot="public">nonstd::variants::detail::S13</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1S14" prot="public">nonstd::variants::detail::S14</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1S15" prot="public">nonstd::variants::detail::S15</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1nulltype" prot="public">nonstd::variants::detail::nulltype</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist" prot="public">nonstd::variants::detail::typelist</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist__max_3_01nulltype_01_4" prot="public">nonstd::variants::detail::typelist_max&lt; nulltype &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist__max_3_01typelist_3_01Head_00_01Tail_01_4_01_4" prot="public">nonstd::variants::detail::typelist_max&lt; typelist&lt; Head, Tail &gt; &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist__size" prot="public">nonstd::variants::detail::typelist_size</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T0_01_4" prot="public">nonstd::variants::detail::typelist_size&lt; T0 &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T1_01_4" prot="public">nonstd::variants::detail::typelist_size&lt; T1 &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T2_01_4" prot="public">nonstd::variants::detail::typelist_size&lt; T2 &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T3_01_4" prot="public">nonstd::variants::detail::typelist_size&lt; T3 &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T4_01_4" prot="public">nonstd::variants::detail::typelist_size&lt; T4 &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T5_01_4" prot="public">nonstd::variants::detail::typelist_size&lt; T5 &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T6_01_4" prot="public">nonstd::variants::detail::typelist_size&lt; T6 &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T7_01_4" prot="public">nonstd::variants::detail::typelist_size&lt; T7 &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T8_01_4" prot="public">nonstd::variants::detail::typelist_size&lt; T8 &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T9_01_4" prot="public">nonstd::variants::detail::typelist_size&lt; T9 &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T10_01_4" prot="public">nonstd::variants::detail::typelist_size&lt; T10 &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T11_01_4" prot="public">nonstd::variants::detail::typelist_size&lt; T11 &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T12_01_4" prot="public">nonstd::variants::detail::typelist_size&lt; T12 &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T13_01_4" prot="public">nonstd::variants::detail::typelist_size&lt; T13 &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T14_01_4" prot="public">nonstd::variants::detail::typelist_size&lt; T14 &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T15_01_4" prot="public">nonstd::variants::detail::typelist_size&lt; T15 &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01nulltype_01_4" prot="public">nonstd::variants::detail::typelist_size&lt; nulltype &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01typelist_3_01Head_00_01Tail_01_4_01_4" prot="public">nonstd::variants::detail::typelist_size&lt; typelist&lt; Head, Tail &gt; &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist__index__of_3_01nulltype_00_01T_01_4" prot="public">nonstd::variants::detail::typelist_index_of&lt; nulltype, T &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist__index__of_3_01typelist_3_01T_00_01Tail_01_4_00_01T_01_4" prot="public">nonstd::variants::detail::typelist_index_of&lt; typelist&lt; T, Tail &gt;, T &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist__index__of_3_01typelist_3_01Head_00_01Tail_01_4_00_01T_01_4" prot="public">nonstd::variants::detail::typelist_index_of&lt; typelist&lt; Head, Tail &gt;, T &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist__type__at_3_01typelist_3_01Head_00_01Tail_01_4_00_010_01_4" prot="public">nonstd::variants::detail::typelist_type_at&lt; typelist&lt; Head, Tail &gt;, 0 &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1typelist__type__at_3_01typelist_3_01Head_00_01Tail_01_4_00_01i_01_4" prot="public">nonstd::variants::detail::typelist_type_at&lt; typelist&lt; Head, Tail &gt;, i &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1alignment__of__hack" prot="public">nonstd::variants::detail::alignment_of_hack</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1alignment__logic" prot="public">nonstd::variants::detail::alignment_logic</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1alignment__of" prot="public">nonstd::variants::detail::alignment_of</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1type__of__size" prot="public">nonstd::variants::detail::type_of_size</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1type__of__size_3_01nulltype_00_01N_01_4" prot="public">nonstd::variants::detail::type_of_size&lt; nulltype, N &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1struct__t" prot="public">nonstd::variants::detail::struct_t</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1helper" prot="public">nonstd::variants::detail::helper</innerclass>
    <innerclass refid="classnonstd_1_1variants_1_1monostate" prot="public">nonstd::variants::monostate</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1variant__size_3_01variant_3_01T0_00_01T1_00_01T2_00_01T3_00_01T4_00_6272b42b753462b1a85131797a1f5377" prot="public">nonstd::variants::variant_size&lt; variant&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15 &gt; &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1variant__alternative_3_01K_00_01variant_3_01T0_00_01T1_00_01T2_00_01d205f92b9568fe59dfd6319e341bbc8f" prot="public">nonstd::variants::variant_alternative&lt; K, variant&lt; T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15 &gt; &gt;</innerclass>
    <innerclass refid="classnonstd_1_1variants_1_1variant" prot="public">nonstd::variants::variant</innerclass>
    <innerclass refid="unionnonstd_1_1variants_1_1variant_1_1aligned__storage__t" prot="private">nonstd::variants::variant::aligned_storage_t</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1VisitorApplicatorImpl" prot="public">nonstd::variants::detail::VisitorApplicatorImpl</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1VisitorApplicatorImpl_3_01R_00_01TX_3_01VT_01_4_01_4" prot="public">nonstd::variants::detail::VisitorApplicatorImpl&lt; R, TX&lt; VT &gt; &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1TypedVisitorUnwrapper_3_012_00_01R_00_01Visitor_00_01T2_01_4" prot="public">nonstd::variants::detail::TypedVisitorUnwrapper&lt; 2, R, Visitor, T2 &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1TypedVisitorUnwrapper_3_013_00_01R_00_01Visitor_00_01T2_00_01T3_01_4" prot="public">nonstd::variants::detail::TypedVisitorUnwrapper&lt; 3, R, Visitor, T2, T3 &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1TypedVisitorUnwrapper_3_014_00_01R_00_01Visitor_00_01T2_00_01T3_00_01T4_01_4" prot="public">nonstd::variants::detail::TypedVisitorUnwrapper&lt; 4, R, Visitor, T2, T3, T4 &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1TypedVisitorUnwrapper_3_015_00_01R_00_01Visitor_00_01T2_00_01T3_00_01T4_00_01T5_01_4" prot="public">nonstd::variants::detail::TypedVisitorUnwrapper&lt; 5, R, Visitor, T2, T3, T4, T5 &gt;</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1VisitorUnwrapper" prot="public">nonstd::variants::detail::VisitorUnwrapper</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1VisitorApplicator" prot="public">nonstd::variants::detail::VisitorApplicator</innerclass>
    <innerclass refid="structnonstd_1_1variants_1_1detail_1_1Comparator" prot="public">nonstd::variants::detail::Comparator</innerclass>
    <innerclass refid="structnonstd_1_1optional__lite_1_1std11_1_1conditional" prot="public">nonstd::optional_lite::std11::conditional</innerclass>
    <innerclass refid="structnonstd_1_1optional__lite_1_1std11_1_1conditional_3_01false_00_01T_00_01F_01_4" prot="public">nonstd::optional_lite::std11::conditional&lt; false, T, F &gt;</innerclass>
    <innerclass refid="structnonstd_1_1optional__lite_1_1detail_1_1nulltype" prot="public">nonstd::optional_lite::detail::nulltype</innerclass>
    <innerclass refid="structnonstd_1_1optional__lite_1_1detail_1_1typelist" prot="public">nonstd::optional_lite::detail::typelist</innerclass>
    <innerclass refid="structnonstd_1_1optional__lite_1_1detail_1_1alignment__of__hack" prot="public">nonstd::optional_lite::detail::alignment_of_hack</innerclass>
    <innerclass refid="structnonstd_1_1optional__lite_1_1detail_1_1alignment__logic" prot="public">nonstd::optional_lite::detail::alignment_logic</innerclass>
    <innerclass refid="structnonstd_1_1optional__lite_1_1detail_1_1alignment__of" prot="public">nonstd::optional_lite::detail::alignment_of</innerclass>
    <innerclass refid="structnonstd_1_1optional__lite_1_1detail_1_1type__of__size" prot="public">nonstd::optional_lite::detail::type_of_size</innerclass>
    <innerclass refid="structnonstd_1_1optional__lite_1_1detail_1_1type__of__size_3_01nulltype_00_01N_01_4" prot="public">nonstd::optional_lite::detail::type_of_size&lt; nulltype, N &gt;</innerclass>
    <innerclass refid="structnonstd_1_1optional__lite_1_1detail_1_1struct__t" prot="public">nonstd::optional_lite::detail::struct_t</innerclass>
    <innerclass refid="unionnonstd_1_1optional__lite_1_1detail_1_1storage__t" prot="public">nonstd::optional_lite::detail::storage_t</innerclass>
    <innerclass refid="structnonstd_1_1optional__lite_1_1detail_1_1storage__t_1_1aligned__storage__t" prot="public">nonstd::optional_lite::detail::storage_t::aligned_storage_t</innerclass>
    <innerclass refid="structnonstd_1_1optional__lite_1_1nullopt__t" prot="public">nonstd::optional_lite::nullopt_t</innerclass>
    <innerclass refid="structnonstd_1_1optional__lite_1_1nullopt__t_1_1init" prot="public">nonstd::optional_lite::nullopt_t::init</innerclass>
    <innerclass refid="classnonstd_1_1optional__lite_1_1optional" prot="public">nonstd::optional_lite::optional</innerclass>
    <innernamespace refid="namespacenonstd">nonstd</innernamespace>
    <innernamespace refid="namespacenonstd_1_1detail">nonstd::detail</innernamespace>
    <innernamespace refid="namespacenonstd_1_1variants">nonstd::variants</innernamespace>
    <innernamespace refid="namespacenonstd_1_1variants_1_1std11">nonstd::variants::std11</innernamespace>
    <innernamespace refid="namespacenonstd_1_1variants_1_1std17">nonstd::variants::std17</innernamespace>
    <innernamespace refid="namespacenonstd_1_1variants_1_1detail">nonstd::variants::detail</innernamespace>
    <innernamespace refid="namespacenonstd_1_1optional__lite">nonstd::optional_lite</innernamespace>
    <innernamespace refid="namespacenonstd_1_1optional__lite_1_1std11">nonstd::optional_lite::std11</innernamespace>
    <innernamespace refid="namespacenonstd_1_1optional__lite_1_1detail">nonstd::optional_lite::detail</innernamespace>
    <innernamespace refid="namespacenonstd_1_1sv__lite">nonstd::sv_lite</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="table_8hpp_1afa53b11a68ffb1d5052a4fccaef25bbc" prot="public" static="no">
        <name>NONSTD_VARIANT_LITE_HPP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="9" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ad8d68a4783b269ae8f8e9e50d674d80e" prot="public" static="no">
        <name>variant_lite_MAJOR</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="11" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a0932c011983f18495d6c2a79a75fa4de" prot="public" static="no">
        <name>variant_lite_MINOR</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="12" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a08fc0bc8605e63468ce252de5e8dd749" prot="public" static="no">
        <name>variant_lite_PATCH</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="13" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a9b9e52eef79c850005ea7c43c6d6bf43" prot="public" static="no">
        <name>variant_lite_VERSION</name>
        <initializer>  variant_STRINGIFY(variant_lite_MAJOR) &quot;.&quot; variant_STRINGIFY(                                     \
      variant_lite_MINOR) &quot;.&quot; variant_STRINGIFY(variant_lite_PATCH)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="15" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1af0f7453b2c17c9ba814ec868dd7f65f2" prot="public" static="no">
        <name>variant_STRINGIFY</name>
        <param><defname>x</defname></param>
        <initializer>variant_STRINGIFY_(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="19" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a2fe6963dbeaac21fcb54b7e745601f5f" prot="public" static="no">
        <name>variant_STRINGIFY_</name>
        <param><defname>x</defname></param>
        <initializer>#x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="20" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a9942e587b27ccc27c84811aa65c07d84" prot="public" static="no">
        <name>variant_VARIANT_DEFAULT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="24" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a71389533f740d46ca53189462e52ec02" prot="public" static="no">
        <name>variant_VARIANT_NONSTD</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="25" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a652d72ffbca9ad326e386b29812a2b9b" prot="public" static="no">
        <name>variant_VARIANT_STD</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="26" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a8ab3d596741184ab5c336b0bf55e20fb" prot="public" static="no">
        <name>variant_CONFIG_SELECT_VARIANT</name>
        <initializer>  (variant_HAVE_STD_VARIANT ? variant_VARIANT_STD : variant_VARIANT_NONSTD)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="29" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a1a8be4fdaf62663a38ec34c64b010a02" prot="public" static="no">
        <name>variant_CONFIG_OMIT_VARIANT_SIZE_V_MACRO</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="34" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a1fd65d4398df19baf07a843c8a2dd32d" prot="public" static="no">
        <name>variant_CONFIG_OMIT_VARIANT_ALTERNATIVE_T_MACRO</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="38" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a4ed79138c35b8a1cdb90422cd039ae25" prot="public" static="no">
        <name>variant_CONFIG_NO_EXCEPTIONS</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="47" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ae7c750991c0589980f6f4c109214f6c9" prot="public" static="no">
        <name>variant_CPLUSPLUS</name>
        <initializer>__cplusplus</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="58" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ab29ad6e6a38b24d135fc45946f7e39f6" prot="public" static="no">
        <name>variant_CPP98_OR_GREATER</name>
        <initializer>(variant_CPLUSPLUS &gt;= 199711L)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="62" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1abd3caf014a6bbf442e9c96b527c985cf" prot="public" static="no">
        <name>variant_CPP11_OR_GREATER</name>
        <initializer>(variant_CPLUSPLUS &gt;= 201103L)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="63" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ad3d90435ef31209151d5ccd739792c1c" prot="public" static="no">
        <name>variant_CPP11_OR_GREATER_</name>
        <initializer>(variant_CPLUSPLUS &gt;= 201103L)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="64" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a2f2c5f5bd5271a86b2c4bd97ec7e7fe0" prot="public" static="no">
        <name>variant_CPP14_OR_GREATER</name>
        <initializer>(variant_CPLUSPLUS &gt;= 201402L)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="65" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a41b1ab86a23154db33cb88b001e21860" prot="public" static="no">
        <name>variant_CPP17_OR_GREATER</name>
        <initializer>(variant_CPLUSPLUS &gt;= 201703L)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="66" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1acc9e5b92dcccba6112ef9dc07d9efa4f" prot="public" static="no">
        <name>variant_CPP20_OR_GREATER</name>
        <initializer>(variant_CPLUSPLUS &gt;= 202000L)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="67" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a91373f95aa2af607e1727e44d0192dca" prot="public" static="no">
        <name>variant_HAVE_STD_VARIANT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="78" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a432a874d4518a64c7b6b60806453f9b2" prot="public" static="no">
        <name>variant_USES_STD_VARIANT</name>
        <initializer>  ((variant_CONFIG_SELECT_VARIANT == variant_VARIANT_STD) ||                                       \
   ((variant_CONFIG_SELECT_VARIANT == variant_VARIANT_DEFAULT) &amp;&amp; variant_HAVE_STD_VARIANT))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="81" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a4722749a851a33e2b093cf1611790cdc" prot="public" static="no">
        <name>nonstd_lite_HAVE_IN_PLACE_TYPES</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="91" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a2d6d4ef05be35f633aacd03dd947b3a3" prot="public" static="no">
        <name>nonstd_lite_in_place_t</name>
        <param><defname>T</defname></param>
        <initializer><ref refid="structnonstd_1_1in__place__t" kindref="compound">nonstd::in_place_t</ref> (&amp;)(<ref refid="structnonstd_1_1detail_1_1in__place__type__tag" kindref="compound">nonstd::detail::in_place_type_tag</ref>&lt;T&gt;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="158" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1abb37c7060b6452ba3f045d64d99b91d3" prot="public" static="no">
        <name>nonstd_lite_in_place_type_t</name>
        <param><defname>T</defname></param>
        <initializer><ref refid="structnonstd_1_1in__place__t" kindref="compound">nonstd::in_place_t</ref> (&amp;)(<ref refid="structnonstd_1_1detail_1_1in__place__type__tag" kindref="compound">nonstd::detail::in_place_type_tag</ref>&lt;T&gt;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="159" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a18c6da4766a72a413be4dad285a3c943" prot="public" static="no">
        <name>nonstd_lite_in_place_index_t</name>
        <param><defname>K</defname></param>
        <initializer>  <ref refid="structnonstd_1_1in__place__t" kindref="compound">nonstd::in_place_t</ref> (&amp;)(<ref refid="structnonstd_1_1detail_1_1in__place__index__tag" kindref="compound">nonstd::detail::in_place_index_tag</ref>&lt;K&gt;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="160" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a27e21e0ac3a2f5b3c08fc50fd0e395e4" prot="public" static="no">
        <name>nonstd_lite_in_place</name>
        <param><defname>T</defname></param>
        <initializer>nonstd::in_place_type&lt;T&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="163" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a0f8b4905706b0b8467b6beb9856463cb" prot="public" static="no">
        <name>nonstd_lite_in_place_type</name>
        <param><defname>T</defname></param>
        <initializer>nonstd::in_place_type&lt;T&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="164" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ac5ee5a0241e9b0b1ca9a09f2f340b4d7" prot="public" static="no">
        <name>nonstd_lite_in_place_index</name>
        <param><defname>K</defname></param>
        <initializer>nonstd::in_place_index&lt;K&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="165" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aa2968995870c23a461ce48201c25cc32" prot="public" static="no">
        <name>variant_CONFIG_MAX_TYPE_COUNT</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="230" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a34a8db6846618c3054e838018251514d" prot="public" static="no">
        <name>variant_CONFIG_MAX_VISITOR_ARG_COUNT</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="231" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a0cbefbcd20ec794807cff62131d4ae22" prot="public" static="no">
        <name>variant_CONFIG_MAX_ALIGN_HACK</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="236" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a4412ba5f0d15b592160b2c7a8be07baf" prot="public" static="no">
        <name>variant_CONFIG_ALIGN_AS_FALLBACK</name>
        <initializer>double</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="244" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aea6f6261e110879e5a1720b7635cf808" prot="public" static="no">
        <name>variant_BETWEEN</name>
        <param><defname>v</defname></param>
        <param><defname>lo</defname></param>
        <param><defname>hi</defname></param>
        <initializer>((lo) &lt;= (v) &amp;&amp; (v) &lt; (hi))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="248" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a66734c5f574190175e0f990498f512f4" prot="public" static="no">
        <name>variant_COMPILER_MSVC_VER</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="268" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1adf181f90e6e80819f0ccc12691880bbe" prot="public" static="no">
        <name>variant_COMPILER_MSVC_VERSION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="269" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a1bb9bd05efa59ec7b3a2febe2db854d5" prot="public" static="no">
        <name>variant_COMPILER_VERSION</name>
        <param><defname>major</defname></param>
        <param><defname>minor</defname></param>
        <param><defname>patch</defname></param>
        <initializer>(10 * (10 * (major) + (minor)) + (patch))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="272" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a84d432ccba2afe6cb6c0570a1880d550" prot="public" static="no">
        <name>variant_COMPILER_CLANG_VERSION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="278" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ae9d31940f33a42e24a07cd47b80d1e36" prot="public" static="no">
        <name>variant_COMPILER_GNUC_VERSION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="285" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a39c1a0d0a1fdb28b51d2d0bcd8f086ab" prot="public" static="no">
        <name>variant_HAVE</name>
        <param><defname>feature</defname></param>
        <initializer>(variant_HAVE_##feature)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="295" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a8025a061e2a4bd8cb89dd6f5bf7e057d" prot="public" static="no">
        <name>variant_HAS_CPP0X</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="300" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aee6aafc039fd88dc0e1d6c6082c16821" prot="public" static="no">
        <name>variant_CPP11_90</name>
        <initializer>(variant_CPP11_OR_GREATER_ || variant_COMPILER_MSVC_VER &gt;= 1500)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="310" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a8f5e4e3631dfec14174164e30ab1feef" prot="public" static="no">
        <name>variant_CPP11_100</name>
        <initializer>(variant_CPP11_OR_GREATER_ || variant_COMPILER_MSVC_VER &gt;= 1600)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="311" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a60def924ae32a926437fc3d352a7a60b" prot="public" static="no">
        <name>variant_CPP11_110</name>
        <initializer>(variant_CPP11_OR_GREATER_ || variant_COMPILER_MSVC_VER &gt;= 1700)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="312" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ace087e752104dd84eb27ffd4dce24f69" prot="public" static="no">
        <name>variant_CPP11_120</name>
        <initializer>(variant_CPP11_OR_GREATER_ || variant_COMPILER_MSVC_VER &gt;= 1800)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="313" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="313" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a1f5dd84d009b0ba72f3d192cec68558a" prot="public" static="no">
        <name>variant_CPP11_140</name>
        <initializer>(variant_CPP11_OR_GREATER_ || variant_COMPILER_MSVC_VER &gt;= 1900)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="314" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="314" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a8c0e066ebe6038aa045be8de19eaf7e4" prot="public" static="no">
        <name>variant_CPP11_141</name>
        <initializer>(variant_CPP11_OR_GREATER_ || variant_COMPILER_MSVC_VER &gt;= 1910)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="315" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="315" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aa6ef98839858d4d5fea1596bf104f841" prot="public" static="no">
        <name>variant_CPP14_000</name>
        <initializer>(variant_CPP14_OR_GREATER)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="317" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ab1b383476a808775be274b230f3694e6" prot="public" static="no">
        <name>variant_CPP17_000</name>
        <initializer>(variant_CPP17_OR_GREATER)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="318" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ad032a41f2c4c5f74e96317bae9562646" prot="public" static="no">
        <name>variant_HAVE_CONSTEXPR_11</name>
        <initializer>variant_CPP11_140</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="322" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a43bcf00d45116e9f54b0332426cbbd45" prot="public" static="no">
        <name>variant_HAVE_INITIALIZER_LIST</name>
        <initializer>variant_CPP11_120</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="323" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a070595cf1cf5cb4abdca04f935adaaa2" prot="public" static="no">
        <name>variant_HAVE_NOEXCEPT</name>
        <initializer>variant_CPP11_140</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="324" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a2ed6b0f483d61ee3b8de743c7bf6ca87" prot="public" static="no">
        <name>variant_HAVE_NULLPTR</name>
        <initializer>variant_CPP11_100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="325" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a5aa398d63cc53e73fae1a973a9ae32dc" prot="public" static="no">
        <name>variant_HAVE_OVERRIDE</name>
        <initializer>variant_CPP11_140</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="326" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aad5b91038f2714b02a9ef0797c6eb4f9" prot="public" static="no">
        <name>variant_HAVE_CONSTEXPR_14</name>
        <initializer>variant_CPP14_000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="330" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aedf5470eb1add5ba06dcce475dbaa7c0" prot="public" static="no">
        <name>variant_HAVE_CONDITIONAL</name>
        <initializer>variant_CPP11_120</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="338" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a989e183079bf2d1e52177e59a1edb0da" prot="public" static="no">
        <name>variant_HAVE_REMOVE_CV</name>
        <initializer>variant_CPP11_120</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="339" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a49d316d19730fa1955135396b4f036e8" prot="public" static="no">
        <name>variant_HAVE_STD_ADD_POINTER</name>
        <initializer>variant_CPP11_90</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="340" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="340" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aa16171606dadd40915b65bf48678fd40" prot="public" static="no">
        <name>variant_HAVE_TYPE_TRAITS</name>
        <initializer>variant_CPP11_90</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="341" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ada80da1558ea93f39fdce8693feb7075" prot="public" static="no">
        <name>variant_HAVE_TR1_TYPE_TRAITS</name>
        <initializer>(!!variant_COMPILER_GNUC_VERSION)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="343" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="343" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a063130eb6e4229962877d7ef89dd4ac7" prot="public" static="no">
        <name>variant_HAVE_TR1_ADD_POINTER</name>
        <initializer>(!!variant_COMPILER_GNUC_VERSION)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="344" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1af4971652ee8339cd4c04fe8e73b7f0b8" prot="public" static="no">
        <name>variant_constexpr</name>
        <initializer>/*constexpr*/</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="351" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="351" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a27f01b063f34163eeaf7109771de1f9c" prot="public" static="no">
        <name>variant_constexpr14</name>
        <initializer>/*constexpr*/</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="357" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a6bb536e9ab26a1bd4bc2ba255a06346f" prot="public" static="no">
        <name>variant_noexcept</name>
        <initializer>/*noexcept*/</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="363" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ad058070c9c9e23ee3d6cf9f5aa8cfc84" prot="public" static="no">
        <name>variant_nullptr</name>
        <initializer>NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="369" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a36bdd02c3a987eca9c0dbf9bf7e42da1" prot="public" static="no">
        <name>variant_override</name>
        <initializer>/*override*/</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="375" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a245c0c7170bda3be8d1cd5d49918f278" prot="public" static="no">
        <name>variant_TL1</name>
        <param><defname>T1</defname></param>
        <initializer>detail::typelist&lt;T1, detail::nulltype&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="524" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="524" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a102b98206c45a38f0c8c441967b1f1e7" prot="public" static="no">
        <name>variant_TL2</name>
        <param><defname>T1</defname></param>
        <param><defname>T2</defname></param>
        <initializer>detail::typelist&lt;T1, variant_TL1(T2)&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="525" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="525" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aec65d2a7a8693661be957e438ec87ac5" prot="public" static="no">
        <name>variant_TL3</name>
        <param><defname>T1</defname></param>
        <param><defname>T2</defname></param>
        <param><defname>T3</defname></param>
        <initializer>detail::typelist&lt;T1, variant_TL2(T2, T3)&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="526" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1abbf6d4110ae906be6eab89ed26070429" prot="public" static="no">
        <name>variant_TL4</name>
        <param><defname>T1</defname></param>
        <param><defname>T2</defname></param>
        <param><defname>T3</defname></param>
        <param><defname>T4</defname></param>
        <initializer>detail::typelist&lt;T1, variant_TL3(T2, T3, T4)&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="527" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="527" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a3e7f3fffc7118f56da05fb67eccd170f" prot="public" static="no">
        <name>variant_TL5</name>
        <param><defname>T1</defname></param>
        <param><defname>T2</defname></param>
        <param><defname>T3</defname></param>
        <param><defname>T4</defname></param>
        <param><defname>T5</defname></param>
        <initializer>detail::typelist&lt;T1, variant_TL4(T2, T3, T4, T5)&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="528" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="528" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ac009ca1ed304b43cb65422ba860afcf6" prot="public" static="no">
        <name>variant_TL6</name>
        <param><defname>T1</defname></param>
        <param><defname>T2</defname></param>
        <param><defname>T3</defname></param>
        <param><defname>T4</defname></param>
        <param><defname>T5</defname></param>
        <param><defname>T6</defname></param>
        <initializer>detail::typelist&lt;T1, variant_TL5(T2, T3, T4, T5, T6)&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="529" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="529" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a68efd8c5d13491044dfd050375a6d9aa" prot="public" static="no">
        <name>variant_TL7</name>
        <param><defname>T1</defname></param>
        <param><defname>T2</defname></param>
        <param><defname>T3</defname></param>
        <param><defname>T4</defname></param>
        <param><defname>T5</defname></param>
        <param><defname>T6</defname></param>
        <param><defname>T7</defname></param>
        <initializer>  detail::typelist&lt;T1, variant_TL6(T2, T3, T4, T5, T6, T7)&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="530" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="530" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aa51e57a0e6a25a95f267af2b0830d8f7" prot="public" static="no">
        <name>variant_TL8</name>
        <param><defname>T1</defname></param>
        <param><defname>T2</defname></param>
        <param><defname>T3</defname></param>
        <param><defname>T4</defname></param>
        <param><defname>T5</defname></param>
        <param><defname>T6</defname></param>
        <param><defname>T7</defname></param>
        <param><defname>T8</defname></param>
        <initializer>  detail::typelist&lt;T1, variant_TL7(T2, T3, T4, T5, T6, T7, T8)&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="532" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="532" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a14291ebd2f65eeaa612bf20c3abcccbd" prot="public" static="no">
        <name>variant_TL9</name>
        <param><defname>T1</defname></param>
        <param><defname>T2</defname></param>
        <param><defname>T3</defname></param>
        <param><defname>T4</defname></param>
        <param><defname>T5</defname></param>
        <param><defname>T6</defname></param>
        <param><defname>T7</defname></param>
        <param><defname>T8</defname></param>
        <param><defname>T9</defname></param>
        <initializer>  detail::typelist&lt;T1, variant_TL8(T2, T3, T4, T5, T6, T7, T8, T9)&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="534" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a60711de0032b1f167c639a2e08176a23" prot="public" static="no">
        <name>variant_TL10</name>
        <param><defname>T1</defname></param>
        <param><defname>T2</defname></param>
        <param><defname>T3</defname></param>
        <param><defname>T4</defname></param>
        <param><defname>T5</defname></param>
        <param><defname>T6</defname></param>
        <param><defname>T7</defname></param>
        <param><defname>T8</defname></param>
        <param><defname>T9</defname></param>
        <param><defname>T10</defname></param>
        <initializer>  detail::typelist&lt;T1, variant_TL9(T2, T3, T4, T5, T6, T7, T8, T9, T10)&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="536" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="536" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ab27da115b7c6574d066ed25d47b711b3" prot="public" static="no">
        <name>variant_TL11</name>
        <param><defname>T1</defname></param>
        <param><defname>T2</defname></param>
        <param><defname>T3</defname></param>
        <param><defname>T4</defname></param>
        <param><defname>T5</defname></param>
        <param><defname>T6</defname></param>
        <param><defname>T7</defname></param>
        <param><defname>T8</defname></param>
        <param><defname>T9</defname></param>
        <param><defname>T10</defname></param>
        <param><defname>T11</defname></param>
        <initializer>  detail::typelist&lt;T1, variant_TL10(T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="538" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="538" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a6cac64256b14753df45a7558fdb27973" prot="public" static="no">
        <name>variant_TL12</name>
        <param><defname>T1</defname></param>
        <param><defname>T2</defname></param>
        <param><defname>T3</defname></param>
        <param><defname>T4</defname></param>
        <param><defname>T5</defname></param>
        <param><defname>T6</defname></param>
        <param><defname>T7</defname></param>
        <param><defname>T8</defname></param>
        <param><defname>T9</defname></param>
        <param><defname>T10</defname></param>
        <param><defname>T11</defname></param>
        <param><defname>T12</defname></param>
        <initializer>  detail::typelist&lt;T1, variant_TL11(T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="540" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="540" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a0f495127a6008cdd931bf3ddc803b0b1" prot="public" static="no">
        <name>variant_TL13</name>
        <param><defname>T1</defname></param>
        <param><defname>T2</defname></param>
        <param><defname>T3</defname></param>
        <param><defname>T4</defname></param>
        <param><defname>T5</defname></param>
        <param><defname>T6</defname></param>
        <param><defname>T7</defname></param>
        <param><defname>T8</defname></param>
        <param><defname>T9</defname></param>
        <param><defname>T10</defname></param>
        <param><defname>T11</defname></param>
        <param><defname>T12</defname></param>
        <param><defname>T13</defname></param>
        <initializer>  detail::typelist&lt;T1, variant_TL12(T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="542" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="542" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ab3ea8aa3a4ce1c17224ec7e7c395f9db" prot="public" static="no">
        <name>variant_TL14</name>
        <param><defname>T1</defname></param>
        <param><defname>T2</defname></param>
        <param><defname>T3</defname></param>
        <param><defname>T4</defname></param>
        <param><defname>T5</defname></param>
        <param><defname>T6</defname></param>
        <param><defname>T7</defname></param>
        <param><defname>T8</defname></param>
        <param><defname>T9</defname></param>
        <param><defname>T10</defname></param>
        <param><defname>T11</defname></param>
        <param><defname>T12</defname></param>
        <param><defname>T13</defname></param>
        <param><defname>T14</defname></param>
        <initializer>  detail::typelist&lt;T1, variant_TL13(T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="544" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="544" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a2c4397fb741755bae77169156dad0135" prot="public" static="no">
        <name>variant_TL15</name>
        <param><defname>T1</defname></param>
        <param><defname>T2</defname></param>
        <param><defname>T3</defname></param>
        <param><defname>T4</defname></param>
        <param><defname>T5</defname></param>
        <param><defname>T6</defname></param>
        <param><defname>T7</defname></param>
        <param><defname>T8</defname></param>
        <param><defname>T9</defname></param>
        <param><defname>T10</defname></param>
        <param><defname>T11</defname></param>
        <param><defname>T12</defname></param>
        <param><defname>T13</defname></param>
        <param><defname>T14</defname></param>
        <param><defname>T15</defname></param>
        <initializer>  detail::typelist&lt;T1, variant_TL14(T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="546" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="546" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a61dad9d2533342db2558809c922ce4b8" prot="public" static="no">
        <name>variant_TL16</name>
        <param><defname>T1</defname></param>
        <param><defname>T2</defname></param>
        <param><defname>T3</defname></param>
        <param><defname>T4</defname></param>
        <param><defname>T5</defname></param>
        <param><defname>T6</defname></param>
        <param><defname>T7</defname></param>
        <param><defname>T8</defname></param>
        <param><defname>T9</defname></param>
        <param><defname>T10</defname></param>
        <param><defname>T11</defname></param>
        <param><defname>T12</defname></param>
        <param><defname>T13</defname></param>
        <param><defname>T14</defname></param>
        <param><defname>T15</defname></param>
        <param><defname>T16</defname></param>
        <initializer>  detail::typelist&lt;T1, variant_TL15(T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,  \
                                    T16)&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="548" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="548" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ac99607fde4e8d7c7c40da5a5cf983edc" prot="public" static="no">
        <name>variant_ALIGN_AS</name>
        <param><defname>to_align</defname></param>
        <initializer>  typename detail::type_of_size&lt;detail::alignment_types,                                           \
                                detail::alignment_of&lt;to_align&gt;::value&gt;::type</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="822" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="822" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a8ad72286eede20cca5a55df421b342a7" prot="public" static="no">
        <name>variant_ALIGN_TYPE</name>
        <param><defname>type</defname></param>
        <initializer>typelist &lt; type, typelist &lt; struct_t&lt;type&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="854" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="854" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a4f5106eba1cea5d399244193d75a29c1" prot="public" static="no">
        <name>variant_size_V</name>
        <param><defname>T</defname></param>
        <initializer><ref refid="structnonstd_1_1variants_1_1variant__size" kindref="compound">nonstd::variant_size</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="1246" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="1246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1abb8e4e872345c2a36618b3dd03280225" prot="public" static="no">
        <name>variant_alternative_T</name>
        <param><defname>K</defname></param>
        <param><defname>T</defname></param>
        <initializer>typename <ref refid="structnonstd_1_1variants_1_1variant__alternative" kindref="compound">nonstd::variant_alternative</ref>&lt;K, T&gt;::type</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="1269" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="1269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a840697a2a6ca1b9b0e1a77aeda84c91d" prot="public" static="no">
        <name>NONSTD_OPTIONAL_LITE_HPP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2495" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2495" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ac04b7f984daab0a87f4147f67ede1794" prot="public" static="no">
        <name>optional_lite_MAJOR</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2497" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2497" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aa2ca94088e4e94b2b78f516ec28b4835" prot="public" static="no">
        <name>optional_lite_MINOR</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2498" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2498" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aabf4fcddd031e5cc8437025ee2160216" prot="public" static="no">
        <name>optional_lite_PATCH</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2499" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2499" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ab29ef766c127eb37c80698e587cc8d1b" prot="public" static="no">
        <name>optional_lite_VERSION</name>
        <initializer>  optional_STRINGIFY(optional_lite_MAJOR) &quot;.&quot; optional_STRINGIFY(                                  \
      optional_lite_MINOR) &quot;.&quot; optional_STRINGIFY(optional_lite_PATCH)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2501" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2501" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a95d06362ba675628b2fb146240f25ae2" prot="public" static="no">
        <name>optional_STRINGIFY</name>
        <param><defname>x</defname></param>
        <initializer>optional_STRINGIFY_(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2505" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1abd735a0f19f81b4bece019532d9fb26f" prot="public" static="no">
        <name>optional_STRINGIFY_</name>
        <param><defname>x</defname></param>
        <initializer>#x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2506" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2506" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aadef39a06c9580bd1fbac65551c26988" prot="public" static="no">
        <name>optional_OPTIONAL_DEFAULT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2510" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2510" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a313fda7e12e72683e1ab9d224dc79502" prot="public" static="no">
        <name>optional_OPTIONAL_NONSTD</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2511" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2511" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a8545609f7a569b8b7e479a08d8b23ff7" prot="public" static="no">
        <name>optional_OPTIONAL_STD</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2512" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2512" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a31e55dfbe2d59e3e447f95b1310880e7" prot="public" static="no">
        <name>optional_CONFIG_SELECT_OPTIONAL</name>
        <initializer>  (optional_HAVE_STD_OPTIONAL ? optional_OPTIONAL_STD : optional_OPTIONAL_NONSTD)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2515" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2515" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1abf492a66535a2cbad389b8eb4d28a92e" prot="public" static="no">
        <name>optional_CONFIG_NO_EXCEPTIONS</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2525" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2525" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a2a7e796e7095d5556ba1ff0ec2737e7c" prot="public" static="no">
        <name>optional_CPLUSPLUS</name>
        <initializer>__cplusplus</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2536" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2536" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a909f967eedac8ddb64ad9dae15f2277e" prot="public" static="no">
        <name>optional_CPP98_OR_GREATER</name>
        <initializer>(optional_CPLUSPLUS &gt;= 199711L)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2540" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2540" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a83275d523d1d130fcf8ba43caeef2f12" prot="public" static="no">
        <name>optional_CPP11_OR_GREATER</name>
        <initializer>(optional_CPLUSPLUS &gt;= 201103L)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2541" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2541" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1af31644bcc9f0888356d6ef46e4f42e02" prot="public" static="no">
        <name>optional_CPP11_OR_GREATER_</name>
        <initializer>(optional_CPLUSPLUS &gt;= 201103L)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2542" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2542" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a53b482135e436677e6360c34481b3a69" prot="public" static="no">
        <name>optional_CPP14_OR_GREATER</name>
        <initializer>(optional_CPLUSPLUS &gt;= 201402L)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2543" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2543" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a0990ad4bf4f926884d1b7b5d4a906bdd" prot="public" static="no">
        <name>optional_CPP17_OR_GREATER</name>
        <initializer>(optional_CPLUSPLUS &gt;= 201703L)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2544" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2544" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a517831bd0e42c7679b5f29b2ae705361" prot="public" static="no">
        <name>optional_CPP20_OR_GREATER</name>
        <initializer>(optional_CPLUSPLUS &gt;= 202000L)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2545" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2545" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a3bb88b6a5b01c64fa88f6bee6d7d1fcf" prot="public" static="no">
        <name>optional_CPLUSPLUS_V</name>
        <initializer>  (optional_CPLUSPLUS / 100 - (optional_CPLUSPLUS &gt; 200000 ? 2000 : 1994))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2549" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2549" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1adda00bfbbcdb5d34840871d57e3bebfb" prot="public" static="no">
        <name>optional_HAVE_STD_OPTIONAL</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2561" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2561" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aec719413aee87546087f881ccc033881" prot="public" static="no">
        <name>optional_USES_STD_OPTIONAL</name>
        <initializer>  ((optional_CONFIG_SELECT_OPTIONAL == optional_OPTIONAL_STD) ||                                   \
   ((optional_CONFIG_SELECT_OPTIONAL == optional_OPTIONAL_DEFAULT) &amp;&amp; optional_HAVE_STD_OPTIONAL))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2564" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2564" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a8ac51dcc60e8b1c88c2d712d6f7ebff5" prot="public" static="no">
        <name>optional_CONFIG_MAX_ALIGN_HACK</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2694" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2694" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ae149e6039db339d4d54f95f73c463e1c" prot="public" static="no">
        <name>optional_CONFIG_ALIGN_AS_FALLBACK</name>
        <initializer>double</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2702" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2702" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1afbf13a4de6d7643f253ea6e6f0312c2f" prot="public" static="no">
        <name>optional_BETWEEN</name>
        <param><defname>v</defname></param>
        <param><defname>lo</defname></param>
        <param><defname>hi</defname></param>
        <initializer>((lo) &lt;= (v) &amp;&amp; (v) &lt; (hi))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2718" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2718" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a594e624fc68e072e8de7546ca1a21935" prot="public" static="no">
        <name>optional_COMPILER_MSVC_VER</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2738" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2738" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aed89a63e60df534ae37d6ce2b47a646a" prot="public" static="no">
        <name>optional_COMPILER_MSVC_VERSION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2739" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2739" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ad653d74e5a426139081a63fd56e88dfa" prot="public" static="no">
        <name>optional_COMPILER_VERSION</name>
        <param><defname>major</defname></param>
        <param><defname>minor</defname></param>
        <param><defname>patch</defname></param>
        <initializer>(10 * (10 * (major) + (minor)) + (patch))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2742" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2742" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a99dabc319e6288c56c57343d0ef2a4c3" prot="public" static="no">
        <name>optional_COMPILER_GNUC_VERSION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2748" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2748" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a33ace2343f1276006932c0e7e5d4a566" prot="public" static="no">
        <name>optional_COMPILER_CLANG_VERSION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2755" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2755" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a85fde927189041fc42b384fc357e8428" prot="public" static="no">
        <name>optional_HAVE</name>
        <param><defname>FEATURE</defname></param>
        <initializer>(optional_HAVE_##FEATURE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2768" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2768" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a3c1ccea0bb038bb47ff94e3217e1f8b4" prot="public" static="no">
        <name>optional_HAS_CPP0X</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2773" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2773" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a4a5dc2b33e8663955faa1469d551803a" prot="public" static="no">
        <name>optional_CPP11_90</name>
        <initializer>(optional_CPP11_OR_GREATER_ || optional_COMPILER_MSVC_VER &gt;= 1500)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2783" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2783" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ad8953d3c2845b7e69a1d6ec98609b49c" prot="public" static="no">
        <name>optional_CPP11_100</name>
        <initializer>(optional_CPP11_OR_GREATER_ || optional_COMPILER_MSVC_VER &gt;= 1600)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2784" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2784" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a7219d0a7d8fd43a81074d47b0bcd676c" prot="public" static="no">
        <name>optional_CPP11_110</name>
        <initializer>(optional_CPP11_OR_GREATER_ || optional_COMPILER_MSVC_VER &gt;= 1700)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2785" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2785" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a2f616e3dd0e5bba1781e23b0bae0fb76" prot="public" static="no">
        <name>optional_CPP11_120</name>
        <initializer>(optional_CPP11_OR_GREATER_ || optional_COMPILER_MSVC_VER &gt;= 1800)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2786" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2786" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aa8f948c89de62feb88a4203e771bfb7c" prot="public" static="no">
        <name>optional_CPP11_140</name>
        <initializer>(optional_CPP11_OR_GREATER_ || optional_COMPILER_MSVC_VER &gt;= 1900)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2787" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2787" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aeb92b10f4c39d443b10818eb4223272a" prot="public" static="no">
        <name>optional_CPP11_141</name>
        <initializer>(optional_CPP11_OR_GREATER_ || optional_COMPILER_MSVC_VER &gt;= 1910)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2788" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2788" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a6a83f0f8273a0d2d858fd73a4a8e897f" prot="public" static="no">
        <name>optional_CPP11_140_490</name>
        <initializer>  ((optional_CPP11_OR_GREATER_ &amp;&amp; optional_COMPILER_GNUC_VERSION &gt;= 490) ||                        \
   (optional_COMPILER_MSVC_VER &gt;= 1910))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2790" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2790" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ae41b87b37a07caab0bfdd9d636d3aed4" prot="public" static="no">
        <name>optional_CPP14_000</name>
        <initializer>(optional_CPP14_OR_GREATER)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2794" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2794" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ad4045cbb58338926208661aeda4febc5" prot="public" static="no">
        <name>optional_CPP17_000</name>
        <initializer>(optional_CPP17_OR_GREATER)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2795" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2795" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ae71dff8d12c465d8f78b9d47cef3c0ac" prot="public" static="no">
        <name>optional_HAVE_CONSTEXPR_11</name>
        <initializer>optional_CPP11_140</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2799" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2799" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a194a23d1e282b5116fc0349f01993df4" prot="public" static="no">
        <name>optional_HAVE_IS_DEFAULT</name>
        <initializer>optional_CPP11_140</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2800" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2800" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ab562044ac2eb74acc169d3e472d1fce8" prot="public" static="no">
        <name>optional_HAVE_NOEXCEPT</name>
        <initializer>optional_CPP11_140</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2801" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2801" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a7257d5d806a279ce215065f57fab1b00" prot="public" static="no">
        <name>optional_HAVE_NULLPTR</name>
        <initializer>optional_CPP11_100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2802" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2802" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ac27256f77a9712017639c89088ecda8e" prot="public" static="no">
        <name>optional_HAVE_REF_QUALIFIER</name>
        <initializer>optional_CPP11_140_490</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2803" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2803" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a20a1c04ea39a5db67d9e61db50c05c86" prot="public" static="no">
        <name>optional_HAVE_INITIALIZER_LIST</name>
        <initializer>optional_CPP11_140</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2804" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2804" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a270511fdaebb70b03c4a0a7417c7a1b3" prot="public" static="no">
        <name>optional_HAVE_CONSTEXPR_14</name>
        <initializer>optional_CPP14_000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2808" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2808" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aab27691aa86a4d877de4bca87f81549d" prot="public" static="no">
        <name>optional_HAVE_NODISCARD</name>
        <initializer>optional_CPP17_000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2812" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2812" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ab51eee39bdbada129c06512c58f040d8" prot="public" static="no">
        <name>optional_HAVE_CONDITIONAL</name>
        <initializer>optional_CPP11_120</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2816" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2816" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ac5db5ad53482eea33842371f8c976724" prot="public" static="no">
        <name>optional_HAVE_REMOVE_CV</name>
        <initializer>optional_CPP11_120</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2817" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2817" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ad39a9a8a05d9cd225743e83f129722e0" prot="public" static="no">
        <name>optional_HAVE_TYPE_TRAITS</name>
        <initializer>optional_CPP11_90</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2818" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2818" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a7edba6ce00ca7cb7a622538567116ce7" prot="public" static="no">
        <name>optional_HAVE_TR1_TYPE_TRAITS</name>
        <initializer>(!!optional_COMPILER_GNUC_VERSION)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2820" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2820" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aa13664e27d9ab901adaccf51e36bdac6" prot="public" static="no">
        <name>optional_HAVE_TR1_ADD_POINTER</name>
        <initializer>(!!optional_COMPILER_GNUC_VERSION)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2821" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2821" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a17ae8e571812b9d0599a6552eea52250" prot="public" static="no">
        <name>optional_constexpr</name>
        <initializer>/*constexpr*/</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2828" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2828" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aa48cb8696ca9adcc07333869e4c2359f" prot="public" static="no">
        <name>optional_is_default</name>
        <initializer>  {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2834" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2834" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aac429280f7a6aa9b8539c4686ea3b5bd" prot="public" static="no">
        <name>optional_constexpr14</name>
        <initializer>/*constexpr*/</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2841" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2841" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1af61c7d2be3e00e31b30748e9b2d72012" prot="public" static="no">
        <name>optional_nodiscard</name>
        <initializer>/*[[nodiscard]]*/</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2847" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2847" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ad0a6cdfac94f8daf32e7564604863567" prot="public" static="no">
        <name>optional_noexcept</name>
        <initializer>/*noexcept*/</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2853" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2853" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aabe0e52e72306e980489c2af93c51b0f" prot="public" static="no">
        <name>optional_nullptr</name>
        <initializer>NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2859" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2859" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1af884ff6963e7308a026e75d3fbab375d" prot="public" static="no">
        <name>optional_ref_qual</name>
        <initializer>/*&amp;*/</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2867" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2867" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a13eb29f1c476dc064e3bc46d153cc8ea" prot="public" static="no">
        <name>optional_refref_qual</name>
        <initializer>/*&amp;&amp;*/</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="2868" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="2868" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aabec8df5f7d63a2fc22f92b1dd734e30" prot="public" static="no">
        <name>optional_ALIGN_AS</name>
        <param><defname>to_align</defname></param>
        <initializer>  typename type_of_size&lt;alignment_types, alignment_of&lt;to_align&gt;::value&gt;::type</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3081" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3081" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aa9a8c70a03b80aec4694a1a8a4b7ce67" prot="public" static="no">
        <name>optional_ALIGN_TYPE</name>
        <param><defname>type</defname></param>
        <initializer>typelist &lt; type, typelist &lt; struct_t&lt;type&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3112" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a1c008bda6a4563beb861ae1d824771be" prot="public" static="no">
        <name>NONSTD_SV_LITE_H_INCLUDED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3996" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3996" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a47ee53042f67fe78d55ec0ff91a1d3a3" prot="public" static="no">
        <name>string_view_lite_MAJOR</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3998" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3998" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a065c6e562b66c1662dd4b44d82e1b200" prot="public" static="no">
        <name>string_view_lite_MINOR</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="3999" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="3999" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a324c94f114d0ed9ca7f10a7e92912e10" prot="public" static="no">
        <name>string_view_lite_PATCH</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4000" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4000" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a50645bb0259a6c07a7a237554a4b3d5e" prot="public" static="no">
        <name>string_view_lite_VERSION</name>
        <initializer>nssv_STRINGIFY(string_view_lite_MAJOR) &quot;.&quot; nssv_STRINGIFY(string_view_lite_MINOR) &quot;.&quot; nssv_STRINGIFY(string_view_lite_PATCH)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4002" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4002" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a57c63435b85e989fea4323207867a9d6" prot="public" static="no">
        <name>nssv_STRINGIFY</name>
        <param><defname>x</defname></param>
        <initializer>nssv_STRINGIFY_( x )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4004" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4004" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a281c7217f552b97b79b2efa19d761087" prot="public" static="no">
        <name>nssv_STRINGIFY_</name>
        <param><defname>x</defname></param>
        <initializer>#x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4005" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4005" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a3b55dd8a1af4e0411d13a33b5350e795" prot="public" static="no">
        <name>nssv_STRING_VIEW_DEFAULT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4009" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4009" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a2eb7e15c730394ceafb236e2d6e12b4e" prot="public" static="no">
        <name>nssv_STRING_VIEW_NONSTD</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4010" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4010" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1af13b6caa3b7e8ce79a02f5339a611c80" prot="public" static="no">
        <name>nssv_STRING_VIEW_STD</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4011" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4011" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a006b6236d6f13cee906c9360977005b2" prot="public" static="no">
        <name>nssv_HAVE_TWEAK_HEADER</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4021" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4021" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a352ecee175982a60cea666e9fd174a77" prot="public" static="no">
        <name>nssv_CONFIG_SELECT_STRING_VIEW</name>
        <initializer>( nssv_HAVE_STD_STRING_VIEW ? nssv_STRING_VIEW_STD : nssv_STRING_VIEW_NONSTD )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4028" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4028" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a1f717e9499d55891c2d5d59f6a61bcc5" prot="public" static="no">
        <name>nssv_CONFIG_STD_SV_OPERATOR</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4032" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4032" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1adfa016341db8df63423b3f585f3f7971" prot="public" static="no">
        <name>nssv_CONFIG_USR_SV_OPERATOR</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4036" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4036" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a2beccb44a404a6838b473c8064bdb320" prot="public" static="no">
        <name>nssv_CONFIG_CONVERSION_STD_STRING_CLASS_METHODS</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4045" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4045" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a59e7b6779912732611fdd63248904bf8" prot="public" static="no">
        <name>nssv_CONFIG_CONVERSION_STD_STRING_FREE_FUNCTIONS</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4049" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4049" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ae23071c7d7034441957843e5a9e2e0ab" prot="public" static="no">
        <name>nssv_CONFIG_NO_STREAM_INSERTION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4053" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4053" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1acaa424dffcf7cbfc1cd0c586fdc626fa" prot="public" static="no">
        <name>nssv_CONFIG_NO_EXCEPTIONS</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4065" column="15" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4065" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ab8bb76534984f0375b409cd6e22e99cf" prot="public" static="no">
        <name>nssv_CPLUSPLUS</name>
        <initializer>__cplusplus</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4076" column="13" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4076" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ae26534e29d0beb4be926fac29a8f30f7" prot="public" static="no">
        <name>nssv_CPP98_OR_GREATER</name>
        <initializer>( nssv_CPLUSPLUS &gt;= 199711L )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4080" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4080" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a77def55f4eebb23fbbba8526270df2dc" prot="public" static="no">
        <name>nssv_CPP11_OR_GREATER</name>
        <initializer>( nssv_CPLUSPLUS &gt;= 201103L )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4081" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4081" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a0807363b2c3f322aa80ce071db8f6e73" prot="public" static="no">
        <name>nssv_CPP11_OR_GREATER_</name>
        <initializer>( nssv_CPLUSPLUS &gt;= 201103L )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4082" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4082" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a39f07337b011b15435b91460dba06bf7" prot="public" static="no">
        <name>nssv_CPP14_OR_GREATER</name>
        <initializer>( nssv_CPLUSPLUS &gt;= 201402L )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4083" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4083" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aaca266601f9356d99ad0d170939bda26" prot="public" static="no">
        <name>nssv_CPP17_OR_GREATER</name>
        <initializer>( nssv_CPLUSPLUS &gt;= 201703L )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4084" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4084" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1af7f47e476c6ce810e5616fd2387986f9" prot="public" static="no">
        <name>nssv_CPP20_OR_GREATER</name>
        <initializer>( nssv_CPLUSPLUS &gt;= 202000L )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4085" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4085" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aac330550174a6ce3180a284df777e732" prot="public" static="no">
        <name>nssv_HAVE_STD_STRING_VIEW</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4096" column="12" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4096" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a3a05dbb3a370404a101285e9e12e4ff9" prot="public" static="no">
        <name>nssv_USES_STD_STRING_VIEW</name>
        <initializer>( (nssv_CONFIG_SELECT_STRING_VIEW == nssv_STRING_VIEW_STD) || ((nssv_CONFIG_SELECT_STRING_VIEW == nssv_STRING_VIEW_DEFAULT) &amp;&amp; nssv_HAVE_STD_STRING_VIEW) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4099" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4099" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1afeb3553ddf93b1428a8d023ae48ea2f5" prot="public" static="no">
        <name>nssv_HAVE_STARTS_WITH</name>
        <initializer>( nssv_CPP20_OR_GREATER || !nssv_USES_STD_STRING_VIEW )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4101" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a206df56f39e4d9349e14a2981932e9e8" prot="public" static="no">
        <name>nssv_HAVE_ENDS_WITH</name>
        <initializer>nssv_HAVE_STARTS_WITH</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4102" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a1147a88591abc46df3d36958876a4127" prot="public" static="no">
        <name>nssv_COMPILER_MSVC_VER</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4219" column="11" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a2a33d2d593300139207dade56a32a7db" prot="public" static="no">
        <name>nssv_COMPILER_MSVC_VERSION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4220" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a43bc2c5ef0f0e4d213b679634c8f03ed" prot="public" static="no">
        <name>nssv_COMPILER_VERSION</name>
        <param><defname>major</defname></param>
        <param><defname>minor</defname></param>
        <param><defname>patch</defname></param>
        <initializer>( 10 * ( 10 * (major) + (minor) ) + (patch) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4223" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a1000aa8427126d84a63b7c3bb0b55d13" prot="public" static="no">
        <name>nssv_COMPILER_APPLECLANG_VERSION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4232" column="11" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a1b60dd732452dd9f756de1612cd1f355" prot="public" static="no">
        <name>nssv_COMPILER_CLANG_VERSION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4233" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a22f3a2132d1b5150d2849e25211d8eee" prot="public" static="no">
        <name>nssv_COMPILER_GNUC_VERSION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4239" column="11" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a4857ee74c41ff85351615d051fb26eb2" prot="public" static="no">
        <name>nssv_BETWEEN</name>
        <param><defname>v</defname></param>
        <param><defname>lo</defname></param>
        <param><defname>hi</defname></param>
        <initializer>( (lo) &lt;= (v) &amp;&amp; (v) &lt; (hi) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4243" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a621511341a64a562ab5ddee8767ec841" prot="public" static="no">
        <name>nssv_HAS_CPP0X</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4250" column="11" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ae1fbc950179b86241c66005ac0cc29e2" prot="public" static="no">
        <name>nssv_CPP11_90</name>
        <initializer>(nssv_CPP11_OR_GREATER_ || nssv_COMPILER_MSVC_VER &gt;= 1500)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4260" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a944b10080d77d0480db63178465c2592" prot="public" static="no">
        <name>nssv_CPP11_100</name>
        <initializer>(nssv_CPP11_OR_GREATER_ || nssv_COMPILER_MSVC_VER &gt;= 1600)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4261" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a2cd65286067b394015ccbe60a4e5b57c" prot="public" static="no">
        <name>nssv_CPP11_110</name>
        <initializer>(nssv_CPP11_OR_GREATER_ || nssv_COMPILER_MSVC_VER &gt;= 1700)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4262" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a25c30b78486f20012666b5ce0e56904f" prot="public" static="no">
        <name>nssv_CPP11_120</name>
        <initializer>(nssv_CPP11_OR_GREATER_ || nssv_COMPILER_MSVC_VER &gt;= 1800)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4263" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a09ea8ca388e38fe3efd0f04515a70ab8" prot="public" static="no">
        <name>nssv_CPP11_140</name>
        <initializer>(nssv_CPP11_OR_GREATER_ || nssv_COMPILER_MSVC_VER &gt;= 1900)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4264" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a69e7e10c8a1a9d9873717d6feabe0b05" prot="public" static="no">
        <name>nssv_CPP11_141</name>
        <initializer>(nssv_CPP11_OR_GREATER_ || nssv_COMPILER_MSVC_VER &gt;= 1910)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4265" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a1e3f623a98307f9a4c6d36066ff79116" prot="public" static="no">
        <name>nssv_CPP14_000</name>
        <initializer>(nssv_CPP14_OR_GREATER)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4267" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a6f8d779a42994f4c77a86bea6f336610" prot="public" static="no">
        <name>nssv_CPP17_000</name>
        <initializer>(nssv_CPP17_OR_GREATER)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4268" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a69e21ea128e54acce79eabbe2e3ef4f6" prot="public" static="no">
        <name>nssv_HAVE_CONSTEXPR_11</name>
        <initializer>nssv_CPP11_140</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4272" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a61d3a77cd1c0d4c4c1af29fa69a0d279" prot="public" static="no">
        <name>nssv_HAVE_EXPLICIT_CONVERSION</name>
        <initializer>nssv_CPP11_140</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4273" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aa87ac8e5209156a3180813a24477abbf" prot="public" static="no">
        <name>nssv_HAVE_INLINE_NAMESPACE</name>
        <initializer>nssv_CPP11_140</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4274" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a864588c890aa86145436e06cdcf70a59" prot="public" static="no">
        <name>nssv_HAVE_NOEXCEPT</name>
        <initializer>nssv_CPP11_140</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4275" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ad7795a35d54e48400a7219011df1bc20" prot="public" static="no">
        <name>nssv_HAVE_NULLPTR</name>
        <initializer>nssv_CPP11_100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4276" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a80d28bc7bc5d9fdce5b3d9212524f358" prot="public" static="no">
        <name>nssv_HAVE_REF_QUALIFIER</name>
        <initializer>nssv_CPP11_140</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4277" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a51469b915f6db5d03eb9e58acb1841ec" prot="public" static="no">
        <name>nssv_HAVE_UNICODE_LITERALS</name>
        <initializer>nssv_CPP11_140</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4278" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a132917e4e753832303cce0c50adf5e46" prot="public" static="no">
        <name>nssv_HAVE_USER_DEFINED_LITERALS</name>
        <initializer>nssv_CPP11_140</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4279" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a5e1c79312329d4eeb4ccf33011f9300b" prot="public" static="no">
        <name>nssv_HAVE_WCHAR16_T</name>
        <initializer>nssv_CPP11_100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4280" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1afdca40a5be92ef320d57fce7b890d95e" prot="public" static="no">
        <name>nssv_HAVE_WCHAR32_T</name>
        <initializer>nssv_CPP11_100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4281" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aa9c87f8f04ae088b6c3d8c8cd76a5f23" prot="public" static="no">
        <name>nssv_HAVE_STD_DEFINED_LITERALS</name>
        <initializer>nssv_CPP11_140</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4284" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a606362c293867681396915bb0081b201" prot="public" static="no">
        <name>nssv_HAVE_CONSTEXPR_14</name>
        <initializer>nssv_CPP14_000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4291" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ab5eafe5674a8b1f878fdcd5e513a8e4e" prot="public" static="no">
        <name>nssv_HAVE_NODISCARD</name>
        <initializer>nssv_CPP17_000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4295" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ac7301fe426cf3c0cc7492c980fd785ba" prot="public" static="no">
        <name>nssv_HAVE_STD_HASH</name>
        <initializer>nssv_CPP11_120</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4299" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a4f91c2be9e812fec824a88a8a802e711" prot="public" static="no">
        <name>nssv_HAVE_BUILTIN_VER</name>
        <initializer>( (nssv_CPP17_000 &amp;&amp; nssv_COMPILER_MSVC_VERSION &gt;= 142) || nssv_COMPILER_GNUC_VERSION &gt; 0 || nssv_COMPILER_CLANG_VERSION &gt;= 400 || nssv_COMPILER_APPLECLANG_VERSION &gt;= 900 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4316" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a272474cb0fdd3bc5711e6e0a4607b181" prot="public" static="no">
        <name>nssv_HAVE_BUILTIN_CE</name>
        <initializer>(  nssv_HAVE_BUILTIN_VER )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4317" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a1b7712ed4d7a1de0d6688a0294c5cc29" prot="public" static="no">
        <name>nssv_HAVE_BUILTIN_MEMCMP</name>
        <initializer>( (nssv_HAVE_CONSTEXPR_14 &amp;&amp; nssv_HAVE_BUILTIN_CE) || !nssv_HAVE_CONSTEXPR_14 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4319" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a7475f4366ad9593b0b5d4109a7cfe2df" prot="public" static="no">
        <name>nssv_HAVE_BUILTIN_STRLEN</name>
        <initializer>( (nssv_HAVE_CONSTEXPR_11 &amp;&amp; nssv_HAVE_BUILTIN_CE) || !nssv_HAVE_CONSTEXPR_11 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4320" column="9" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a84b8d1e3c1c8562eb81217f0a78064bd" prot="public" static="no">
        <name>nssv_HAVE_BUILTIN</name>
        <param><defname>x</defname></param>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4325" column="11" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1adac831731b1a37acfd7cbb097424ecf3" prot="public" static="no">
        <name>nssv_BUILTIN_MEMCMP</name>
        <initializer>memcmp</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4331" column="11" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aaad848e03de25e9792da6c0f2986bdac" prot="public" static="no">
        <name>nssv_BUILTIN_STRLEN</name>
        <initializer>strlen</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4337" column="11" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4337" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1af0d84e0aa513c4271f3ceba44f25445b" prot="public" static="no">
        <name>nssv_constexpr</name>
        <initializer>/*constexpr*/</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4345" column="11" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ae2b3a7c8535456c64a6deecc2a0548ba" prot="public" static="no">
        <name>nssv_constexpr14</name>
        <initializer>/*constexpr*/</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4351" column="11" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4351" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a1139e9b4aa85c4080af7c51af21632ea" prot="public" static="no">
        <name>nssv_explicit</name>
        <initializer>/*explicit*/</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4357" column="11" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1acf1d4b85ce2c88776b8f6d4688e3cdd8" prot="public" static="no">
        <name>nssv_inline_ns</name>
        <initializer>/*inline*/</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4363" column="11" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a42cc8aded8d009467909834d7b9b95c5" prot="public" static="no">
        <name>nssv_noexcept</name>
        <initializer>/*noexcept*/</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4369" column="11" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a3b2f0948591497d16b3f5c05828ed9e8" prot="public" static="no">
        <name>nssv_nullptr</name>
        <initializer>NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4383" column="11" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1af0706b87a2bc93410731bf4487c1a5dc" prot="public" static="no">
        <name>nssv_nodiscard</name>
        <initializer>/*[[nodiscard]]*/</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4389" column="11" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1af1a7c37221304b32eaebbc8429a42770" prot="public" static="no">
        <name>nssv_SUPPRESS_MSGSL_WARNING</name>
        <param><defname>expr</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4428" column="11" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4428" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a5f2b309fc059f179481d79649bf7090e" prot="public" static="no">
        <name>nssv_SUPPRESS_MSVC_WARNING</name>
        <param><defname>code</defname></param>
        <param><defname>descr</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4429" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4429" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a71bac8e4bd44c03285b49fa86a641c80" prot="public" static="no">
        <name>nssv_DISABLE_MSVC_WARNINGS</name>
        <param><defname>codes</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4430" column="10" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a4ecd71980a8f28ffe24482c7af49406e" prot="public" static="no">
        <name>nssv_RESTORE_WARNINGS</name>
        <param></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4440" column="11" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4440" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a73cd2532e7049aa3b2414412d24962be" prot="public" static="no">
        <name>TERMCOLOR_HPP_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="5635" column="9"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1af3a7dcd33fae2a0a87b5c4491fe97fab" prot="public" static="no">
        <name>TABULATE_EXPORT_HPP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="9356" column="9"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a14894b7cb830040aca0a5e52c82c6521" prot="public" static="no">
        <name>TABULATE_VERSION_MAJOR</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="9373" column="9"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a3f203f0f4c0192e9b8a1e0882f8c7647" prot="public" static="no">
        <name>TABULATE_VERSION_MINOR</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="9374" column="9"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1aac087535415d2907607edc1e671907a2" prot="public" static="no">
        <name>TABULATE_VERSION_PATCH</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="9375" column="9"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a8c734894dfda9ca9edc118426cb110a4" prot="public" static="no">
        <name>TABULATE_CONCATENATE</name>
        <param><defname>A</defname></param>
        <param><defname>B</defname></param>
        <initializer>TABULATE_CONCATENATE_IMPL(A, B)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="9378" column="9"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1ac9eed58d173510a46b9ff34d8fe7d4a7" prot="public" static="no">
        <name>TABULATE_CONCATENATE_IMPL</name>
        <param><defname>A</defname></param>
        <param><defname>B</defname></param>
        <initializer>A##B</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="9379" column="9"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1adb3d38c7e32b2e3c6a6be9c7476f0adf" prot="public" static="no">
        <name>TABULATE_STRINGIFY</name>
        <param><defname>a</defname></param>
        <initializer>TABULATE_STRINGIFY_IMPL(a)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="9380" column="9"/>
      </memberdef>
      <memberdef kind="define" id="table_8hpp_1a93f3c798d15b6456729c4cbd95bfcfee" prot="public" static="no">
        <name>TABULATE_STRINGIFY_IMPL</name>
        <param><defname>a</defname></param>
        <initializer>#a</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="9381" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="table_8hpp_1ae1ec1b4ff8cc322a6d958703a1d5284e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nssv_DISABLE_MSVC_WARNINGS</definition>
        <argsstring>(4455 26481 26472) namespace nonstd</argsstring>
        <name>nssv_DISABLE_MSVC_WARNINGS</name>
        <param>
          <type>4455 26481</type>
          <declname>26472</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/srvenkat/matvec-test/src/table.hpp" line="4450" column="1" bodyfile="/home/srvenkat/matvec-test/src/table.hpp" bodystart="4450" bodyend="5414"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Taken<sp/>from:<sp/>https://github.com/p-ranav/tabulate/tree/master<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>License:<sp/>MIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NONSTD_VARIANT_LITE_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NONSTD_VARIANT_LITE_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_lite_MAJOR<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_lite_MINOR<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_lite_PATCH<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_lite_VERSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"><sp/><sp/>variant_STRINGIFY(variant_lite_MAJOR)<sp/>&quot;.&quot;</highlight><highlight class="normal"><sp/>variant_STRINGIFY(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>variant_lite_MINOR)<sp/>&quot;.&quot;<sp/>variant_STRINGIFY(variant_lite_PATCH)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_STRINGIFY(x)<sp/>variant_STRINGIFY_(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_STRINGIFY_(x)<sp/>#x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>variant-lite<sp/>configuration:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_VARIANT_DEFAULT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_VARIANT_NONSTD<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_VARIANT_STD<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(variant_CONFIG_SELECT_VARIANT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_CONFIG_SELECT_VARIANT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"><sp/><sp/>(variant_HAVE_STD_VARIANT<sp/>?<sp/>variant_VARIANT_STD<sp/>:<sp/>variant_VARIANT_NONSTD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>variant_CONFIG_OMIT_VARIANT_SIZE_V_MACRO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_CONFIG_OMIT_VARIANT_SIZE_V_MACRO<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>variant_CONFIG_OMIT_VARIANT_ALTERNATIVE_T_MACRO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_CONFIG_OMIT_VARIANT_ALTERNATIVE_T_MACRO<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Control<sp/>presence<sp/>of<sp/>exception<sp/>handling<sp/>(try<sp/>and<sp/>auto<sp/>discover):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>variant_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cpp_exceptions)<sp/>||<sp/>defined(__EXCEPTIONS)<sp/>||<sp/>defined(_CPPUNWIND)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_CONFIG_NO_EXCEPTIONS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_CONFIG_NO_EXCEPTIONS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++<sp/>language<sp/>version<sp/>detection<sp/>(C++20<sp/>is<sp/>speculative):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>VC14.0/1900<sp/>(VS2015)<sp/>lacks<sp/>too<sp/>much<sp/>from<sp/>C++14.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>variant_CPLUSPLUS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSVC_LANG)<sp/>&amp;&amp;<sp/>!defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_CPLUSPLUS<sp/>(_MSC_VER<sp/>==<sp/>1900<sp/>?<sp/>201103L<sp/>:<sp/>_MSVC_LANG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_CPLUSPLUS<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_CPP98_OR_GREATER<sp/>(variant_CPLUSPLUS<sp/>&gt;=<sp/>199711L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_CPP11_OR_GREATER<sp/>(variant_CPLUSPLUS<sp/>&gt;=<sp/>201103L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_CPP11_OR_GREATER_<sp/>(variant_CPLUSPLUS<sp/>&gt;=<sp/>201103L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_CPP14_OR_GREATER<sp/>(variant_CPLUSPLUS<sp/>&gt;=<sp/>201402L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_CPP17_OR_GREATER<sp/>(variant_CPLUSPLUS<sp/>&gt;=<sp/>201703L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_CPP20_OR_GREATER<sp/>(variant_CPLUSPLUS<sp/>&gt;=<sp/>202000L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>C++17<sp/>std::variant<sp/>if<sp/>available<sp/>and<sp/>requested:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP17_OR_GREATER<sp/>&amp;&amp;<sp/>defined(__has_include)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_include(&lt;variant&gt;<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_HAVE_STD_VARIANT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_HAVE_STD_VARIANT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_HAVE_STD_VARIANT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_USES_STD_VARIANT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"><sp/><sp/>((variant_CONFIG_SELECT_VARIANT<sp/>==<sp/>variant_VARIANT_STD)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"><sp/><sp/><sp/>((variant_CONFIG_SELECT_VARIANT<sp/>==<sp/>variant_VARIANT_DEFAULT)<sp/>&amp;&amp;<sp/>variant_HAVE_STD_VARIANT))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in_place:<sp/>code<sp/>duplicated<sp/>in<sp/>any-lite,<sp/>expected-lite,<sp/>optional-lite,<sp/>value-ptr-lite,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>variant-lite:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>nonstd_lite_HAVE_IN_PLACE_TYPES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nonstd_lite_HAVE_IN_PLACE_TYPES<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++17<sp/>std::in_place<sp/>in<sp/>&lt;utility&gt;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP17_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">nonstd<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::in_place;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::in_place_index;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::in_place_index_t;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::in_place_t;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::in_place_type;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::in_place_type_t;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nonstd_lite_in_place_t(T)<sp/>std::in_place_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nonstd_lite_in_place_type_t(T)<sp/>std::in_place_type_t&lt;T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nonstd_lite_in_place_index_t(K)<sp/>std::in_place_index_t&lt;K&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nonstd_lite_in_place(T)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"><sp/><sp/>std::in_place_t<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nonstd_lite_in_place_type(T)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/>std::in_place_type_t&lt;T&gt;<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nonstd_lite_in_place_index(K)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"><sp/><sp/>std::in_place_index_t&lt;K&gt;<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>nonstd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>variant_CPP17_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">nonstd<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="structnonstd_1_1detail_1_1in__place__type__tag" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1detail_1_1in__place__type__tag" kindref="compound">in_place_type_tag</ref><sp/>{};</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="structnonstd_1_1detail_1_1in__place__index__tag" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>K&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1detail_1_1in__place__index__tag" kindref="compound">in_place_index_tag</ref><sp/>{};</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="structnonstd_1_1in__place__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1in__place__t" kindref="compound">in_place_t</ref><sp/>{};</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1in__place__t" kindref="compound">in_place_t</ref><sp/>in_place(<ref refid="structnonstd_1_1detail_1_1in__place__type__tag" kindref="compound">detail::in_place_type_tag&lt;T&gt;</ref><sp/>=<sp/><ref refid="structnonstd_1_1detail_1_1in__place__type__tag" kindref="compound">detail::in_place_type_tag&lt;T&gt;</ref>())<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1in__place__t" kindref="compound">in_place_t</ref>();</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>K&gt;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>in_place_t<sp/>in_place(detail::in_place_index_tag&lt;K&gt;<sp/>=<sp/>detail::in_place_index_tag&lt;K&gt;())<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>in_place_t();</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>in_place_t<sp/>in_place_type(detail::in_place_type_tag&lt;T&gt;<sp/>=<sp/>detail::in_place_type_tag&lt;T&gt;())<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>in_place_t();</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>K&gt;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>in_place_t<sp/>in_place_index(detail::in_place_index_tag&lt;K&gt;<sp/>=<sp/>detail::in_place_index_tag&lt;K&gt;())<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>in_place_t();</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>mimic<sp/>templated<sp/>typedef:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nonstd_lite_in_place_t(T)<sp/>nonstd::in_place_t<sp/>(&amp;)(nonstd::detail::in_place_type_tag&lt;T&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nonstd_lite_in_place_type_t(T)<sp/>nonstd::in_place_t<sp/>(&amp;)(nonstd::detail::in_place_type_tag&lt;T&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nonstd_lite_in_place_index_t(K)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"><sp/><sp/>nonstd::in_place_t<sp/>(&amp;)(nonstd::detail::in_place_index_tag&lt;K&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nonstd_lite_in_place(T)<sp/>nonstd::in_place_type&lt;T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nonstd_lite_in_place_type(T)<sp/>nonstd::in_place_type&lt;T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nonstd_lite_in_place_index(K)<sp/>nonstd::in_place_index&lt;K&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>nonstd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>variant_CPP17_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>nonstd_lite_HAVE_IN_PLACE_TYPES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>C++17<sp/>std::variant:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_USES_STD_VARIANT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>std::hash&lt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;variant&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!variant_CONFIG_OMIT_VARIANT_SIZE_V_MACRO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_size_V(T)<sp/>nonstd::variant_size&lt;T&gt;::value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!variant_CONFIG_OMIT_VARIANT_ALTERNATIVE_T_MACRO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_alternative_T(K,<sp/>T)<sp/>typename<sp/>nonstd::variant_alternative&lt;K,<sp/>T&gt;::type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">nonstd<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::bad_variant_access;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::hash;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::monostate;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::variant;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::variant_alternative;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::variant_alternative_t;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::variant_size;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::variant_size_v;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::get;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::get_if;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::holds_alternative;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::visit;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator==;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator!=;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator&lt;;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator&lt;=;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator&gt;;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator&gt;=;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::swap;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>variant_npos<sp/>=<sp/>std::variant_npos;</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>nonstd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>variant_USES_STD_VARIANT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;new&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>variant-lite<sp/>type<sp/>and<sp/>visitor<sp/>argument<sp/>count<sp/>configuration<sp/>(script/generate_header.py):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_CONFIG_MAX_TYPE_COUNT<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_CONFIG_MAX_VISITOR_ARG_COUNT<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>variant-lite<sp/>alignment<sp/>configuration:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>variant_CONFIG_MAX_ALIGN_HACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_CONFIG_MAX_ALIGN_HACK<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>variant_CONFIG_ALIGN_AS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//<sp/>no<sp/>default,<sp/>used<sp/>in<sp/>#if<sp/>defined()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>variant_CONFIG_ALIGN_AS_FALLBACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_CONFIG_ALIGN_AS_FALLBACK<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//<sp/>half-open<sp/>range<sp/>[lo..hi):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_BETWEEN(v,<sp/>lo,<sp/>hi)<sp/>((lo)<sp/>&lt;=<sp/>(v)<sp/>&amp;&amp;<sp/>(v)<sp/>&lt;<sp/>(hi))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compiler<sp/>versions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/><sp/>6.0<sp/><sp/>_MSC_VER<sp/>==<sp/>1200<sp/><sp/>variant_COMPILER_MSVC_VERSION<sp/>==<sp/><sp/>60<sp/><sp/>(Visual<sp/>Studio<sp/>6.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/><sp/>7.0<sp/><sp/>_MSC_VER<sp/>==<sp/>1300<sp/><sp/>variant_COMPILER_MSVC_VERSION<sp/>==<sp/><sp/>70<sp/><sp/>(Visual<sp/>Studio<sp/>.NET<sp/>2002)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/><sp/>7.1<sp/><sp/>_MSC_VER<sp/>==<sp/>1310<sp/><sp/>variant_COMPILER_MSVC_VERSION<sp/>==<sp/><sp/>71<sp/><sp/>(Visual<sp/>Studio<sp/>.NET<sp/>2003)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/><sp/>8.0<sp/><sp/>_MSC_VER<sp/>==<sp/>1400<sp/><sp/>variant_COMPILER_MSVC_VERSION<sp/>==<sp/><sp/>80<sp/><sp/>(Visual<sp/>Studio<sp/>2005)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/><sp/>9.0<sp/><sp/>_MSC_VER<sp/>==<sp/>1500<sp/><sp/>variant_COMPILER_MSVC_VERSION<sp/>==<sp/><sp/>90<sp/><sp/>(Visual<sp/>Studio<sp/>2008)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>10.0<sp/><sp/>_MSC_VER<sp/>==<sp/>1600<sp/><sp/>variant_COMPILER_MSVC_VERSION<sp/>==<sp/>100<sp/><sp/>(Visual<sp/>Studio<sp/>2010)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>11.0<sp/><sp/>_MSC_VER<sp/>==<sp/>1700<sp/><sp/>variant_COMPILER_MSVC_VERSION<sp/>==<sp/>110<sp/><sp/>(Visual<sp/>Studio<sp/>2012)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>12.0<sp/><sp/>_MSC_VER<sp/>==<sp/>1800<sp/><sp/>variant_COMPILER_MSVC_VERSION<sp/>==<sp/>120<sp/><sp/>(Visual<sp/>Studio<sp/>2013)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>14.0<sp/><sp/>_MSC_VER<sp/>==<sp/>1900<sp/><sp/>variant_COMPILER_MSVC_VERSION<sp/>==<sp/>140<sp/><sp/>(Visual<sp/>Studio<sp/>2015)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>14.1<sp/><sp/>_MSC_VER<sp/>&gt;=<sp/>1910<sp/><sp/>variant_COMPILER_MSVC_VERSION<sp/>==<sp/>141<sp/><sp/>(Visual<sp/>Studio<sp/>2017)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>14.2<sp/><sp/>_MSC_VER<sp/>&gt;=<sp/>1920<sp/><sp/>variant_COMPILER_MSVC_VERSION<sp/>==<sp/>142<sp/><sp/>(Visual<sp/>Studio<sp/>2019)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>!defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_COMPILER_MSVC_VER<sp/>(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_COMPILER_MSVC_VERSION<sp/>(_MSC_VER<sp/>/<sp/>10<sp/>-<sp/>10<sp/>*<sp/>(5<sp/>+<sp/>(_MSC_VER<sp/>&lt;<sp/>1900)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_COMPILER_MSVC_VER<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_COMPILER_MSVC_VERSION<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_COMPILER_VERSION(major,<sp/>minor,<sp/>patch)<sp/>(10<sp/>*<sp/>(10<sp/>*<sp/>(major)<sp/>+<sp/>(minor))<sp/>+<sp/>(patch))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_COMPILER_CLANG_VERSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="276"><highlight class="preprocessor"><sp/><sp/>variant_COMPILER_VERSION(__clang_major__,<sp/>__clang_minor__,<sp/>__clang_patchlevel__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_COMPILER_CLANG_VERSION<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>!defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_COMPILER_GNUC_VERSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="283"><highlight class="preprocessor"><sp/><sp/>variant_COMPILER_VERSION(__GNUC__,<sp/>__GNUC_MINOR__,<sp/>__GNUC_PATCHLEVEL__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_COMPILER_GNUC_VERSION<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_BETWEEN(variant_COMPILER_MSVC_VER,<sp/>1300,<sp/>1900)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable<sp/>:<sp/>4345)<sp/></highlight><highlight class="comment">//<sp/>initialization<sp/>behavior<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Presence<sp/>of<sp/>language<sp/>and<sp/>library<sp/>features:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_HAVE(feature)<sp/>(variant_HAVE_##feature)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_HAS_CPP0X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_HAS_CPP0X<sp/>_HAS_CPP0X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_HAS_CPP0X<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>defined<sp/>otherwise<sp/>below,<sp/>consider<sp/>VC14<sp/>as<sp/>C++11<sp/>for<sp/>variant-lite:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_COMPILER_MSVC_VER<sp/>&gt;=<sp/>1900</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_CPP11_OR_GREATER<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_CPP11_90<sp/>(variant_CPP11_OR_GREATER_<sp/>||<sp/>variant_COMPILER_MSVC_VER<sp/>&gt;=<sp/>1500)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_CPP11_100<sp/>(variant_CPP11_OR_GREATER_<sp/>||<sp/>variant_COMPILER_MSVC_VER<sp/>&gt;=<sp/>1600)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_CPP11_110<sp/>(variant_CPP11_OR_GREATER_<sp/>||<sp/>variant_COMPILER_MSVC_VER<sp/>&gt;=<sp/>1700)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_CPP11_120<sp/>(variant_CPP11_OR_GREATER_<sp/>||<sp/>variant_COMPILER_MSVC_VER<sp/>&gt;=<sp/>1800)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_CPP11_140<sp/>(variant_CPP11_OR_GREATER_<sp/>||<sp/>variant_COMPILER_MSVC_VER<sp/>&gt;=<sp/>1900)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_CPP11_141<sp/>(variant_CPP11_OR_GREATER_<sp/>||<sp/>variant_COMPILER_MSVC_VER<sp/>&gt;=<sp/>1910)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_CPP14_000<sp/>(variant_CPP14_OR_GREATER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_CPP17_000<sp/>(variant_CPP17_OR_GREATER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Presence<sp/>of<sp/>C++11<sp/>language<sp/>features:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_HAVE_CONSTEXPR_11<sp/>variant_CPP11_140</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_HAVE_INITIALIZER_LIST<sp/>variant_CPP11_120</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_HAVE_NOEXCEPT<sp/>variant_CPP11_140</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_HAVE_NULLPTR<sp/>variant_CPP11_100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_HAVE_OVERRIDE<sp/>variant_CPP11_140</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Presence<sp/>of<sp/>C++14<sp/>language<sp/>features:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_HAVE_CONSTEXPR_14<sp/>variant_CPP14_000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Presence<sp/>of<sp/>C++17<sp/>language<sp/>features:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment">//<sp/>no<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Presence<sp/>of<sp/>C++<sp/>library<sp/>features:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_HAVE_CONDITIONAL<sp/>variant_CPP11_120</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_HAVE_REMOVE_CV<sp/>variant_CPP11_120</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_HAVE_STD_ADD_POINTER<sp/>variant_CPP11_90</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_HAVE_TYPE_TRAITS<sp/>variant_CPP11_90</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_HAVE_TR1_TYPE_TRAITS<sp/>(!!variant_COMPILER_GNUC_VERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_HAVE_TR1_ADD_POINTER<sp/>(!!variant_COMPILER_GNUC_VERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++<sp/>feature<sp/>usage:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_HAVE_CONSTEXPR_11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_constexpr<sp/>constexpr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_constexpr<sp/></highlight><highlight class="comment">/*constexpr*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_HAVE_CONSTEXPR_14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_constexpr14<sp/>constexpr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_constexpr14<sp/></highlight><highlight class="comment">/*constexpr*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_HAVE_NOEXCEPT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_noexcept<sp/>noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_noexcept<sp/></highlight><highlight class="comment">/*noexcept*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_HAVE_NULLPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_nullptr<sp/>nullptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_nullptr<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_HAVE_OVERRIDE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_override<sp/>override</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_override<sp/></highlight><highlight class="comment">/*override*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">//<sp/>additional<sp/>includes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>std::hash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_HAVE_INITIALIZER_LIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;initializer_list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_HAVE_TYPE_TRAITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>variant_HAVE_TR1_TYPE_TRAITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tr1/type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Method<sp/>enabling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_REQUIRES_0(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="399"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;bool<sp/>B<sp/>=<sp/>(__VA_ARGS__),<sp/>typename<sp/>std::enable_if&lt;B,<sp/>int&gt;::type<sp/>=<sp/>0&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_REQUIRES_T(...)<sp/>,<sp/>typename<sp/>std::enable_if&lt;(__VA_ARGS__),<sp/>int&gt;::type<sp/>=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_REQUIRES_R(R,<sp/>...)<sp/>typename<sp/>std::enable_if&lt;(__VA_ARGS__),<sp/>R&gt;::type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_REQUIRES_A(...)<sp/>,<sp/>typename<sp/>std::enable_if&lt;(__VA_ARGS__),<sp/>void<sp/>*&gt;::type<sp/>=<sp/>nullptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">//<sp/>variant:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">nonstd<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">variants<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++11<sp/>emulation:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std11<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_HAVE_STD_ADD_POINTER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::add_pointer;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>variant_HAVE_TR1_ADD_POINTER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::tr1::add_pointer;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="structnonstd_1_1variants_1_1std11_1_1remove__reference" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1std11_1_1remove__reference" kindref="compound">remove_reference</ref><sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="431" refid="structnonstd_1_1variants_1_1std11_1_1remove__reference_3_01T_01_6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1std11_1_1remove__reference" kindref="compound">remove_reference</ref>&lt;T<sp/>&amp;&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433" refid="structnonstd_1_1variants_1_1std11_1_1add__pointer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1std11_1_1add__pointer" kindref="compound">add_pointer</ref><sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>remove_reference&lt;T&gt;::type<sp/>*type;<sp/>};</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>variant_HAVE_STD_ADD_POINTER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_HAVE_REMOVE_CV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::remove_cv;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443" refid="structnonstd_1_1variants_1_1std11_1_1remove__const" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1std11_1_1remove__const" kindref="compound">remove_const</ref><sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="444" refid="structnonstd_1_1variants_1_1std11_1_1remove__const_3_01const_01T_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1std11_1_1remove__const" kindref="compound">remove_const</ref>&lt;const<sp/>T&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446" refid="structnonstd_1_1variants_1_1std11_1_1remove__volatile" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1std11_1_1remove__volatile" kindref="compound">remove_volatile</ref><sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="447" refid="structnonstd_1_1variants_1_1std11_1_1remove__volatile_3_01volatile_01T_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1std11_1_1remove__volatile" kindref="compound">remove_volatile</ref>&lt;volatile<sp/>T&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449" refid="structnonstd_1_1variants_1_1std11_1_1remove__cv" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1std11_1_1remove__cv" kindref="compound">remove_cv</ref><sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1std11_1_1remove__volatile" kindref="compound">remove_volatile&lt;typename remove_const&lt;T&gt;::type</ref>&gt;::type<sp/>type;</highlight></codeline>
<codeline lineno="451"><highlight class="normal">};</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>variant_HAVE_REMOVE_CV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_HAVE_CONDITIONAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::conditional;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461" refid="structnonstd_1_1variants_1_1std11_1_1conditional" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Cond,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Then,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Else&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1std11_1_1conditional" kindref="compound">conditional</ref>;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463" refid="structnonstd_1_1variants_1_1std11_1_1conditional_3_01true_00_01Then_00_01Else_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Then,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Else&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1std11_1_1conditional" kindref="compound">conditional</ref>&lt;true,<sp/>Then,<sp/>Else&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Then<sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465" refid="structnonstd_1_1variants_1_1std11_1_1conditional_3_01false_00_01Then_00_01Else_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Then,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Else&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1std11_1_1conditional" kindref="compound">conditional</ref>&lt;false,<sp/>Then,<sp/>Else&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Else<sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>variant_HAVE_CONDITIONAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473" refid="namespacenonstd_1_1variants_1_1std17" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std17<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP17_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::is_nothrow_swappable;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::is_swappable;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::swap;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_swappable<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>decltype(swap(std::declval&lt;T<sp/>&amp;&gt;(),<sp/>std::declval&lt;T<sp/>&amp;&gt;()))&gt;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::true_type<sp/>test(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::false_type<sp/>test(...);</highlight></codeline>
<codeline lineno="491"><highlight class="normal">};</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_nothrow_swappable<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>wrap<sp/>noexcept(epr)<sp/>in<sp/>separate<sp/>function<sp/>as<sp/>work-around<sp/>for<sp/>VC140<sp/>(VS2015):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test()<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(swap(std::declval&lt;T<sp/>&amp;&gt;(),<sp/>std::declval&lt;T<sp/>&amp;&gt;()));</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-&gt;<sp/>std::integral_constant&lt;bool,<sp/>test&lt;T&gt;()&gt;<sp/>{}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::false_type<sp/>test(...);</highlight></codeline>
<codeline lineno="503"><highlight class="normal">};</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>[nothow]<sp/>swappable:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_swappable<sp/>:<sp/>decltype(detail::is_swappable::test&lt;T&gt;(0))<sp/>{};</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_nothrow_swappable<sp/>:<sp/>decltype(detail::is_nothrow_swappable::test&lt;T&gt;(0))<sp/>{};</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>variant_CPP17_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="comment">//<sp/>detail:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="comment">//<sp/>typelist:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_TL1(T1)<sp/>detail::typelist&lt;T1,<sp/>detail::nulltype&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_TL2(T1,<sp/>T2)<sp/>detail::typelist&lt;T1,<sp/>variant_TL1(T2)&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_TL3(T1,<sp/>T2,<sp/>T3)<sp/>detail::typelist&lt;T1,<sp/>variant_TL2(T2,<sp/>T3)&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_TL4(T1,<sp/>T2,<sp/>T3,<sp/>T4)<sp/>detail::typelist&lt;T1,<sp/>variant_TL3(T2,<sp/>T3,<sp/>T4)&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_TL5(T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5)<sp/>detail::typelist&lt;T1,<sp/>variant_TL4(T2,<sp/>T3,<sp/>T4,<sp/>T5)&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_TL6(T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6)<sp/>detail::typelist&lt;T1,<sp/>variant_TL5(T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6)&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_TL7(T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="531"><highlight class="preprocessor"><sp/><sp/>detail::typelist&lt;T1,<sp/>variant_TL6(T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7)&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_TL8(T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="533"><highlight class="preprocessor"><sp/><sp/>detail::typelist&lt;T1,<sp/>variant_TL7(T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8)&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_TL9(T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="535"><highlight class="preprocessor"><sp/><sp/>detail::typelist&lt;T1,<sp/>variant_TL8(T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9)&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_TL10(T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="537"><highlight class="preprocessor"><sp/><sp/>detail::typelist&lt;T1,<sp/>variant_TL9(T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10)&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_TL11(T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="539"><highlight class="preprocessor"><sp/><sp/>detail::typelist&lt;T1,<sp/>variant_TL10(T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11)&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_TL12(T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="541"><highlight class="preprocessor"><sp/><sp/>detail::typelist&lt;T1,<sp/>variant_TL11(T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12)&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_TL13(T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="543"><highlight class="preprocessor"><sp/><sp/>detail::typelist&lt;T1,<sp/>variant_TL12(T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13)&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_TL14(T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="545"><highlight class="preprocessor"><sp/><sp/>detail::typelist&lt;T1,<sp/>variant_TL13(T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14)&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_TL15(T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="547"><highlight class="preprocessor"><sp/><sp/>detail::typelist&lt;T1,<sp/>variant_TL14(T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15)&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_TL16(T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15,<sp/>T16)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="549"><highlight class="preprocessor"><sp/><sp/>detail::typelist&lt;T1,<sp/>variant_TL15(T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15,<sp/><sp/>\</highlight></codeline>
<codeline lineno="550"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T16)&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="comment">//<sp/>variant<sp/>parameter<sp/>unused<sp/>type<sp/>tags:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554" refid="structnonstd_1_1variants_1_1detail_1_1TX" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX</ref><sp/>:<sp/>T<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref><sp/>operator+()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref>();<sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref><sp/>operator-()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref>();<sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref><sp/>operator!()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref>();<sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref><sp/>operator~()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref>();<sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref><sp/>*operator&amp;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>variant_nullptr;<sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref><sp/>operator*(U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref>();<sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref><sp/>operator/(U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref>();<sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref><sp/>operator%(U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref>();<sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref><sp/>operator+(U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref>();<sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref><sp/>operator-(U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref>();<sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref><sp/>operator&lt;&lt;(U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref>();<sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref><sp/>operator&gt;&gt;(U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref>();<sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref><sp/>operator&amp;(U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref>();<sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref><sp/>operator|(U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref>();<sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref><sp/>operator^(U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref>();<sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref><sp/>operator&amp;&amp;(U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref>();<sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref><sp/>operator||(U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;T&gt;</ref>();<sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal">};</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584" refid="structnonstd_1_1variants_1_1detail_1_1S0" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1S0" kindref="compound">S0</ref><sp/>{};</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;S0&gt;</ref><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T0</ref>;</highlight></codeline>
<codeline lineno="586" refid="structnonstd_1_1variants_1_1detail_1_1S1" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1S1" kindref="compound">S1</ref><sp/>{};</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;S1&gt;</ref><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T1</ref>;</highlight></codeline>
<codeline lineno="588" refid="structnonstd_1_1variants_1_1detail_1_1S2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1S2" kindref="compound">S2</ref><sp/>{};</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;S2&gt;</ref><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T2</ref>;</highlight></codeline>
<codeline lineno="590" refid="structnonstd_1_1variants_1_1detail_1_1S3" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1S3" kindref="compound">S3</ref><sp/>{};</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;S3&gt;</ref><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T3</ref>;</highlight></codeline>
<codeline lineno="592" refid="structnonstd_1_1variants_1_1detail_1_1S4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1S4" kindref="compound">S4</ref><sp/>{};</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;S4&gt;</ref><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T4</ref>;</highlight></codeline>
<codeline lineno="594" refid="structnonstd_1_1variants_1_1detail_1_1S5" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1S5" kindref="compound">S5</ref><sp/>{};</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;S5&gt;</ref><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T5</ref>;</highlight></codeline>
<codeline lineno="596" refid="structnonstd_1_1variants_1_1detail_1_1S6" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1S6" kindref="compound">S6</ref><sp/>{};</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;S6&gt;</ref><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T6</ref>;</highlight></codeline>
<codeline lineno="598" refid="structnonstd_1_1variants_1_1detail_1_1S7" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1S7" kindref="compound">S7</ref><sp/>{};</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;S7&gt;</ref><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T7</ref>;</highlight></codeline>
<codeline lineno="600" refid="structnonstd_1_1variants_1_1detail_1_1S8" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1S8" kindref="compound">S8</ref><sp/>{};</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;S8&gt;</ref><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T8</ref>;</highlight></codeline>
<codeline lineno="602" refid="structnonstd_1_1variants_1_1detail_1_1S9" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1S9" kindref="compound">S9</ref><sp/>{};</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;S9&gt;</ref><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T9</ref>;</highlight></codeline>
<codeline lineno="604" refid="structnonstd_1_1variants_1_1detail_1_1S10" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1S10" kindref="compound">S10</ref><sp/>{};</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;S10&gt;</ref><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T10</ref>;</highlight></codeline>
<codeline lineno="606" refid="structnonstd_1_1variants_1_1detail_1_1S11" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1S11" kindref="compound">S11</ref><sp/>{};</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;S11&gt;</ref><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T11</ref>;</highlight></codeline>
<codeline lineno="608" refid="structnonstd_1_1variants_1_1detail_1_1S12" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1S12" kindref="compound">S12</ref><sp/>{};</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;S12&gt;</ref><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T12</ref>;</highlight></codeline>
<codeline lineno="610" refid="structnonstd_1_1variants_1_1detail_1_1S13" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1S13" kindref="compound">S13</ref><sp/>{};</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;S13&gt;</ref><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T13</ref>;</highlight></codeline>
<codeline lineno="612" refid="structnonstd_1_1variants_1_1detail_1_1S14" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1S14" kindref="compound">S14</ref><sp/>{};</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;S14&gt;</ref><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T14</ref>;</highlight></codeline>
<codeline lineno="614" refid="structnonstd_1_1variants_1_1detail_1_1S15" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1S15" kindref="compound">S15</ref><sp/>{};</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX&lt;S15&gt;</ref><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T15</ref>;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617" refid="structnonstd_1_1variants_1_1detail_1_1nulltype" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1nulltype" kindref="compound">nulltype</ref><sp/>{};</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619" refid="structnonstd_1_1variants_1_1detail_1_1typelist" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Head,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Tail&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist" kindref="compound">typelist</ref><sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Head<sp/>head;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Tail<sp/>tail;</highlight></codeline>
<codeline lineno="622"><highlight class="normal">};</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment">//<sp/>typelist<sp/>max<sp/>element<sp/>size:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626" refid="structnonstd_1_1variants_1_1detail_1_1typelist__max" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>List&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__max" kindref="compound">typelist_max</ref>;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628" refid="structnonstd_1_1variants_1_1detail_1_1typelist__max_3_01nulltype_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__max" kindref="compound">typelist_max</ref>&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1nulltype" kindref="compound">nulltype</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>type;</highlight></codeline>
<codeline lineno="631"><highlight class="normal">};</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633" refid="structnonstd_1_1variants_1_1detail_1_1typelist__max_3_01typelist_3_01Head_00_01Tail_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Head,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Tail&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__max" kindref="compound">typelist_max</ref>&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1typelist" kindref="compound">typelist</ref>&lt;Head,<sp/>Tail&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>TV<sp/>{<sp/>tail_value<sp/>=<sp/>size_t(<ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__max" kindref="compound">typelist_max&lt;Tail&gt;::value</ref>)<sp/>};</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__max" kindref="compound">typelist_max&lt;Tail&gt;::type</ref><sp/>tail_type;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Head)<sp/>&gt;<sp/>tail_value)<sp/>?<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Head)<sp/>:<sp/>std::size_t(tail_value)<sp/>};</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1std11_1_1conditional" kindref="compound">std11::conditional</ref>&lt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Head)<sp/>&gt;<sp/>tail_value),<sp/>Head,<sp/>tail_type&gt;::type<sp/>type;</highlight></codeline>
<codeline lineno="643"><highlight class="normal">};</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="comment">//<sp/>typelist<sp/>max<sp/>alignof<sp/>element<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>List&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">typelist_max_alignof;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">typelist_max_alignof&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1nulltype" kindref="compound">nulltype</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="653"><highlight class="normal">};</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Head,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Tail&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">typelist_max_alignof&lt;typelist&lt;Head,<sp/>Tail&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>TV<sp/>{<sp/>tail_value<sp/>=<sp/>size_t(typelist_max_alignof&lt;Tail&gt;::value)<sp/>};</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/>(</highlight><highlight class="keyword">alignof</highlight><highlight class="normal">(Head)<sp/>&gt;<sp/>tail_value)<sp/>?<sp/></highlight><highlight class="keyword">alignof</highlight><highlight class="normal">(Head)<sp/>:<sp/>std::size_t(tail_value)<sp/>};</highlight></codeline>
<codeline lineno="661"><highlight class="normal">};</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="comment">//<sp/>typelist<sp/>size<sp/>(length):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667" refid="structnonstd_1_1variants_1_1detail_1_1typelist__size" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>List&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__size" kindref="compound">typelist_size</ref><sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="669"><highlight class="normal">};</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671" refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T0_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__size" kindref="compound">typelist_size</ref>&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T0</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="673"><highlight class="normal">};</highlight></codeline>
<codeline lineno="674" refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T1_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__size" kindref="compound">typelist_size</ref>&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T1</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="676"><highlight class="normal">};</highlight></codeline>
<codeline lineno="677" refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T2_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__size" kindref="compound">typelist_size</ref>&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T2</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="679"><highlight class="normal">};</highlight></codeline>
<codeline lineno="680" refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T3_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__size" kindref="compound">typelist_size</ref>&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T3</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="682"><highlight class="normal">};</highlight></codeline>
<codeline lineno="683" refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__size" kindref="compound">typelist_size</ref>&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T4</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="685"><highlight class="normal">};</highlight></codeline>
<codeline lineno="686" refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T5_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__size" kindref="compound">typelist_size</ref>&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T5</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="688"><highlight class="normal">};</highlight></codeline>
<codeline lineno="689" refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__size" kindref="compound">typelist_size</ref>&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T6</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="691"><highlight class="normal">};</highlight></codeline>
<codeline lineno="692" refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T7_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__size" kindref="compound">typelist_size</ref>&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T7</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="694"><highlight class="normal">};</highlight></codeline>
<codeline lineno="695" refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T8_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__size" kindref="compound">typelist_size</ref>&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T8</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="697"><highlight class="normal">};</highlight></codeline>
<codeline lineno="698" refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T9_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__size" kindref="compound">typelist_size</ref>&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T9</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="700"><highlight class="normal">};</highlight></codeline>
<codeline lineno="701" refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T10_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__size" kindref="compound">typelist_size</ref>&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T10</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="703"><highlight class="normal">};</highlight></codeline>
<codeline lineno="704" refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T11_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__size" kindref="compound">typelist_size</ref>&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T11</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="706"><highlight class="normal">};</highlight></codeline>
<codeline lineno="707" refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T12_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__size" kindref="compound">typelist_size</ref>&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T12</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="709"><highlight class="normal">};</highlight></codeline>
<codeline lineno="710" refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T13_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__size" kindref="compound">typelist_size</ref>&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T13</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="712"><highlight class="normal">};</highlight></codeline>
<codeline lineno="713" refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T14_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__size" kindref="compound">typelist_size</ref>&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T14</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="715"><highlight class="normal">};</highlight></codeline>
<codeline lineno="716" refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01T15_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__size" kindref="compound">typelist_size</ref>&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T15</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="718"><highlight class="normal">};</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720" refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01nulltype_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__size" kindref="compound">typelist_size</ref>&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1nulltype" kindref="compound">nulltype</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="722"><highlight class="normal">};</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724" refid="structnonstd_1_1variants_1_1detail_1_1typelist__size_3_01typelist_3_01Head_00_01Tail_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Head,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Tail&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__size" kindref="compound">typelist_size</ref>&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1typelist" kindref="compound">typelist</ref>&lt;Head,<sp/>Tail&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__size" kindref="compound">typelist_size&lt;Head&gt;::value</ref><sp/>+<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__size" kindref="compound">typelist_size&lt;Tail&gt;::value</ref><sp/>};</highlight></codeline>
<codeline lineno="726"><highlight class="normal">};</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="comment">//<sp/>typelist<sp/>index<sp/>of<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730" refid="structnonstd_1_1variants_1_1detail_1_1typelist__index__of" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>List,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__index__of" kindref="compound">typelist_index_of</ref>;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732" refid="structnonstd_1_1variants_1_1detail_1_1typelist__index__of_3_01nulltype_00_01T_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__index__of" kindref="compound">typelist_index_of</ref>&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1nulltype" kindref="compound">nulltype</ref>,<sp/>T&gt;<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/>-1<sp/>};</highlight></codeline>
<codeline lineno="734"><highlight class="normal">};</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736" refid="structnonstd_1_1variants_1_1detail_1_1typelist__index__of_3_01typelist_3_01T_00_01Tail_01_4_00_01T_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Tail,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__index__of" kindref="compound">typelist_index_of</ref>&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1typelist" kindref="compound">typelist</ref>&lt;T,<sp/>Tail&gt;,<sp/>T&gt;<sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="738"><highlight class="normal">};</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740" refid="structnonstd_1_1variants_1_1detail_1_1typelist__index__of_3_01typelist_3_01Head_00_01Tail_01_4_00_01T_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Head,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Tail,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__index__of" kindref="compound">typelist_index_of</ref>&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1typelist" kindref="compound">typelist</ref>&lt;Head,<sp/>Tail&gt;,<sp/>T&gt;<sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>TV<sp/>{<sp/>nextVal<sp/>=<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__index__of" kindref="compound">typelist_index_of&lt;Tail, T&gt;::value</ref><sp/>};</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/>nextVal<sp/>==<sp/>-1<sp/>?<sp/>-1<sp/>:<sp/>1<sp/>+<sp/>nextVal<sp/>};</highlight></codeline>
<codeline lineno="746"><highlight class="normal">};</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="comment">//<sp/>typelist<sp/>type<sp/>at<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750" refid="structnonstd_1_1variants_1_1detail_1_1typelist__type__at" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>List,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__type__at" kindref="compound">typelist_type_at</ref>;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752" refid="structnonstd_1_1variants_1_1detail_1_1typelist__type__at_3_01typelist_3_01Head_00_01Tail_01_4_00_010_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Head,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Tail&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__type__at" kindref="compound">typelist_type_at</ref>&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1typelist" kindref="compound">typelist</ref>&lt;Head,<sp/>Tail&gt;,<sp/>0&gt;<sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Head<sp/>type;</highlight></codeline>
<codeline lineno="754"><highlight class="normal">};</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756" refid="structnonstd_1_1variants_1_1detail_1_1typelist__type__at_3_01typelist_3_01Head_00_01Tail_01_4_00_01i_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Head,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Tail,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__type__at" kindref="compound">typelist_type_at</ref>&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1typelist" kindref="compound">typelist</ref>&lt;Head,<sp/>Tail&gt;,<sp/>i&gt;<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__type__at" kindref="compound">typelist_type_at</ref>&lt;Tail,<sp/>i<sp/>-<sp/>1&gt;::type<sp/>type;</highlight></codeline>
<codeline lineno="758"><highlight class="normal">};</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CONFIG_MAX_ALIGN_HACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>align,<sp/>use<sp/>most<sp/>restricted<sp/>type<sp/>for<sp/>alignment:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_UNIQUE(name)<sp/>variant_UNIQUE2(name,<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_UNIQUE2(name,<sp/>line)<sp/>variant_UNIQUE3(name,<sp/>line)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_UNIQUE3(name,<sp/>line)<sp/>name##line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_ALIGN_TYPE(type)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="769"><highlight class="preprocessor"><sp/><sp/>type<sp/>variant_UNIQUE(_t);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="770"><highlight class="preprocessor"><sp/><sp/>struct_t&lt;type&gt;<sp/>variant_UNIQUE(_st)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1struct__t" kindref="compound">struct_t</ref><sp/>{<sp/>T<sp/>_;<sp/>};</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">max_align_t<sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_LONG_LONG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Unknown;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/>Unknown<sp/>(*variant_UNIQUE(_))(Unknown);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>Unknown<sp/>*Unknown::*variant_UNIQUE(_);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>Unknown<sp/>(Unknown::*variant_UNIQUE(_))(Unknown);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>struct_t&lt;Unknown<sp/>(*)(Unknown)&gt;<sp/>variant_UNIQUE(_);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>struct_t&lt;Unknown<sp/>*<sp/>Unknown::*&gt;<sp/>variant_UNIQUE(_);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>struct_t&lt;Unknown<sp/>(Unknown::*)(Unknown)&gt;<sp/>variant_UNIQUE(_);</highlight></codeline>
<codeline lineno="804"><highlight class="normal">};</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>variant_UNIQUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>variant_UNIQUE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>variant_UNIQUE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>variant_ALIGN_TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(variant_CONFIG_ALIGN_AS)<sp/></highlight><highlight class="comment">//<sp/>variant_CONFIG_MAX_ALIGN_HACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>user-specified<sp/>type<sp/>for<sp/>alignment:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_ALIGN_AS(unused)<sp/>variant_CONFIG_ALIGN_AS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>variant_CONFIG_MAX_ALIGN_HACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Determine<sp/>POD<sp/>type<sp/>to<sp/>use<sp/>for<sp/>alignment:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_ALIGN_AS(to_align)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="823"><highlight class="preprocessor"><sp/><sp/>typename<sp/>detail::type_of_size&lt;detail::alignment_types,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="824"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::alignment_of&lt;to_align&gt;::value&gt;::type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">alignment_of;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828" refid="structnonstd_1_1variants_1_1detail_1_1alignment__of__hack" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1alignment__of__hack" kindref="compound">alignment_of_hack</ref><sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>T<sp/>t;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1alignment__of__hack" kindref="compound">alignment_of_hack</ref>();</highlight></codeline>
<codeline lineno="832"><highlight class="normal">};</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834" refid="structnonstd_1_1variants_1_1detail_1_1alignment__logic" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>A,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1alignment__logic" kindref="compound">alignment_logic</ref><sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/>A<sp/>&lt;<sp/>S<sp/>?<sp/>A<sp/>:<sp/>S<sp/>};</highlight></codeline>
<codeline lineno="836"><highlight class="normal">};</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838" refid="structnonstd_1_1variants_1_1detail_1_1alignment__of" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1alignment__of" kindref="compound">alignment_of</ref><sp/>{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>V<sp/>{<sp/>value<sp/>=<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1alignment__logic" kindref="compound">alignment_logic</ref>&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structnonstd_1_1variants_1_1detail_1_1alignment__of__hack" kindref="compound">alignment_of_hack&lt;T&gt;</ref>)<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)&gt;::value<sp/>};</highlight></codeline>
<codeline lineno="840"><highlight class="normal">};</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842" refid="structnonstd_1_1variants_1_1detail_1_1type__of__size" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>List,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1type__of__size" kindref="compound">type_of_size</ref><sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1std11_1_1conditional" kindref="compound">std11::conditional</ref>&lt;N<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>List::head),<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>List::head,</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>type_of_size&lt;typename<sp/>List::tail,<sp/>N&gt;::type&gt;::type<sp/>type;</highlight></codeline>
<codeline lineno="846"><highlight class="normal">};</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848" refid="structnonstd_1_1variants_1_1detail_1_1type__of__size_3_01nulltype_00_01N_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1type__of__size" kindref="compound">type_of_size</ref>&lt;<ref refid="structnonstd_1_1variants_1_1detail_1_1nulltype" kindref="compound">nulltype</ref>,<sp/>N&gt;<sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>variant_CONFIG_ALIGN_AS_FALLBACK<sp/>type;</highlight></codeline>
<codeline lineno="850"><highlight class="normal">};</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852" refid="structnonstd_1_1variants_1_1detail_1_1struct__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1struct__t" kindref="compound">struct_t</ref><sp/>{<sp/>T<sp/>_;<sp/>};</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_ALIGN_TYPE(type)<sp/>typelist<sp/>&lt;<sp/>type,<sp/>typelist<sp/>&lt;<sp/>struct_t&lt;type&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Unknown;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),<sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">),<sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">),<sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*),<sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*),<sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*),</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*),<sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*),<sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*),</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>variant_ALIGN_TYPE(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*),</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>variant_ALIGN_TYPE(Unknown<sp/>(*)(Unknown)),<sp/>variant_ALIGN_TYPE(Unknown<sp/>*Unknown::*),</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>variant_ALIGN_TYPE(Unknown<sp/>(Unknown::*)(Unknown)),</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1nulltype" kindref="compound">nulltype</ref><sp/>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1nulltype" kindref="compound">alignment_types</ref>;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>variant_ALIGN_TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>variant_CONFIG_MAX_ALIGN_HACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t<sp/>hash(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::hash&lt;T&gt;()(v);<sp/>}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t<sp/>hash(T0<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t<sp/>hash(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t<sp/>hash(T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t<sp/>hash(T3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t<sp/>hash(T4<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t<sp/>hash(T5<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t<sp/>hash(T6<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t<sp/>hash(T7<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t<sp/>hash(T8<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t<sp/>hash(T9<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t<sp/>hash(T10<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t<sp/>hash(T11<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t<sp/>hash(T12<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t<sp/>hash(T13<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t<sp/>hash(T14<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t<sp/>hash(T15<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T4,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T5,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T6,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T7,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T8,</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T9,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T10,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T11,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T12,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T13,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T14,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T15&gt;</highlight></codeline>
<codeline lineno="900" refid="structnonstd_1_1variants_1_1detail_1_1helper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1helper" kindref="compound">helper</ref><sp/>{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>type_index_t;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>variant_TL16(<ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T0</ref>,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T1</ref>,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T2</ref>,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T3</ref>,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T4</ref>,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T5</ref>,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T6</ref>,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T7</ref>,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T8</ref>,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T9</ref>,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T10</ref>,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T11</ref>,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T12</ref>,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T13</ref>,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T14</ref>,</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T15</ref>)<sp/>variant_types;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>U<sp/>*as(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data);<sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*as(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*data)<sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">U<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>type_index_t<sp/>to_index_t(std::size_t<sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">type_index_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(index);<sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destroy(type_index_t<sp/>index,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data)<sp/>{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(index)<sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>as&lt;T0&gt;(data)-&gt;~T0();</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>as&lt;T1&gt;(data)-&gt;~T1();</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>as&lt;T2&gt;(data)-&gt;~T2();</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>as&lt;T3&gt;(data)-&gt;~T3();</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>as&lt;T4&gt;(data)-&gt;~T4();</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>as&lt;T5&gt;(data)-&gt;~T5();</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>as&lt;T6&gt;(data)-&gt;~T6();</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>7:</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>as&lt;T7&gt;(data)-&gt;~T7();</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>as&lt;T8&gt;(data)-&gt;~T8();</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>9:</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>as&lt;T9&gt;(data)-&gt;~T9();</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>10:</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>as&lt;T10&gt;(data)-&gt;~T10();</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>11:</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>as&lt;T11&gt;(data)-&gt;~T11();</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>12:</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>as&lt;T12&gt;(data)-&gt;~T12();</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>13:</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>as&lt;T13&gt;(data)-&gt;~T13();</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>14:</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>as&lt;T14&gt;(data)-&gt;~T14();</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>15:</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>as&lt;T15&gt;(data)-&gt;~T15();</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>type_index_t<sp/>construct_t(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/>Args<sp/>&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(data)<sp/>T(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>to_index_t(<ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__index__of" kindref="compound">detail::typelist_index_of&lt;variant_types, T&gt;::value</ref>);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::size_t<sp/>K,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>type_index_t<sp/>construct_i(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/>Args<sp/>&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__type__at" kindref="compound">detail::typelist_type_at&lt;variant_types, K&gt;::type</ref>;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>construct_t&lt;type&gt;(data,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>to_index_t(K);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>type_index_t<sp/>move_construct(type_index_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>from_index,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*from_value,</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*to_value)<sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(from_index)<sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T0</ref>(std::move(*as&lt;T0&gt;(from_value)));</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T1</ref>(std::move(*as&lt;T1&gt;(from_value)));</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T2</ref>(std::move(*as&lt;T2&gt;(from_value)));</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T3</ref>(std::move(*as&lt;T3&gt;(from_value)));</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T4</ref>(std::move(*as&lt;T4&gt;(from_value)));</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T5</ref>(std::move(*as&lt;T5&gt;(from_value)));</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T6</ref>(std::move(*as&lt;T6&gt;(from_value)));</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>7:</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T7</ref>(std::move(*as&lt;T7&gt;(from_value)));</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T8</ref>(std::move(*as&lt;T8&gt;(from_value)));</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>9:</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T9</ref>(std::move(*as&lt;T9&gt;(from_value)));</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>10:</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T10</ref>(std::move(*as&lt;T10&gt;(from_value)));</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>11:</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T11</ref>(std::move(*as&lt;T11&gt;(from_value)));</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>12:</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T12</ref>(std::move(*as&lt;T12&gt;(from_value)));</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>13:</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T13</ref>(std::move(*as&lt;T13&gt;(from_value)));</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>14:</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T14</ref>(std::move(*as&lt;T14&gt;(from_value)));</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>15:</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T15</ref>(std::move(*as&lt;T15&gt;(from_value)));</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>from_index;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>type_index_t<sp/>move_assign(type_index_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>from_index,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*from_value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*to_value)<sp/>{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(from_index)<sp/>{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T0&gt;(to_value)<sp/>=<sp/>std::move(*as&lt;T0&gt;(from_value));</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T1&gt;(to_value)<sp/>=<sp/>std::move(*as&lt;T1&gt;(from_value));</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T2&gt;(to_value)<sp/>=<sp/>std::move(*as&lt;T2&gt;(from_value));</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T3&gt;(to_value)<sp/>=<sp/>std::move(*as&lt;T3&gt;(from_value));</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T4&gt;(to_value)<sp/>=<sp/>std::move(*as&lt;T4&gt;(from_value));</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T5&gt;(to_value)<sp/>=<sp/>std::move(*as&lt;T5&gt;(from_value));</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T6&gt;(to_value)<sp/>=<sp/>std::move(*as&lt;T6&gt;(from_value));</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>7:</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T7&gt;(to_value)<sp/>=<sp/>std::move(*as&lt;T7&gt;(from_value));</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T8&gt;(to_value)<sp/>=<sp/>std::move(*as&lt;T8&gt;(from_value));</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>9:</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T9&gt;(to_value)<sp/>=<sp/>std::move(*as&lt;T9&gt;(from_value));</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>10:</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T10&gt;(to_value)<sp/>=<sp/>std::move(*as&lt;T10&gt;(from_value));</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>11:</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T11&gt;(to_value)<sp/>=<sp/>std::move(*as&lt;T11&gt;(from_value));</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>12:</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T12&gt;(to_value)<sp/>=<sp/>std::move(*as&lt;T12&gt;(from_value));</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>13:</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T13&gt;(to_value)<sp/>=<sp/>std::move(*as&lt;T13&gt;(from_value));</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>14:</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T14&gt;(to_value)<sp/>=<sp/>std::move(*as&lt;T14&gt;(from_value));</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>15:</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T15&gt;(to_value)<sp/>=<sp/>std::move(*as&lt;T15&gt;(from_value));</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>from_index;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>type_index_t<sp/>copy_construct(type_index_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>from_index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*from_value,</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*to_value)<sp/>{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(from_index)<sp/>{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T0</ref>(*as&lt;T0&gt;(from_value));</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T1</ref>(*as&lt;T1&gt;(from_value));</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T2</ref>(*as&lt;T2&gt;(from_value));</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T3</ref>(*as&lt;T3&gt;(from_value));</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T4</ref>(*as&lt;T4&gt;(from_value));</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T5</ref>(*as&lt;T5&gt;(from_value));</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T6</ref>(*as&lt;T6&gt;(from_value));</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>7:</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T7</ref>(*as&lt;T7&gt;(from_value));</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T8</ref>(*as&lt;T8&gt;(from_value));</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>9:</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T9</ref>(*as&lt;T9&gt;(from_value));</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>10:</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T10</ref>(*as&lt;T10&gt;(from_value));</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>11:</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T11</ref>(*as&lt;T11&gt;(from_value));</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>12:</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T12</ref>(*as&lt;T12&gt;(from_value));</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>13:</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T13</ref>(*as&lt;T13&gt;(from_value));</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>14:</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T14</ref>(*as&lt;T14&gt;(from_value));</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>15:</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(to_value)<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T15</ref>(*as&lt;T15&gt;(from_value));</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>from_index;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>type_index_t<sp/>copy_assign(type_index_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>from_index,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*from_value,</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*to_value)<sp/>{</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(from_index)<sp/>{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T0&gt;(to_value)<sp/>=<sp/>*as&lt;T0&gt;(from_value);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T1&gt;(to_value)<sp/>=<sp/>*as&lt;T1&gt;(from_value);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T2&gt;(to_value)<sp/>=<sp/>*as&lt;T2&gt;(from_value);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T3&gt;(to_value)<sp/>=<sp/>*as&lt;T3&gt;(from_value);</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T4&gt;(to_value)<sp/>=<sp/>*as&lt;T4&gt;(from_value);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T5&gt;(to_value)<sp/>=<sp/>*as&lt;T5&gt;(from_value);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T6&gt;(to_value)<sp/>=<sp/>*as&lt;T6&gt;(from_value);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>7:</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T7&gt;(to_value)<sp/>=<sp/>*as&lt;T7&gt;(from_value);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T8&gt;(to_value)<sp/>=<sp/>*as&lt;T8&gt;(from_value);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>9:</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T9&gt;(to_value)<sp/>=<sp/>*as&lt;T9&gt;(from_value);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>10:</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T10&gt;(to_value)<sp/>=<sp/>*as&lt;T10&gt;(from_value);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>11:</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T11&gt;(to_value)<sp/>=<sp/>*as&lt;T11&gt;(from_value);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>12:</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T12&gt;(to_value)<sp/>=<sp/>*as&lt;T12&gt;(from_value);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>13:</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T13&gt;(to_value)<sp/>=<sp/>*as&lt;T13&gt;(from_value);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>14:</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T14&gt;(to_value)<sp/>=<sp/>*as&lt;T14&gt;(from_value);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>15:</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T15&gt;(to_value)<sp/>=<sp/>*as&lt;T15&gt;(from_value);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>from_index;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1201"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Variant:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T4,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T5,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T6,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T7,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T8,</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T9,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T10,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T11,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T12,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T13,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T14,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T15&gt;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>19.7.8<sp/>Class<sp/>monostate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215" refid="classnonstd_1_1variants_1_1monostate" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classnonstd_1_1variants_1_1monostate" kindref="compound">monostate</ref><sp/>{};</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>19.7.9<sp/>monostate<sp/>relational<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>variant_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(<ref refid="classnonstd_1_1variants_1_1monostate" kindref="compound">monostate</ref>,<sp/><ref refid="classnonstd_1_1variants_1_1monostate" kindref="compound">monostate</ref>)<sp/>variant_noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>variant_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;(<ref refid="classnonstd_1_1variants_1_1monostate" kindref="compound">monostate</ref>,<sp/><ref refid="classnonstd_1_1variants_1_1monostate" kindref="compound">monostate</ref>)<sp/>variant_noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>variant_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=(monostate,<sp/>monostate)<sp/>variant_noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>variant_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;=(monostate,<sp/>monostate)<sp/>variant_noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>variant_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(monostate,<sp/>monostate)<sp/>variant_noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>variant_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(monostate,<sp/>monostate)<sp/>variant_noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>19.7.4<sp/>variant<sp/>helper<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>obtain<sp/>the<sp/>size<sp/>of<sp/>the<sp/>variant&apos;s<sp/>list<sp/>of<sp/>alternatives<sp/>at<sp/>compile<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230" refid="structnonstd_1_1variants_1_1variant__size" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1variant__size" kindref="compound">variant_size</ref>;<sp/></highlight><highlight class="comment">/*<sp/>undefined<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T4,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T5,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T6,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T7,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T8,</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T9,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T10,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T11,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T12,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T13,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T14,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T15&gt;</highlight></codeline>
<codeline lineno="1234" refid="structnonstd_1_1variants_1_1variant__size_3_01variant_3_01T0_00_01T1_00_01T2_00_01T3_00_01T4_00_6272b42b753462b1a85131797a1f5377" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1variant__size" kindref="compound">variant_size</ref>&lt;<ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>_<sp/>{</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__size" kindref="compound">detail::typelist_size</ref>&lt;variant_TL16(T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15)&gt;::value</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1239"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP14_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>std::size_t<sp/>variant_size_v<sp/>=<sp/><ref refid="structnonstd_1_1variants_1_1variant__size" kindref="compound">variant_size&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!variant_CONFIG_OMIT_VARIANT_SIZE_V_MACRO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_size_V(T)<sp/>nonstd::variant_size&lt;T&gt;::value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>obtain<sp/>the<sp/>type<sp/>of<sp/>the<sp/>alternative<sp/>specified<sp/>by<sp/>its<sp/>index,<sp/>at<sp/>compile<sp/>time:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251" refid="structnonstd_1_1variants_1_1variant__alternative" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1variant__alternative" kindref="compound">variant_alternative</ref>;<sp/></highlight><highlight class="comment">/*<sp/>undefined<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::size_t<sp/>K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T4,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T5,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T6,</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T7,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T8,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T9,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T10,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T11,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T12,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T13,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T14,</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T15&gt;</highlight></codeline>
<codeline lineno="1256" refid="structnonstd_1_1variants_1_1variant__alternative_3_01K_00_01variant_3_01T0_00_01T1_00_01T2_00_01d205f92b9568fe59dfd6319e341bbc8f" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1variant__alternative" kindref="compound">variant_alternative</ref>&lt;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>K,<sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__type__at" kindref="compound">detail::typelist_type_at</ref>&lt;variant_TL16(T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15),</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K&gt;::type<sp/>type;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">variant_alternative_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1variant__alternative" kindref="compound">variant_alternative&lt;K, T&gt;::type</ref>;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!variant_CONFIG_OMIT_VARIANT_ALTERNATIVE_T_MACRO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>variant_alternative_T(K,<sp/>T)<sp/>typename<sp/>nonstd::variant_alternative&lt;K,<sp/>T&gt;::type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NTS:implement<sp/>specializes<sp/>the<sp/>std::uses_allocator<sp/>type<sp/>trait</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::uses_allocator&lt;nonstd::variant&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="comment">//<sp/>index<sp/>of<sp/>the<sp/>variant<sp/>in<sp/>the<sp/>invalid<sp/>state<sp/>(constant)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal">variant_constexpr<sp/>std::size_t<sp/>variant_npos<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>variant_npos<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!variant_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight><highlight class="comment">//<sp/>19.7.11<sp/>Class<sp/>bad_variant_access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">bad_variant_access<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::exception<sp/>{</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*what()<sp/>const<sp/>variant_noexcept<sp/>variant_override</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*what()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>throw()</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;bad<sp/>variant<sp/>access&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>variant_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight><highlight class="comment">//<sp/>19.7.3<sp/>Class<sp/>template<sp/>variant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1<sp/>=<sp/>detail::T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2<sp/>=<sp/>detail::T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3<sp/>=<sp/>detail::T3,</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T4<sp/>=<sp/>detail::T4,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T5<sp/>=<sp/>detail::T5,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T6<sp/>=<sp/>detail::T6,</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T7<sp/>=<sp/>detail::T7,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T8<sp/>=<sp/>detail::T8,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T9<sp/>=<sp/>detail::T9,</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T10<sp/>=<sp/>detail::T10,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T11<sp/>=<sp/>detail::T11,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T12<sp/>=<sp/>detail::T12,</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T13<sp/>=<sp/>detail::T13,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T14<sp/>=<sp/>detail::T14,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T15<sp/>=<sp/>detail::T15&gt;</highlight></codeline>
<codeline lineno="1308" refid="classnonstd_1_1variants_1_1variant" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1helper" kindref="compound">detail::helper&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15&gt;</ref></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1helper" kindref="compound">helper_type</ref>;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>variant_TL16(T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T15)<sp/>variant_types;</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>19.7.3.1<sp/>Constructors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>()<sp/>:<sp/>type_index(0)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T0();<sp/>}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T0<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t0)<sp/>:<sp/>type_index(0)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T0(t0);<sp/>}</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t1)<sp/>:<sp/>type_index(1)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T1(t1);<sp/>}</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t2)<sp/>:<sp/>type_index(2)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T2(t2);<sp/>}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t3)<sp/>:<sp/>type_index(3)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T3(t3);<sp/>}</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T4<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t4)<sp/>:<sp/>type_index(4)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T4(t4);<sp/>}</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T5<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t5)<sp/>:<sp/>type_index(5)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T5(t5);<sp/>}</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T6<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t6)<sp/>:<sp/>type_index(6)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T6(t6);<sp/>}</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T7<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t7)<sp/>:<sp/>type_index(7)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T7(t7);<sp/>}</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T8<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t8)<sp/>:<sp/>type_index(8)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T8(t8);<sp/>}</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T9<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t9)<sp/>:<sp/>type_index(9)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T9(t9);<sp/>}</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T10<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t10)<sp/>:<sp/>type_index(10)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T10(t10);<sp/>}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T11<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t11)<sp/>:<sp/>type_index(11)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T11(t11);<sp/>}</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T12<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t12)<sp/>:<sp/>type_index(12)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T12(t12);<sp/>}</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T13<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t13)<sp/>:<sp/>type_index(13)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T13(t13);<sp/>}</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T14<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t14)<sp/>:<sp/>type_index(14)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T14(t14);<sp/>}</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T15<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t15)<sp/>:<sp/>type_index(15)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T15(t15);<sp/>}</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T0<sp/>&amp;&amp;t0)<sp/>:<sp/>type_index(0)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T0(std::move(t0));<sp/>}</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T1<sp/>&amp;&amp;t1)<sp/>:<sp/>type_index(1)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T1(std::move(t1));<sp/>}</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T2<sp/>&amp;&amp;t2)<sp/>:<sp/>type_index(2)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T2(std::move(t2));<sp/>}</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T3<sp/>&amp;&amp;t3)<sp/>:<sp/>type_index(3)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T3(std::move(t3));<sp/>}</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T4<sp/>&amp;&amp;t4)<sp/>:<sp/>type_index(4)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T4(std::move(t4));<sp/>}</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T5<sp/>&amp;&amp;t5)<sp/>:<sp/>type_index(5)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T5(std::move(t5));<sp/>}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T6<sp/>&amp;&amp;t6)<sp/>:<sp/>type_index(6)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T6(std::move(t6));<sp/>}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T7<sp/>&amp;&amp;t7)<sp/>:<sp/>type_index(7)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T7(std::move(t7));<sp/>}</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T8<sp/>&amp;&amp;t8)<sp/>:<sp/>type_index(8)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T8(std::move(t8));<sp/>}</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T9<sp/>&amp;&amp;t9)<sp/>:<sp/>type_index(9)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T9(std::move(t9));<sp/>}</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T10<sp/>&amp;&amp;t10)<sp/>:<sp/>type_index(10)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T10(std::move(t10));<sp/>}</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T11<sp/>&amp;&amp;t11)<sp/>:<sp/>type_index(11)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T11(std::move(t11));<sp/>}</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T12<sp/>&amp;&amp;t12)<sp/>:<sp/>type_index(12)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T12(std::move(t12));<sp/>}</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T13<sp/>&amp;&amp;t13)<sp/>:<sp/>type_index(13)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T13(std::move(t13));<sp/>}</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T14<sp/>&amp;&amp;t14)<sp/>:<sp/>type_index(14)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T14(std::move(t14));<sp/>}</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(T15<sp/>&amp;&amp;t15)<sp/>:<sp/>type_index(15)<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T15(std::move(t15));<sp/>}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(<ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other)<sp/>:<sp/>type_index(other.type_index)<sp/>{</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)helper_type::copy_construct(other.type_index,<sp/>other.ptr(),<sp/>ptr());</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(<ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;&amp;other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_nothrow_move_constructible&lt;T0&gt;::value<sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;T1&gt;::value</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;T2&gt;::value<sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T3&gt;::value<sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;T4&gt;::value</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;T5&gt;::value<sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T6&gt;::value<sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;T7&gt;::value</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;T8&gt;::value</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;T9&gt;::value</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;T10&gt;::value</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;T11&gt;::value</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;T12&gt;::value</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;T13&gt;::value</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;T14&gt;::value</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;T15&gt;::value)</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>type_index(other.type_index)<sp/>{</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)helper_type::move_construct(other.type_index,<sp/>other.ptr(),<sp/>ptr());</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>K&gt;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type_at_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__type__at" kindref="compound">detail::typelist_type_at&lt;variant_types, K&gt;::type</ref>;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args<sp/>variant_REQUIRES_T(std::is_constructible&lt;T,<sp/>Args...&gt;::value)&gt;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(nonstd_lite_in_place_type_t(T),<sp/>Args<sp/>&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/>type_index<sp/>=<sp/>variant_npos_internal();</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>type_index<sp/>=<sp/>helper_type::template<sp/>construct_t&lt;T&gt;(ptr(),<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">U,</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args<sp/>variant_REQUIRES_T(</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_constructible&lt;T,<sp/>std::initializer_list&lt;U&gt;<sp/>&amp;,<sp/>Args...&gt;::value)&gt;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(nonstd_lite_in_place_type_t(T),<sp/>std::initializer_list&lt;U&gt;<sp/>il,<sp/>Args<sp/>&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/>type_index<sp/>=<sp/>variant_npos_internal();</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/>type_index<sp/>=<sp/>helper_type::template<sp/>construct_t&lt;T&gt;(ptr(),<sp/>il,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::size_t<sp/>K,</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args<sp/>variant_REQUIRES_T(std::is_constructible&lt;type_at_t&lt;K&gt;,<sp/>Args...&gt;::value)&gt;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(nonstd_lite_in_place_index_t(K),<sp/>Args<sp/>&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/>type_index<sp/>=<sp/>variant_npos_internal();</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/>type_index<sp/>=<sp/>helper_type::template<sp/>construct_i&lt;K&gt;(ptr(),<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">U,</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args<sp/>variant_REQUIRES_T(</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_constructible&lt;type_at_t&lt;K&gt;,<sp/>std::initializer_list&lt;U&gt;<sp/>&amp;,<sp/>Args...&gt;::value)&gt;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>(nonstd_lite_in_place_index_t(K),<sp/>std::initializer_list&lt;U&gt;<sp/>il,<sp/>Args<sp/>&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/>type_index<sp/>=<sp/>variant_npos_internal();</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/>type_index<sp/>=<sp/>helper_type::template<sp/>construct_i&lt;K&gt;(ptr(),<sp/>il,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>19.7.3.2<sp/>Destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">~variant</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!valueless_by_exception())<sp/>{</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>helper_type::destroy(type_index,<sp/>ptr());</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>19.7.3.3<sp/>Assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(<ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copy_assign(other);<sp/>}</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(<ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;&amp;other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_nothrow_move_assignable&lt;T0&gt;::value<sp/>&amp;&amp;std::is_nothrow_move_assignable&lt;T1&gt;::value</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_nothrow_move_assignable&lt;T2&gt;::value<sp/>&amp;&amp;std::is_nothrow_move_assignable&lt;T3&gt;::value</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_nothrow_move_assignable&lt;T4&gt;::value<sp/>&amp;&amp;std::is_nothrow_move_assignable&lt;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T5&gt;::value<sp/>&amp;&amp;std::is_nothrow_move_assignable&lt;T6&gt;::value</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_nothrow_move_assignable&lt;T7&gt;::value<sp/>&amp;&amp;std::is_nothrow_move_assignable&lt;</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T8&gt;::value<sp/>&amp;&amp;std::is_nothrow_move_assignable&lt;T9&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_nothrow_move_assignable&lt;T10&gt;::value<sp/>&amp;&amp;std::is_nothrow_move_assignable&lt;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T11&gt;::value<sp/>&amp;&amp;std::is_nothrow_move_assignable&lt;T12&gt;::value</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_nothrow_move_assignable&lt;T13&gt;::value</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_nothrow_move_assignable&lt;T14&gt;::value</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_nothrow_move_assignable&lt;T15&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>move_assign(std::move(other));</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T0<sp/>&amp;&amp;t0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;0&gt;(std::move(t0));<sp/>}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T1<sp/>&amp;&amp;t1)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;1&gt;(std::move(t1));<sp/>}</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T2<sp/>&amp;&amp;t2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;2&gt;(std::move(t2));<sp/>}</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T3<sp/>&amp;&amp;t3)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;3&gt;(std::move(t3));<sp/>}</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T4<sp/>&amp;&amp;t4)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;4&gt;(std::move(t4));<sp/>}</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T5<sp/>&amp;&amp;t5)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;5&gt;(std::move(t5));<sp/>}</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T6<sp/>&amp;&amp;t6)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;6&gt;(std::move(t6));<sp/>}</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T7<sp/>&amp;&amp;t7)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;7&gt;(std::move(t7));<sp/>}</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T8<sp/>&amp;&amp;t8)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;8&gt;(std::move(t8));<sp/>}</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T9<sp/>&amp;&amp;t9)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;9&gt;(std::move(t9));<sp/>}</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T10<sp/>&amp;&amp;t10)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;10&gt;(std::move(t10));<sp/>}</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T11<sp/>&amp;&amp;t11)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;11&gt;(std::move(t11));<sp/>}</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T12<sp/>&amp;&amp;t12)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;12&gt;(std::move(t12));<sp/>}</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T13<sp/>&amp;&amp;t13)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;13&gt;(std::move(t13));<sp/>}</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T14<sp/>&amp;&amp;t14)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;14&gt;(std::move(t14));<sp/>}</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T15<sp/>&amp;&amp;t15)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;15&gt;(std::move(t15));<sp/>}</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T0<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;0&gt;(t0);<sp/>}</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t1)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;1&gt;(t1);<sp/>}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;2&gt;(t2);<sp/>}</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t3)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;3&gt;(t3);<sp/>}</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T4<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t4)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;4&gt;(t4);<sp/>}</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T5<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t5)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;5&gt;(t5);<sp/>}</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T6<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t6)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;6&gt;(t6);<sp/>}</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T7<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t7)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;7&gt;(t7);<sp/>}</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T8<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t8)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;8&gt;(t8);<sp/>}</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T9<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t9)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;9&gt;(t9);<sp/>}</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T10<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t10)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;10&gt;(t10);<sp/>}</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T11<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t11)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;11&gt;(t11);<sp/>}</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T12<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t12)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;12&gt;(t12);<sp/>}</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T13<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t13)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;13&gt;(t13);<sp/>}</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T14<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t14)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;14&gt;(t14);<sp/>}</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;operator=(T15<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;t15)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assign_value&lt;15&gt;(t15);<sp/>}</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/>std::size_t<sp/>index()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>variant_npos_internal()<sp/>==<sp/>type_index<sp/>?<sp/>variant_npos</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(type_index);</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>19.7.3.4<sp/>Modifiers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args<sp/>variant_REQUIRES_T(std::is_constructible&lt;T,<sp/>Args...&gt;::value)&gt;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/>T<sp/>&amp;emplace(Args<sp/>&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/>helper_type::destroy(type_index,<sp/>ptr());</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>type_index<sp/>=<sp/>variant_npos_internal();</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/>type_index<sp/>=<sp/>helper_type::template<sp/>construct_t&lt;T&gt;(ptr(),<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*as&lt;T&gt;();</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">U,</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args<sp/>variant_REQUIRES_T(</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_constructible&lt;T,<sp/>std::initializer_list&lt;U&gt;<sp/>&amp;,<sp/>Args...&gt;::value)&gt;</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/>T<sp/>&amp;emplace(std::initializer_list&lt;U&gt;<sp/>il,<sp/>Args<sp/>&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/>helper_type::destroy(type_index,<sp/>ptr());</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/>type_index<sp/>=<sp/>variant_npos_internal();</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/>type_index<sp/>=<sp/>helper_type::template<sp/>construct_t&lt;T&gt;(ptr(),<sp/>il,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*as&lt;T&gt;();</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>K,</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args<sp/>variant_REQUIRES_T(std::is_constructible&lt;type_at_t&lt;K&gt;,<sp/>Args...&gt;::value)&gt;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/>variant_alternative_t&lt;K,<sp/>variant&gt;<sp/>&amp;emplace(Args<sp/>&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>emplace&lt;type_at_t&lt;K&gt;&gt;(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">U,</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args<sp/>variant_REQUIRES_T(</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_constructible&lt;type_at_t&lt;K&gt;,<sp/>std::initializer_list&lt;U&gt;<sp/>&amp;,<sp/>Args...&gt;::value)&gt;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/>variant_alternative_t&lt;K,<sp/>variant&gt;<sp/>&amp;emplace(std::initializer_list&lt;U&gt;<sp/>il,<sp/>Args<sp/>&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>emplace&lt;type_at_t&lt;K&gt;&gt;(il,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>19.7.3.5<sp/>Value<sp/>status</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valueless_by_exception()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_index<sp/>==<sp/>variant_npos_internal();<sp/>}</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>19.7.3.6<sp/>Swap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(<ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;other)</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_nothrow_move_constructible&lt;T0&gt;::value<sp/>&amp;&amp;std17::is_nothrow_swappable&lt;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T0&gt;::value<sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;T1&gt;::value</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std17::is_nothrow_swappable&lt;T1&gt;::value<sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T2&gt;::value<sp/>&amp;&amp;std17::is_nothrow_swappable&lt;T2&gt;::value</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;T3&gt;::value<sp/>&amp;&amp;std17::is_nothrow_swappable&lt;</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T3&gt;::value<sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;T4&gt;::value</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std17::is_nothrow_swappable&lt;T4&gt;::value<sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T5&gt;::value<sp/>&amp;&amp;std17::is_nothrow_swappable&lt;T5&gt;::value<sp/>&amp;&amp;std::</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_nothrow_move_constructible&lt;T6&gt;::value<sp/>&amp;&amp;std17::is_nothrow_swappable&lt;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T6&gt;::value<sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;T7&gt;::value<sp/>&amp;&amp;std17::</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_nothrow_swappable&lt;T7&gt;::value<sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T8&gt;::value<sp/>&amp;&amp;std17::is_nothrow_swappable&lt;T8&gt;::value</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T9&gt;::value<sp/>&amp;&amp;std17::is_nothrow_swappable&lt;T9&gt;::value</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T10&gt;::value<sp/>&amp;&amp;std17::is_nothrow_swappable&lt;T10&gt;::value</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T11&gt;::value<sp/>&amp;&amp;std17::is_nothrow_swappable&lt;T11&gt;::value</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;T12&gt;::value</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std17::is_nothrow_swappable&lt;T12&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_nothrow_move_constructible&lt;T13&gt;::value</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std17::is_nothrow_swappable&lt;T13&gt;::value</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T14&gt;::value</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std17::is_nothrow_swappable&lt;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T14&gt;::value<sp/>&amp;&amp;std::</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_nothrow_move_constructible&lt;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T15&gt;::value<sp/>&amp;&amp;std17::</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_nothrow_swappable&lt;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T15&gt;::value</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1563"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valueless_by_exception()<sp/>&amp;&amp;<sp/>other.valueless_by_exception())<sp/>{</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>effect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_index<sp/>==<sp/>other.type_index)<sp/>{</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;swap_value(type_index,<sp/>other);</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>tmp(std::move(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>std::move(other);</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>other<sp/>=<sp/>std::move(tmp);</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>tmp(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>other<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>non-standard:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>variant_constexpr<sp/>std::size_t<sp/>index_of()<sp/>variant_noexcept<sp/>{</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>to_size_t(</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__index__of" kindref="compound">detail::typelist_index_of</ref>&lt;variant_types,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std11::remove_cv&lt;T&gt;::type&gt;::value);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/>&amp;get()<sp/>{</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(index_of&lt;T&gt;()<sp/>==<sp/>index());</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index_of&lt;T&gt;()<sp/>!=<sp/>index())<sp/>{</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>bad_variant_access();</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*as&lt;T&gt;();</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;get()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(index_of&lt;T&gt;()<sp/>==<sp/>index());</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index_of&lt;T&gt;()<sp/>!=<sp/>index())<sp/>{</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>bad_variant_access();</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*as&lt;const<sp/>T&gt;();</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>K&gt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1variant__alternative" kindref="compound">variant_alternative&lt;K, variant&gt;::type</ref><sp/>&amp;get()<sp/>{</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>get&lt;typename<sp/>detail::typelist_type_at&lt;variant_types,<sp/>K&gt;::type&gt;();</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>K&gt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1variant__alternative" kindref="compound">variant_alternative&lt;K, variant&gt;::type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;get()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>get&lt;typename<sp/>detail::typelist_type_at&lt;variant_types,<sp/>K&gt;::type&gt;();</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>helper_type::type_index_t<sp/>type_index_t;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr()<sp/>variant_noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;data;<sp/>}</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*ptr()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>variant_noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;data;<sp/>}</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;<sp/>U<sp/>*as()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr());<sp/>}</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;<sp/>U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*as()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U<sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr());<sp/>}</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>variant_constexpr<sp/>std::size_t<sp/>to_size_t(U<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(index);</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/>variant_constexpr<sp/>type_index_t<sp/>variant_npos_internal()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>variant_noexcept<sp/>{</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">type_index_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;copy_assign(<ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valueless_by_exception()<sp/>&amp;&amp;<sp/>other.valueless_by_exception())<sp/>{</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>effect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!valueless_by_exception()<sp/>&amp;&amp;<sp/>other.valueless_by_exception())<sp/>{</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>helper_type::destroy(type_index,<sp/>ptr());</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_index<sp/>=<sp/>variant_npos_internal();</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index()<sp/>==<sp/>other.index())<sp/>{</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_index<sp/>=<sp/>helper_type::copy_assign(other.type_index,<sp/>other.ptr(),<sp/>ptr());</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>helper_type::destroy(type_index,<sp/>ptr());</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_index<sp/>=<sp/>variant_npos_internal();</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_index<sp/>=<sp/>helper_type::copy_construct(other.type_index,<sp/>other.ptr(),<sp/>ptr());</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;move_assign(<ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valueless_by_exception()<sp/>&amp;&amp;<sp/>other.valueless_by_exception())<sp/>{</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>effect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!valueless_by_exception()<sp/>&amp;&amp;<sp/>other.valueless_by_exception())<sp/>{</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>helper_type::destroy(type_index,<sp/>ptr());</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_index<sp/>=<sp/>variant_npos_internal();</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index()<sp/>==<sp/>other.index())<sp/>{</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_index<sp/>=<sp/>helper_type::move_assign(other.type_index,<sp/>other.ptr(),<sp/>ptr());</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>helper_type::destroy(type_index,<sp/>ptr());</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_index<sp/>=<sp/>variant_npos_internal();</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_index<sp/>=<sp/>helper_type::move_construct(other.type_index,<sp/>other.ptr(),<sp/>ptr());</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;assign_value(T<sp/>&amp;&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index()<sp/>==<sp/>K)<sp/>{</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T&gt;()<sp/>=<sp/>std::forward&lt;T&gt;(value);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>helper_type::destroy(type_index,<sp/>ptr());</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_index<sp/>=<sp/>variant_npos_internal();</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T(std::forward&lt;T&gt;(value));</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_index<sp/>=<sp/>K;</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;assign_value(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index()<sp/>==<sp/>K)<sp/>{</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*as&lt;T&gt;()<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>helper_type::destroy(type_index,<sp/>ptr());</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_index<sp/>=<sp/>variant_npos_internal();</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(ptr())<sp/>T(value);</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type_index<sp/>=<sp/>K;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap_value(type_index_t<sp/>index,<sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref><sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::swap;</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(index)<sp/>{</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>swap(this-&gt;get&lt;0&gt;(),<sp/>other.get&lt;0&gt;());</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>swap(this-&gt;get&lt;1&gt;(),<sp/>other.get&lt;1&gt;());</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>swap(this-&gt;get&lt;2&gt;(),<sp/>other.get&lt;2&gt;());</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>swap(this-&gt;get&lt;3&gt;(),<sp/>other.get&lt;3&gt;());</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>swap(this-&gt;get&lt;4&gt;(),<sp/>other.get&lt;4&gt;());</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>swap(this-&gt;get&lt;5&gt;(),<sp/>other.get&lt;5&gt;());</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>swap(this-&gt;get&lt;6&gt;(),<sp/>other.get&lt;6&gt;());</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>7:</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>swap(this-&gt;get&lt;7&gt;(),<sp/>other.get&lt;7&gt;());</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>swap(this-&gt;get&lt;8&gt;(),<sp/>other.get&lt;8&gt;());</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>9:</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>swap(this-&gt;get&lt;9&gt;(),<sp/>other.get&lt;9&gt;());</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>10:</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>swap(this-&gt;get&lt;10&gt;(),<sp/>other.get&lt;10&gt;());</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>11:</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>swap(this-&gt;get&lt;11&gt;(),<sp/>other.get&lt;11&gt;());</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>12:</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>swap(this-&gt;get&lt;12&gt;(),<sp/>other.get&lt;12&gt;());</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>13:</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>swap(this-&gt;get&lt;13&gt;(),<sp/>other.get&lt;13&gt;());</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>14:</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>swap(this-&gt;get&lt;14&gt;(),<sp/>other.get&lt;14&gt;());</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>15:</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>swap(this-&gt;get&lt;15&gt;(),<sp/>other.get&lt;15&gt;());</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>data_size<sp/>=<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__max" kindref="compound">detail::typelist_max&lt;variant_types&gt;::value</ref><sp/>};</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>data_align<sp/>=<sp/>detail::typelist_max_alignof&lt;variant_types&gt;::value<sp/>};</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"></highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">aligned_storage_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::aligned_storage&lt;data_size,<sp/>data_align&gt;::type;</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/>aligned_storage_t<sp/>data;</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>variant_CONFIG_MAX_ALIGN_HACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>data[data_size];</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/>}<sp/>aligned_storage_t;</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/>detail::max_align_t<sp/>hack;</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/>aligned_storage_t<sp/>data;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1typelist__max" kindref="compound">detail::typelist_max&lt;variant_types&gt;::type</ref><sp/>max_type;</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>variant_ALIGN_AS(max_type)<sp/>align_as_type;</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/>align_as_type<sp/>data[1<sp/>+<sp/>(data_size<sp/>-<sp/>1)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(align_as_type)];</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/>}<sp/>aligned_storage_t;</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/>aligned_storage_t<sp/>data;</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>#<sp/><sp/><sp/>undef<sp/>variant_ALIGN_AS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>variant_CONFIG_MAX_ALIGN_HACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/>type_index_t<sp/>type_index;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight><highlight class="comment">//<sp/>19.7.5<sp/>Value<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T4,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T5,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T6,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T7,</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T8,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T9,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T10,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T11,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T12,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T13,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T14,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T15&gt;</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>holds_alternative(</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v)</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/>variant_noexcept<sp/>{</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.index()<sp/>==<sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant</ref>&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T15&gt;::template<sp/>index_of&lt;T&gt;();</highlight></codeline>
<codeline lineno="1799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">R,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T4,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T5,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T6,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T7,</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T8,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T9,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T10,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T11,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T12,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T13,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T14,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T15&gt;</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>R<sp/>&amp;get(<ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15&gt;</ref><sp/>&amp;v,</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonstd_lite_in_place_type_t(R)<sp/>=<sp/>nonstd_lite_in_place_type(R))<sp/>{</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.template<sp/>get&lt;R&gt;();</highlight></codeline>
<codeline lineno="1806"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">R,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T4,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T5,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T6,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T7,</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T8,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T9,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T10,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T11,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T12,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T13,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T14,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T15&gt;</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>R<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;</highlight></codeline>
<codeline lineno="1811"><highlight class="normal">get(variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v,</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/>nonstd_lite_in_place_type_t(R)<sp/>=<sp/>nonstd_lite_in_place_type(R))<sp/>{</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.template<sp/>get&lt;R&gt;();</highlight></codeline>
<codeline lineno="1814"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::size_t<sp/>K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T4,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T5,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T6,</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T7,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T8,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T9,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T10,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T11,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T12,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T13,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T14,</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T15&gt;</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>variant_alternative&lt;</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/>K,<sp/>variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;&gt;::type<sp/>&amp;</highlight></codeline>
<codeline lineno="1821"><highlight class="normal">get(variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;<sp/>&amp;v,</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/>nonstd_lite_in_place_index_t(K)<sp/>=<sp/>nonstd_lite_in_place_index(K))<sp/>{</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/>assert(K<sp/>==<sp/>v.index());</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(K<sp/>!=<sp/>v.index())<sp/>{</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>bad_variant_access();</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.template<sp/>get&lt;K&gt;();</highlight></codeline>
<codeline lineno="1831"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::size_t<sp/>K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T4,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T5,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T6,</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T7,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T8,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T9,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T10,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T11,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T12,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T13,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T14,</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T15&gt;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>variant_alternative&lt;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/>K,<sp/>variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;&gt;::type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;</highlight></codeline>
<codeline lineno="1838"><highlight class="normal">get(variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v,</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/>nonstd_lite_in_place_index_t(K)<sp/>=<sp/>nonstd_lite_in_place_index(K))<sp/>{</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/>assert(K<sp/>==<sp/>v.index());</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(K<sp/>!=<sp/>v.index())<sp/>{</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>bad_variant_access();</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.template<sp/>get&lt;K&gt;();</highlight></codeline>
<codeline lineno="1848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">R,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T4,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T5,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T6,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T7,</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T8,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T9,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T10,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T11,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T12,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T13,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T14,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T15&gt;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>R<sp/>&amp;&amp;get(variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;<sp/>&amp;&amp;v,</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonstd_lite_in_place_type_t(R)<sp/>=<sp/>nonstd_lite_in_place_type(R))<sp/>{</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(v.template<sp/>get&lt;R&gt;());</highlight></codeline>
<codeline lineno="1857"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">R,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T4,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T5,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T6,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T7,</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T8,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T9,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T10,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T11,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T12,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T13,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T14,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T15&gt;</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>R<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1862"><highlight class="normal">get(variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;&amp;v,</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/>nonstd_lite_in_place_type_t(R)<sp/>=<sp/>nonstd_lite_in_place_type(R))<sp/>{</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(v.template<sp/>get&lt;R&gt;());</highlight></codeline>
<codeline lineno="1865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::size_t<sp/>K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T4,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T5,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T6,</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T7,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T8,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T9,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T10,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T11,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T12,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T13,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T14,</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T15&gt;</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>variant_alternative&lt;</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/>K,<sp/>variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;&gt;::type<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1872"><highlight class="normal">get(variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;<sp/>&amp;&amp;v,</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/>nonstd_lite_in_place_index_t(K)<sp/>=<sp/>nonstd_lite_in_place_index(K))<sp/>{</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/>assert(K<sp/>==<sp/>v.index());</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(K<sp/>!=<sp/>v.index())<sp/>{</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>bad_variant_access();</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(v.template<sp/>get&lt;K&gt;());</highlight></codeline>
<codeline lineno="1882"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::size_t<sp/>K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T4,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T5,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T6,</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T7,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T8,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T9,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T10,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T11,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T12,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T13,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T14,</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T15&gt;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>variant_alternative&lt;</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/>K,<sp/>variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;&gt;::type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1889"><highlight class="normal">get(variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;&amp;v,</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/>nonstd_lite_in_place_index_t(K)<sp/>=<sp/>nonstd_lite_in_place_index(K))<sp/>{</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/>assert(K<sp/>==<sp/>v.index());</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(K<sp/>!=<sp/>v.index())<sp/>{</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>bad_variant_access();</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(v.template<sp/>get&lt;K&gt;());</highlight></codeline>
<codeline lineno="1899"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T4,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T5,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T6,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T7,</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T8,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T9,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T10,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T11,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T12,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T13,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T14,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T15&gt;</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std11::add_pointer&lt;T&gt;::type</highlight></codeline>
<codeline lineno="1906"><highlight class="normal">get_if(variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;<sp/>*pv,</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonstd_lite_in_place_type_t(T)<sp/>=<sp/>nonstd_lite_in_place_type(T))<sp/>{</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pv-&gt;index()<sp/>==<sp/>variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T15&gt;::template<sp/>index_of&lt;T&gt;())</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>&amp;get&lt;T&gt;(*pv)</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>variant_nullptr;</highlight></codeline>
<codeline lineno="1912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T4,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T5,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T6,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T7,</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T8,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T9,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T10,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T11,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T12,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T13,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T14,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T15&gt;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std11::add_pointer&lt;const<sp/>T&gt;::type</highlight></codeline>
<codeline lineno="1917"><highlight class="normal">get_if(variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*pv,</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonstd_lite_in_place_type_t(T)<sp/>=<sp/>nonstd_lite_in_place_type(T))<sp/>{</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pv-&gt;index()<sp/>==<sp/>variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T15&gt;::template<sp/>index_of&lt;T&gt;())</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>&amp;get&lt;T&gt;(*pv)</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>variant_nullptr;</highlight></codeline>
<codeline lineno="1923"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"></highlight></codeline>
<codeline lineno="1925"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::size_t<sp/>K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T4,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T5,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T6,</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T7,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T8,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T9,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T10,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T11,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T12,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T13,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T14,</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T15&gt;</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std11::add_pointer&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>variant_alternative&lt;</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/>K,<sp/>variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;&gt;::type&gt;::type</highlight></codeline>
<codeline lineno="1930"><highlight class="normal">get_if(variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;<sp/>*pv,</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonstd_lite_in_place_index_t(K)<sp/>=<sp/>nonstd_lite_in_place_index(K))<sp/>{</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pv-&gt;index()<sp/>==<sp/>K)<sp/>?<sp/>&amp;get&lt;K&gt;(*pv)<sp/>:<sp/>variant_nullptr;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::size_t<sp/>K,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T4,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T5,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T6,</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T7,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T8,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T9,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T10,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T11,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T12,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T13,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T14,</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T15&gt;</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std11::add_pointer&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>variant_alternative&lt;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/>K,<sp/>variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;&gt;::type&gt;::type</highlight></codeline>
<codeline lineno="1940"><highlight class="normal">get_if(variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*pv,</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonstd_lite_in_place_index_t(K)<sp/>=<sp/>nonstd_lite_in_place_index(K))<sp/>{</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pv-&gt;index()<sp/>==<sp/>K)<sp/>?<sp/>&amp;get&lt;K&gt;(*pv)<sp/>:<sp/>variant_nullptr;</highlight></codeline>
<codeline lineno="1943"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"></highlight></codeline>
<codeline lineno="1945"><highlight class="normal"></highlight><highlight class="comment">//<sp/>19.7.10<sp/>Specialized<sp/>algorithms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T4,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T5,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T6,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T7,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T8,</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T9,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T10,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T11,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T12,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T13,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T14,</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T15</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variant_REQUIRES_T(</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_move_constructible&lt;T0&gt;::value<sp/>&amp;&amp;std17::is_swappable&lt;</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T0&gt;::value<sp/>&amp;&amp;std::is_move_constructible&lt;T1&gt;::value<sp/>&amp;&amp;std17::is_swappable&lt;T1&gt;::value</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_move_constructible&lt;T2&gt;::value<sp/>&amp;&amp;std17::is_swappable&lt;</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T2&gt;::value<sp/>&amp;&amp;std::is_move_constructible&lt;T3&gt;::value<sp/>&amp;&amp;std17::is_swappable&lt;T3&gt;::</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>&amp;&amp;std::is_move_constructible&lt;T4&gt;::value<sp/>&amp;&amp;std17::is_swappable&lt;T4&gt;::value</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_move_constructible&lt;T5&gt;::value<sp/>&amp;&amp;std17::is_swappable&lt;</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T5&gt;::value<sp/>&amp;&amp;std::is_move_constructible&lt;T6&gt;::value</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std17::is_swappable&lt;T6&gt;::value<sp/>&amp;&amp;std::is_move_constructible&lt;</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T7&gt;::value<sp/>&amp;&amp;std17::is_swappable&lt;T7&gt;::value</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_move_constructible&lt;T8&gt;::value<sp/>&amp;&amp;std17::is_swappable&lt;</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T8&gt;::value<sp/>&amp;&amp;std::is_move_constructible&lt;T9&gt;::value</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std17::is_swappable&lt;T9&gt;::value<sp/>&amp;&amp;std::is_move_constructible&lt;</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T10&gt;::value<sp/>&amp;&amp;std17::is_swappable&lt;T10&gt;::value<sp/>&amp;&amp;std::</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_move_constructible&lt;T11&gt;::value<sp/>&amp;&amp;std17::is_swappable&lt;</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T11&gt;::value<sp/>&amp;&amp;std::is_move_constructible&lt;T12&gt;::value</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std17::is_swappable&lt;</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T12&gt;::value<sp/>&amp;&amp;std::is_move_constructible&lt;T13&gt;::value</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std17::is_swappable&lt;T13&gt;::value</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_move_constructible&lt;T14&gt;::value</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std17::is_swappable&lt;T14&gt;::value</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std::is_move_constructible&lt;T15&gt;::value</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;std17::is_swappable&lt;T15&gt;::value)</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;<sp/>&amp;a,</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;<sp/>&amp;b)</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(</highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(a.swap(b)))</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1982"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/>a.swap(b);</highlight></codeline>
<codeline lineno="1984"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"></highlight><highlight class="comment">//<sp/>19.7.7<sp/>Visitation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Variant<sp/>&apos;visitor&apos;<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"></highlight></codeline>
<codeline lineno="1992" refid="structnonstd_1_1variants_1_1detail_1_1VisitorApplicatorImpl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VT&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1VisitorApplicatorImpl" kindref="compound">VisitorApplicatorImpl</ref><sp/>{</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>R<sp/>apply(Visitor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg)<sp/>{</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v(arg);</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1996"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"></highlight></codeline>
<codeline lineno="1998" refid="structnonstd_1_1variants_1_1detail_1_1VisitorApplicatorImpl_3_01R_00_01TX_3_01VT_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VT&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1VisitorApplicatorImpl" kindref="compound">VisitorApplicatorImpl</ref>&lt;R,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">TX</ref>&lt;VT&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>R<sp/>apply(Visitor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;,<sp/>T)<sp/>{</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prevent<sp/>default<sp/>construction<sp/>of<sp/>a<sp/>const<sp/>reference,<sp/>see<sp/>issue<sp/>#39:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/>std::terminate();</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2003"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1VisitorApplicator" kindref="compound">VisitorApplicator</ref>;</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V1&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1VisitorUnwrapper" kindref="compound">VisitorUnwrapper</ref>;</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2010"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>NumVars,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T&gt;</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>NumVars,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T1</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T2</ref><sp/>=<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1S0" kindref="compound">S0</ref>,</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T3</ref><sp/>=<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1S0" kindref="compound">S0</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T4</ref><sp/>=<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1S0" kindref="compound">S0</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T5</ref><sp/>=<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1S0" kindref="compound">S0</ref>&gt;</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2015" refid="structnonstd_1_1variants_1_1detail_1_1TypedVisitorUnwrapper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1TypedVisitorUnwrapper" kindref="compound">TypedVisitorUnwrapper</ref>;</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="2018" refid="structnonstd_1_1variants_1_1detail_1_1TypedVisitorUnwrapper_3_012_00_01R_00_01Visitor_00_01T2_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1TypedVisitorUnwrapper" kindref="compound">TypedVisitorUnwrapper</ref>&lt;2,<sp/>R,<sp/>Visitor,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T2</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Visitor<sp/>&amp;visitor;</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T2</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val2;</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TypedVisitorUnwrapper" kindref="compound">TypedVisitorUnwrapper</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Visitor<sp/>&amp;visitor_,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T2</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val2_)</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>visitor(visitor_),<sp/>val2(val2_)</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"></highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>R<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;val1)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visitor(val1,<sp/>val2);<sp/>}</highlight></codeline>
<codeline lineno="2028"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3&gt;</highlight></codeline>
<codeline lineno="2031" refid="structnonstd_1_1variants_1_1detail_1_1TypedVisitorUnwrapper_3_013_00_01R_00_01Visitor_00_01T2_00_01T3_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1TypedVisitorUnwrapper" kindref="compound">TypedVisitorUnwrapper</ref>&lt;3,<sp/>R,<sp/>Visitor,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T2</ref>,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T3</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Visitor<sp/>&amp;visitor;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T2</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val2;</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T3</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val3;</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TypedVisitorUnwrapper" kindref="compound">TypedVisitorUnwrapper</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Visitor<sp/>&amp;visitor_,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T2</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val2_,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T3</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val3_)</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>visitor(visitor_),<sp/>val2(val2_),<sp/>val3(val3_)</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>R<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;val1)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visitor(val1,<sp/>val2,<sp/>val3);<sp/>}</highlight></codeline>
<codeline lineno="2042"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T4&gt;</highlight></codeline>
<codeline lineno="2045" refid="structnonstd_1_1variants_1_1detail_1_1TypedVisitorUnwrapper_3_014_00_01R_00_01Visitor_00_01T2_00_01T3_00_01T4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1TypedVisitorUnwrapper" kindref="compound">TypedVisitorUnwrapper</ref>&lt;4,<sp/>R,<sp/>Visitor,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T2</ref>,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T3</ref>,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T4</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Visitor<sp/>&amp;visitor;</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T2</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val2;</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T3</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val3;</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T4</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val4;</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TypedVisitorUnwrapper" kindref="compound">TypedVisitorUnwrapper</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Visitor<sp/>&amp;visitor_,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T2</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val2_,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T3</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val3_,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T4</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val4_)</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>visitor(visitor_),<sp/>val2(val2_),<sp/>val3(val3_),<sp/>val4(val4_)</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>R<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;val1)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visitor(val1,<sp/>val2,<sp/>val3,<sp/>val4);</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2059"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T4,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T5&gt;</highlight></codeline>
<codeline lineno="2062" refid="structnonstd_1_1variants_1_1detail_1_1TypedVisitorUnwrapper_3_015_00_01R_00_01Visitor_00_01T2_00_01T3_00_01T4_00_01T5_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1TypedVisitorUnwrapper" kindref="compound">TypedVisitorUnwrapper</ref>&lt;5,<sp/>R,<sp/>Visitor,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T2</ref>,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T3</ref>,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T4</ref>,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T5</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Visitor<sp/>&amp;visitor;</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T2</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val2;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T3</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val3;</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T4</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val4;</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T5</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val5;</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TypedVisitorUnwrapper" kindref="compound">TypedVisitorUnwrapper</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Visitor<sp/>&amp;visitor_,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T2</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val2_,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T3</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val3_,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T4</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val4_,</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T5</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val5_)</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>visitor(visitor_),<sp/>val2(val2_),<sp/>val3(val3_),<sp/>val4(val4_),<sp/>val5(val5_)</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>R<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;val1)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visitor(val1,<sp/>val2,<sp/>val3,<sp/>val4,<sp/>val5);</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2078"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight></codeline>
<codeline lineno="2080" refid="structnonstd_1_1variants_1_1detail_1_1VisitorUnwrapper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V2&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1VisitorUnwrapper" kindref="compound">VisitorUnwrapper</ref><sp/>{</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Visitor<sp/>&amp;visitor;</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V2<sp/>&amp;r;</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1VisitorUnwrapper" kindref="compound">VisitorUnwrapper</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Visitor<sp/>&amp;visitor_,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V2<sp/>&amp;r_)<sp/>:<sp/>visitor(visitor_),<sp/>r(r_)<sp/>{}</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1&gt;<sp/>R<sp/>operator()(<ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T1</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val1)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TypedVisitorUnwrapper" kindref="compound">TypedVisitorUnwrapper&lt;2, R, Visitor, T1&gt;</ref><sp/>visitor_type;</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1VisitorApplicator" kindref="compound">VisitorApplicator&lt;R&gt;::apply</ref>(visitor_type(visitor,<sp/>val1),<sp/>r);</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;<sp/>R<sp/>operator()(<ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T1</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val1,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T2</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val2)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TypedVisitorUnwrapper" kindref="compound">TypedVisitorUnwrapper&lt;3, R, Visitor, T1, T2&gt;</ref><sp/>visitor_type;</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1VisitorApplicator" kindref="compound">VisitorApplicator&lt;R&gt;::apply</ref>(visitor_type(visitor,<sp/>val1,<sp/>val2),<sp/>r);</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"></highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3&gt;</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/>R<sp/>operator()(<ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T1</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val1,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T2</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val2,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T3</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val3)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TypedVisitorUnwrapper" kindref="compound">TypedVisitorUnwrapper&lt;4, R, Visitor, T1, T2, T3&gt;</ref><sp/>visitor_type;</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1VisitorApplicator" kindref="compound">VisitorApplicator&lt;R&gt;::apply</ref>(visitor_type(visitor,<sp/>val1,<sp/>val2,<sp/>val3),<sp/>r);</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T4&gt;</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/>R<sp/>operator()(<ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T1</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val1,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T2</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val2,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T3</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val3,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T4</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val4)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TypedVisitorUnwrapper" kindref="compound">TypedVisitorUnwrapper&lt;5, R, Visitor, T1, T2, T3, T4&gt;</ref><sp/>visitor_type;</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1VisitorApplicator" kindref="compound">VisitorApplicator&lt;R&gt;::apply</ref>(visitor_type(visitor,<sp/>val1,<sp/>val2,<sp/>val3,<sp/>val4),<sp/>r);</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T4,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T5&gt;</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/>R<sp/>operator()(<ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T1</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val1,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T2</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val2,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T3</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val3,<sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T4</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val4,</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TX" kindref="compound">T5</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;val5)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1TypedVisitorUnwrapper" kindref="compound">TypedVisitorUnwrapper&lt;6, R, Visitor, T1, T2, T3, T4, T5&gt;</ref><sp/>visitor_type;</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1VisitorApplicator" kindref="compound">VisitorApplicator&lt;R&gt;::apply</ref>(visitor_type(visitor,<sp/>val1,<sp/>val2,<sp/>val3,<sp/>val4,<sp/>val5),<sp/>r);</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2114"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"></highlight></codeline>
<codeline lineno="2116" refid="structnonstd_1_1variants_1_1detail_1_1VisitorApplicator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1VisitorApplicator" kindref="compound">VisitorApplicator</ref><sp/>{</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V1&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>R<sp/>apply(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Visitor<sp/>&amp;v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V1<sp/>&amp;arg)<sp/>{</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(arg.index())<sp/>{</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>apply_visitor&lt;0&gt;(v,<sp/>arg);</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>apply_visitor&lt;1&gt;(v,<sp/>arg);</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>apply_visitor&lt;2&gt;(v,<sp/>arg);</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>apply_visitor&lt;3&gt;(v,<sp/>arg);</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>apply_visitor&lt;4&gt;(v,<sp/>arg);</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>apply_visitor&lt;5&gt;(v,<sp/>arg);</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>apply_visitor&lt;6&gt;(v,<sp/>arg);</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>7:</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>apply_visitor&lt;7&gt;(v,<sp/>arg);</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>apply_visitor&lt;8&gt;(v,<sp/>arg);</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>9:</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>apply_visitor&lt;9&gt;(v,<sp/>arg);</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>10:</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>apply_visitor&lt;10&gt;(v,<sp/>arg);</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>11:</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>apply_visitor&lt;11&gt;(v,<sp/>arg);</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>12:</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>apply_visitor&lt;12&gt;(v,<sp/>arg);</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>13:</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>apply_visitor&lt;13&gt;(v,<sp/>arg);</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>14:</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>apply_visitor&lt;14&gt;(v,<sp/>arg);</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>15:</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>apply_visitor&lt;15&gt;(v,<sp/>arg);</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prevent<sp/>default<sp/>construction<sp/>of<sp/>a<sp/>const<sp/>reference,<sp/>see<sp/>issue<sp/>#39:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::terminate();</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"></highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Idx,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V1&gt;</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>R<sp/>apply_visitor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Visitor<sp/>&amp;v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V1<sp/>&amp;arg)<sp/>{</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"></highlight></codeline>
<codeline lineno="2161"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1variant__alternative" kindref="compound">variant_alternative&lt;Idx, typename std::decay&lt;V1&gt;::type</ref>&gt;::type<sp/>value_type;</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1variant__alternative" kindref="compound">variant_alternative&lt;Idx, V1&gt;::type</ref><sp/>value_type;</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1VisitorApplicatorImpl" kindref="compound">VisitorApplicatorImpl&lt;R, value_type&gt;::apply</ref>(v,<sp/>get&lt;Idx&gt;(arg));</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>V&gt;</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>R<sp/>apply(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Visitor<sp/>&amp;v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V1<sp/>&amp;arg1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V2<sp/>&amp;arg2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1VisitorUnwrapper" kindref="compound">VisitorUnwrapper&lt;R, Visitor, V1&gt;</ref><sp/>Unwrapper;</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/>Unwrapper<sp/>unwrapper(v,<sp/>arg1);</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>apply(unwrapper,<sp/>arg2,<sp/>args...);</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V2&gt;</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>R<sp/>apply(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Visitor<sp/>&amp;v,<sp/>V1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg1,<sp/>V2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg2)<sp/>{</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1VisitorUnwrapper" kindref="compound">VisitorUnwrapper&lt;R, Visitor, V1&gt;</ref><sp/>Unwrapper;</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/>Unwrapper<sp/>unwrapper(v,<sp/>arg1);</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>apply(unwrapper,<sp/>arg2);</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"></highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V3&gt;</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>R<sp/>apply(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Visitor<sp/>&amp;v,<sp/>V1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg1,<sp/>V2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg2,<sp/>V3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg3)<sp/>{</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1VisitorUnwrapper" kindref="compound">VisitorUnwrapper&lt;R, Visitor, V1&gt;</ref><sp/>Unwrapper;</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/>Unwrapper<sp/>unwrapper(v,<sp/>arg1);</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>apply(unwrapper,<sp/>arg2,<sp/>arg3);</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V4&gt;</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>R<sp/>apply(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Visitor<sp/>&amp;v,<sp/>V1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg1,<sp/>V2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg2,<sp/>V3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg3,<sp/>V4<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg4)<sp/>{</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1VisitorUnwrapper" kindref="compound">VisitorUnwrapper&lt;R, Visitor, V1&gt;</ref><sp/>Unwrapper;</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/>Unwrapper<sp/>unwrapper(v,<sp/>arg1);</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>apply(unwrapper,<sp/>arg2,<sp/>arg3,<sp/>arg4);</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V4,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V5&gt;</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>R<sp/>apply(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Visitor<sp/>&amp;v,<sp/>V1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg1,<sp/>V2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg2,<sp/>V3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg3,<sp/>V4<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg4,</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V5<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg5)<sp/>{</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1VisitorUnwrapper" kindref="compound">VisitorUnwrapper&lt;R, Visitor, V1&gt;</ref><sp/>Unwrapper;</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/>Unwrapper<sp/>unwrapper(v,<sp/>arg1);</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>apply(unwrapper,<sp/>arg2,<sp/>arg3,<sp/>arg4,<sp/>arg5);</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"></highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>NumVars,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>V&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">VisitorImpl<sp/>{</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::declval&lt;Visitor&gt;()(get&lt;0&gt;(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">V<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::declval&lt;V&gt;()))...))<sp/>result_type;</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1VisitorApplicator" kindref="compound">VisitorApplicator&lt;result_type&gt;</ref><sp/>applicator_type;</highlight></codeline>
<codeline lineno="2215"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2217"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>No<sp/>perfect<sp/>forwarding<sp/>here<sp/>in<sp/>order<sp/>to<sp/>simplify<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>V&gt;</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>visit(Visitor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v,<sp/>V<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;...<sp/>vars)<sp/>-&gt;</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>detail::VisitorImpl&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(V),<sp/>Visitor,<sp/>V...&gt;::result_type<sp/>{</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>detail::VisitorImpl&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(V),<sp/>Visitor,<sp/>V...&gt;<sp/>impl_type;</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_type::applicator_type::apply(v,<sp/>vars...);</highlight></codeline>
<codeline lineno="2226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V1&gt;</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>R<sp/>visit(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Visitor<sp/>&amp;v,<sp/>V1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg1)<sp/>{</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::VisitorApplicator&lt;R&gt;::apply(v,<sp/>arg1);</highlight></codeline>
<codeline lineno="2232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V2&gt;</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>R<sp/>visit(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Visitor<sp/>&amp;v,<sp/>V1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg1,<sp/>V2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg2)<sp/>{</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::VisitorApplicator&lt;R&gt;::apply(v,<sp/>arg1,<sp/>arg2);</highlight></codeline>
<codeline lineno="2237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V3&gt;</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>R<sp/>visit(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Visitor<sp/>&amp;v,<sp/>V1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg1,<sp/>V2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg2,<sp/>V3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg3)<sp/>{</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::VisitorApplicator&lt;R&gt;::apply(v,<sp/>arg1,<sp/>arg2,<sp/>arg3);</highlight></codeline>
<codeline lineno="2242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V4&gt;</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>R<sp/>visit(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Visitor<sp/>&amp;v,<sp/>V1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg1,<sp/>V2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg2,<sp/>V3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg3,<sp/>V4<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg4)<sp/>{</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::VisitorApplicator&lt;R&gt;::apply(v,<sp/>arg1,<sp/>arg2,<sp/>arg3,<sp/>arg4);</highlight></codeline>
<codeline lineno="2247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"></highlight></codeline>
<codeline lineno="2249"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V4,</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V5&gt;</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>R<sp/>visit(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Visitor<sp/>&amp;v,<sp/>V1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg1,<sp/>V2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg2,<sp/>V3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg3,<sp/>V4<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg4,</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V5<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg5)<sp/>{</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::VisitorApplicator&lt;R&gt;::apply(v,<sp/>arg1,<sp/>arg2,<sp/>arg3,<sp/>arg4,<sp/>arg5);</highlight></codeline>
<codeline lineno="2254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"></highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>19.7.6<sp/>Relational<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"></highlight></codeline>
<codeline lineno="2262" refid="structnonstd_1_1variants_1_1detail_1_1Comparator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Variant&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1variants_1_1detail_1_1Comparator" kindref="compound">Comparator</ref><sp/>{</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>equal(Variant<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v,<sp/>Variant<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;w)<sp/>{</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(v.index())<sp/>{</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;0&gt;(v)<sp/>==<sp/>get&lt;0&gt;(w);</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;1&gt;(v)<sp/>==<sp/>get&lt;1&gt;(w);</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;2&gt;(v)<sp/>==<sp/>get&lt;2&gt;(w);</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;3&gt;(v)<sp/>==<sp/>get&lt;3&gt;(w);</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;4&gt;(v)<sp/>==<sp/>get&lt;4&gt;(w);</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;5&gt;(v)<sp/>==<sp/>get&lt;5&gt;(w);</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;6&gt;(v)<sp/>==<sp/>get&lt;6&gt;(w);</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>7:</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;7&gt;(v)<sp/>==<sp/>get&lt;7&gt;(w);</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;8&gt;(v)<sp/>==<sp/>get&lt;8&gt;(w);</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>9:</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;9&gt;(v)<sp/>==<sp/>get&lt;9&gt;(w);</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>10:</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;10&gt;(v)<sp/>==<sp/>get&lt;10&gt;(w);</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>11:</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;11&gt;(v)<sp/>==<sp/>get&lt;11&gt;(w);</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>12:</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;12&gt;(v)<sp/>==<sp/>get&lt;12&gt;(w);</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>13:</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;13&gt;(v)<sp/>==<sp/>get&lt;13&gt;(w);</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>14:</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;14&gt;(v)<sp/>==<sp/>get&lt;14&gt;(w);</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>15:</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;15&gt;(v)<sp/>==<sp/>get&lt;15&gt;(w);</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"></highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>less_than(Variant<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v,<sp/>Variant<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;w)<sp/>{</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(v.index())<sp/>{</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;0&gt;(v)<sp/>&lt;<sp/>get&lt;0&gt;(w);</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;1&gt;(v)<sp/>&lt;<sp/>get&lt;1&gt;(w);</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;2&gt;(v)<sp/>&lt;<sp/>get&lt;2&gt;(w);</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;3&gt;(v)<sp/>&lt;<sp/>get&lt;3&gt;(w);</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;4&gt;(v)<sp/>&lt;<sp/>get&lt;4&gt;(w);</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;5&gt;(v)<sp/>&lt;<sp/>get&lt;5&gt;(w);</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;6&gt;(v)<sp/>&lt;<sp/>get&lt;6&gt;(w);</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>7:</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;7&gt;(v)<sp/>&lt;<sp/>get&lt;7&gt;(w);</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;8&gt;(v)<sp/>&lt;<sp/>get&lt;8&gt;(w);</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>9:</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;9&gt;(v)<sp/>&lt;<sp/>get&lt;9&gt;(w);</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>10:</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;10&gt;(v)<sp/>&lt;<sp/>get&lt;10&gt;(w);</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>11:</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;11&gt;(v)<sp/>&lt;<sp/>get&lt;11&gt;(w);</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>12:</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;12&gt;(v)<sp/>&lt;<sp/>get&lt;12&gt;(w);</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>13:</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;13&gt;(v)<sp/>&lt;<sp/>get&lt;13&gt;(w);</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>14:</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;14&gt;(v)<sp/>&lt;<sp/>get&lt;14&gt;(w);</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>15:</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;15&gt;(v)<sp/>&lt;<sp/>get&lt;15&gt;(w);</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"></highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2342"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"></highlight></codeline>
<codeline lineno="2344"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2345"><highlight class="normal"></highlight></codeline>
<codeline lineno="2346"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T4,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T5,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T6,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T7,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T8,</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T9,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T10,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T11,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T12,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T13,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T14,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T15&gt;</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2349"><highlight class="normal">operator==(<ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v,</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;w)<sp/>{</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.index()<sp/>!=<sp/>w.index())</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.valueless_by_exception())</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1variants_1_1detail_1_1Comparator" kindref="compound">detail::Comparator</ref>&lt;</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15&gt;</ref>&gt;::equal(v,<sp/>w);</highlight></codeline>
<codeline lineno="2358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight></codeline>
<codeline lineno="2360"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T4,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T5,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T6,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T7,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T8,</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T9,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T10,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T11,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T12,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T13,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T14,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T15&gt;</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2363"><highlight class="normal">operator!=(<ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v,</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">variant&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;w)<sp/>{</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(v<sp/>==<sp/>w);</highlight></codeline>
<codeline lineno="2366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T4,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T5,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T6,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T7,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T8,</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T9,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T10,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T11,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T12,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T13,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T14,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T15&gt;</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal">operator&lt;(variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v,</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;w)<sp/>{</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w.valueless_by_exception())</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.valueless_by_exception())</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.index()<sp/>&lt;<sp/>w.index())</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.index()<sp/>&gt;<sp/>w.index())</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::Comparator&lt;variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T14,<sp/>T15&gt;&gt;::less_than(v,<sp/>w);</highlight></codeline>
<codeline lineno="2384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T4,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T5,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T6,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T7,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T8,</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T9,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T10,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T11,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T12,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T13,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T14,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T15&gt;</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2389"><highlight class="normal">operator&gt;(variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v,</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;w)<sp/>{</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>w<sp/>&lt;<sp/>v;</highlight></codeline>
<codeline lineno="2392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"></highlight></codeline>
<codeline lineno="2394"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T4,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T5,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T6,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T7,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T8,</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T9,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T10,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T11,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T12,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T13,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T14,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T15&gt;</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2397"><highlight class="normal">operator&lt;=(variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v,</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;w)<sp/>{</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(v<sp/>&gt;<sp/>w);</highlight></codeline>
<codeline lineno="2400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T4,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T5,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T6,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T7,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T8,</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T9,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T10,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T11,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T12,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T13,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T14,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T15&gt;</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal">operator&gt;=(variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v,</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;w)<sp/>{</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(v<sp/>&lt;<sp/>w);</highlight></codeline>
<codeline lineno="2408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"></highlight></codeline>
<codeline lineno="2410"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>variants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">variants;</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>nonstd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2415"><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2417"><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"></highlight><highlight class="comment">//<sp/>19.7.12<sp/>Hash<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std<sp/>{</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hash&lt;nonstd::monostate&gt;<sp/>{</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/>std::size_t<sp/>operator()(<ref refid="classnonstd_1_1variants_1_1monostate" kindref="compound">nonstd::monostate</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>variant_noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>42;<sp/>}</highlight></codeline>
<codeline lineno="2424"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"></highlight></codeline>
<codeline lineno="2426"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T0,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T4,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T5,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T6,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T7,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T8,</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T9,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T10,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T11,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T12,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T13,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T14,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T15&gt;</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hash&lt;nonstd::variant&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,<sp/>T14,<sp/>T15&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/>std::size_t<sp/>operator()(<ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">nonstd::variant</ref>&lt;T0,<sp/>T1,<sp/>T2,<sp/>T3,<sp/>T4,<sp/>T5,<sp/>T6,<sp/>T7,<sp/>T8,<sp/>T9,<sp/>T10,<sp/>T11,<sp/>T12,<sp/>T13,</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T14,<sp/>T15&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>variant_noexcept<sp/>{</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">nvd<sp/>=<sp/>nonstd::variants::detail;</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"></highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(v.index())<sp/>{</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nvd::hash(0)<sp/>^<sp/>nvd::hash(get&lt;0&gt;(v));</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nvd::hash(1)<sp/>^<sp/>nvd::hash(get&lt;1&gt;(v));</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nvd::hash(2)<sp/>^<sp/>nvd::hash(get&lt;2&gt;(v));</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nvd::hash(3)<sp/>^<sp/>nvd::hash(get&lt;3&gt;(v));</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nvd::hash(4)<sp/>^<sp/>nvd::hash(get&lt;4&gt;(v));</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nvd::hash(5)<sp/>^<sp/>nvd::hash(get&lt;5&gt;(v));</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nvd::hash(6)<sp/>^<sp/>nvd::hash(get&lt;6&gt;(v));</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>7:</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nvd::hash(7)<sp/>^<sp/>nvd::hash(get&lt;7&gt;(v));</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nvd::hash(8)<sp/>^<sp/>nvd::hash(get&lt;8&gt;(v));</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>9:</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nvd::hash(9)<sp/>^<sp/>nvd::hash(get&lt;9&gt;(v));</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>10:</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nvd::hash(10)<sp/>^<sp/>nvd::hash(get&lt;10&gt;(v));</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>11:</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nvd::hash(11)<sp/>^<sp/>nvd::hash(get&lt;11&gt;(v));</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>12:</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nvd::hash(12)<sp/>^<sp/>nvd::hash(get&lt;12&gt;(v));</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>13:</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nvd::hash(13)<sp/>^<sp/>nvd::hash(get&lt;13&gt;(v));</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>14:</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nvd::hash(14)<sp/>^<sp/>nvd::hash(get&lt;14&gt;(v));</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>15:</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nvd::hash(15)<sp/>^<sp/>nvd::hash(get&lt;15&gt;(v));</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2471"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"></highlight></codeline>
<codeline lineno="2473"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2474"><highlight class="normal"></highlight></codeline>
<codeline lineno="2475"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>variant_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2476"><highlight class="normal"></highlight></codeline>
<codeline lineno="2477"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>variant_BETWEEN(variant_COMPILER_MSVC_VER,<sp/>1300,<sp/>1900)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"></highlight></codeline>
<codeline lineno="2481"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>variant_USES_STD_VARIANT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NONSTD_VARIANT_LITE_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2014-2018<sp/>Martin<sp/>Moene</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2486"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/martinmoene/optional-lite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2489"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2490"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(See<sp/>accompanying<sp/>file<sp/>LICENSE.txt<sp/>or<sp/>copy<sp/>at<sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2491"><highlight class="normal"></highlight></codeline>
<codeline lineno="2492"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2493"><highlight class="normal"></highlight></codeline>
<codeline lineno="2494"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NONSTD_OPTIONAL_LITE_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NONSTD_OPTIONAL_LITE_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2496"><highlight class="normal"></highlight></codeline>
<codeline lineno="2497"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_lite_MAJOR<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_lite_MINOR<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2499"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_lite_PATCH<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2500"><highlight class="normal"></highlight></codeline>
<codeline lineno="2501"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_lite_VERSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2502"><highlight class="preprocessor"><sp/><sp/>optional_STRINGIFY(optional_lite_MAJOR)<sp/>&quot;.&quot;</highlight><highlight class="normal"><sp/>optional_STRINGIFY(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>optional_lite_MINOR)<sp/>&quot;.&quot;<sp/>optional_STRINGIFY(optional_lite_PATCH)</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"></highlight></codeline>
<codeline lineno="2505"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_STRINGIFY(x)<sp/>optional_STRINGIFY_(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2506"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_STRINGIFY_(x)<sp/>#x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2507"><highlight class="normal"></highlight></codeline>
<codeline lineno="2508"><highlight class="normal"></highlight><highlight class="comment">//<sp/>optional-lite<sp/>configuration:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2509"><highlight class="normal"></highlight></codeline>
<codeline lineno="2510"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_OPTIONAL_DEFAULT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2511"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_OPTIONAL_NONSTD<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_OPTIONAL_STD<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2513"><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(optional_CONFIG_SELECT_OPTIONAL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_CONFIG_SELECT_OPTIONAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2516"><highlight class="preprocessor"><sp/><sp/>(optional_HAVE_STD_OPTIONAL<sp/>?<sp/>optional_OPTIONAL_STD<sp/>:<sp/>optional_OPTIONAL_NONSTD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2518"><highlight class="normal"></highlight></codeline>
<codeline lineno="2519"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Control<sp/>presence<sp/>of<sp/>exception<sp/>handling<sp/>(try<sp/>and<sp/>auto<sp/>discover):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2520"><highlight class="normal"></highlight></codeline>
<codeline lineno="2521"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>optional_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cpp_exceptions)<sp/>||<sp/>defined(__EXCEPTIONS)<sp/>||<sp/>defined(_CPPUNWIND)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2523"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_CONFIG_NO_EXCEPTIONS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2524"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2525"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_CONFIG_NO_EXCEPTIONS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2526"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2528"><highlight class="normal"></highlight></codeline>
<codeline lineno="2529"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++<sp/>language<sp/>version<sp/>detection<sp/>(C++20<sp/>is<sp/>speculative):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>VC14.0/1900<sp/>(VS2015)<sp/>lacks<sp/>too<sp/>much<sp/>from<sp/>C++14.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2531"><highlight class="normal"></highlight></codeline>
<codeline lineno="2532"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>optional_CPLUSPLUS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2533"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSVC_LANG)<sp/>&amp;&amp;<sp/>!defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_CPLUSPLUS<sp/>(_MSC_VER<sp/>==<sp/>1900<sp/>?<sp/>201103L<sp/>:<sp/>_MSVC_LANG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2535"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_CPLUSPLUS<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2537"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"></highlight></codeline>
<codeline lineno="2540"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_CPP98_OR_GREATER<sp/>(optional_CPLUSPLUS<sp/>&gt;=<sp/>199711L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2541"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_CPP11_OR_GREATER<sp/>(optional_CPLUSPLUS<sp/>&gt;=<sp/>201103L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_CPP11_OR_GREATER_<sp/>(optional_CPLUSPLUS<sp/>&gt;=<sp/>201103L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2543"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_CPP14_OR_GREATER<sp/>(optional_CPLUSPLUS<sp/>&gt;=<sp/>201402L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2544"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_CPP17_OR_GREATER<sp/>(optional_CPLUSPLUS<sp/>&gt;=<sp/>201703L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2545"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_CPP20_OR_GREATER<sp/>(optional_CPLUSPLUS<sp/>&gt;=<sp/>202000L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2546"><highlight class="normal"></highlight></codeline>
<codeline lineno="2547"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++<sp/>language<sp/>version<sp/>(represent<sp/>98<sp/>as<sp/>3):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2548"><highlight class="normal"></highlight></codeline>
<codeline lineno="2549"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_CPLUSPLUS_V<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2550"><highlight class="preprocessor"><sp/><sp/>(optional_CPLUSPLUS<sp/>/<sp/>100<sp/>-<sp/>(optional_CPLUSPLUS<sp/>&gt;<sp/>200000<sp/>?<sp/>2000<sp/>:<sp/>1994))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2551"><highlight class="normal"></highlight></codeline>
<codeline lineno="2552"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>C++17<sp/>std::optional<sp/>if<sp/>available<sp/>and<sp/>requested:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2553"><highlight class="normal"></highlight></codeline>
<codeline lineno="2554"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CPP17_OR_GREATER<sp/>&amp;&amp;<sp/>defined(__has_include)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2555"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_include(&lt;optional&gt;<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2556"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_HAVE_STD_OPTIONAL<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2557"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2558"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_HAVE_STD_OPTIONAL<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2559"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2560"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_HAVE_STD_OPTIONAL<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2562"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal"></highlight></codeline>
<codeline lineno="2564"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_USES_STD_OPTIONAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2565"><highlight class="preprocessor"><sp/><sp/>((optional_CONFIG_SELECT_OPTIONAL<sp/>==<sp/>optional_OPTIONAL_STD)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2566"><highlight class="preprocessor"><sp/><sp/><sp/>((optional_CONFIG_SELECT_OPTIONAL<sp/>==<sp/>optional_OPTIONAL_DEFAULT)<sp/>&amp;&amp;<sp/>optional_HAVE_STD_OPTIONAL))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2567"><highlight class="normal"></highlight></codeline>
<codeline lineno="2568"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in_place:<sp/>code<sp/>duplicated<sp/>in<sp/>any-lite,<sp/>expected-lite,<sp/>optional-lite,<sp/>value-ptr-lite,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2570"><highlight class="normal"></highlight><highlight class="comment">//<sp/>variant-lite:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2571"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"></highlight></codeline>
<codeline lineno="2573"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>nonstd_lite_HAVE_IN_PLACE_TYPES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2574"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nonstd_lite_HAVE_IN_PLACE_TYPES<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2575"><highlight class="normal"></highlight></codeline>
<codeline lineno="2576"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++17<sp/>std::in_place<sp/>in<sp/>&lt;utility&gt;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2577"><highlight class="normal"></highlight></codeline>
<codeline lineno="2578"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CPP17_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2579"><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2581"><highlight class="normal"></highlight></codeline>
<codeline lineno="2582"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">nonstd<sp/>{</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"></highlight></codeline>
<codeline lineno="2584"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::in_place;</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::in_place_index;</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::in_place_index_t;</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::in_place_t;</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::in_place_type;</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::in_place_type_t;</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"></highlight></codeline>
<codeline lineno="2591"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nonstd_lite_in_place_t(T)<sp/>std::in_place_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nonstd_lite_in_place_type_t(T)<sp/>std::in_place_type_t&lt;T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2593"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nonstd_lite_in_place_index_t(K)<sp/>std::in_place_index_t&lt;K&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2594"><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nonstd_lite_in_place(T)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2596"><highlight class="preprocessor"><sp/><sp/>std::in_place_t<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2597"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nonstd_lite_in_place_type(T)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2598"><highlight class="preprocessor"><sp/><sp/>std::in_place_type_t&lt;T&gt;<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2599"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nonstd_lite_in_place_index(K)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2600"><highlight class="preprocessor"><sp/><sp/>std::in_place_index_t&lt;K&gt;<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2601"><highlight class="normal"></highlight></codeline>
<codeline lineno="2602"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>nonstd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2603"><highlight class="normal"></highlight></codeline>
<codeline lineno="2604"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>optional_CPP17_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2605"><highlight class="normal"></highlight></codeline>
<codeline lineno="2606"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2607"><highlight class="normal"></highlight></codeline>
<codeline lineno="2608"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">nonstd<sp/>{</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"></highlight></codeline>
<codeline lineno="2611"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">in_place_type_tag<sp/>{};</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"></highlight></codeline>
<codeline lineno="2613"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>K&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">in_place_index_tag<sp/>{};</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"></highlight></codeline>
<codeline lineno="2615"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2616"><highlight class="normal"></highlight></codeline>
<codeline lineno="2617"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">in_place_t<sp/>{};</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"></highlight></codeline>
<codeline lineno="2619"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>in_place_t</highlight></codeline>
<codeline lineno="2621"><highlight class="normal">in_place(detail::in_place_type_tag&lt;T&gt;<sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal"><sp/>=<sp/>detail::in_place_type_tag&lt;T&gt;())<sp/>{</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>in_place_t();</highlight></codeline>
<codeline lineno="2623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"></highlight></codeline>
<codeline lineno="2625"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>K&gt;</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>in_place_t</highlight></codeline>
<codeline lineno="2627"><highlight class="normal">in_place(detail::in_place_index_tag&lt;K&gt;<sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal"><sp/>=<sp/>detail::in_place_index_tag&lt;K&gt;())<sp/>{</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>in_place_t();</highlight></codeline>
<codeline lineno="2629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"></highlight></codeline>
<codeline lineno="2631"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>in_place_t</highlight></codeline>
<codeline lineno="2633"><highlight class="normal">in_place_type(detail::in_place_type_tag&lt;T&gt;<sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal"><sp/>=<sp/>detail::in_place_type_tag&lt;T&gt;())<sp/>{</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>in_place_t();</highlight></codeline>
<codeline lineno="2635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>K&gt;</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>in_place_t</highlight></codeline>
<codeline lineno="2639"><highlight class="normal">in_place_index(detail::in_place_index_tag&lt;K&gt;<sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal"><sp/>=<sp/>detail::in_place_index_tag&lt;K&gt;())<sp/>{</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>in_place_t();</highlight></codeline>
<codeline lineno="2641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"></highlight></codeline>
<codeline lineno="2643"><highlight class="normal"></highlight><highlight class="comment">//<sp/>mimic<sp/>templated<sp/>typedef:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2644"><highlight class="normal"></highlight></codeline>
<codeline lineno="2645"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nonstd_lite_in_place_t(T)<sp/>nonstd::in_place_t<sp/>(&amp;)(nonstd::detail::in_place_type_tag&lt;T&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2646"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nonstd_lite_in_place_type_t(T)<sp/>nonstd::in_place_t<sp/>(&amp;)(nonstd::detail::in_place_type_tag&lt;T&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2647"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nonstd_lite_in_place_index_t(K)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2648"><highlight class="preprocessor"><sp/><sp/>nonstd::in_place_t<sp/>(&amp;)(nonstd::detail::in_place_index_tag&lt;K&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2649"><highlight class="normal"></highlight></codeline>
<codeline lineno="2650"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nonstd_lite_in_place(T)<sp/>nonstd::in_place_type&lt;T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2651"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nonstd_lite_in_place_type(T)<sp/>nonstd::in_place_type&lt;T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nonstd_lite_in_place_index(K)<sp/>nonstd::in_place_index&lt;K&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2653"><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>nonstd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"></highlight></codeline>
<codeline lineno="2656"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>optional_CPP17_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2657"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>nonstd_lite_HAVE_IN_PLACE_TYPES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2658"><highlight class="normal"></highlight></codeline>
<codeline lineno="2659"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2660"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Using<sp/>std::optional:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2661"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2662"><highlight class="normal"></highlight></codeline>
<codeline lineno="2663"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_USES_STD_OPTIONAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2664"><highlight class="normal"></highlight></codeline>
<codeline lineno="2665"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;optional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2666"><highlight class="normal"></highlight></codeline>
<codeline lineno="2667"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">nonstd<sp/>{</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"></highlight></codeline>
<codeline lineno="2669"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::bad_optional_access;</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::hash;</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::optional;</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"></highlight></codeline>
<codeline lineno="2673"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::nullopt;</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::nullopt_t;</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"></highlight></codeline>
<codeline lineno="2676"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator==;</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator!=;</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator&lt;;</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator&lt;=;</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator&gt;;</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator&gt;=;</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::make_optional;</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::swap;</highlight></codeline>
<codeline lineno="2684"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>nonstd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2685"><highlight class="normal"></highlight></codeline>
<codeline lineno="2686"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>optional_USES_STD_OPTIONAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2687"><highlight class="normal"></highlight></codeline>
<codeline lineno="2688"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2689"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2690"><highlight class="normal"></highlight></codeline>
<codeline lineno="2691"><highlight class="normal"></highlight><highlight class="comment">//<sp/>optional-lite<sp/>alignment<sp/>configuration:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2692"><highlight class="normal"></highlight></codeline>
<codeline lineno="2693"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>optional_CONFIG_MAX_ALIGN_HACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2694"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_CONFIG_MAX_ALIGN_HACK<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2695"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2696"><highlight class="normal"></highlight></codeline>
<codeline lineno="2697"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>optional_CONFIG_ALIGN_AS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2698"><highlight class="normal"></highlight><highlight class="comment">//<sp/>no<sp/>default,<sp/>used<sp/>in<sp/>#if<sp/>defined()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2700"><highlight class="normal"></highlight></codeline>
<codeline lineno="2701"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>optional_CONFIG_ALIGN_AS_FALLBACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2702"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_CONFIG_ALIGN_AS_FALLBACK<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2703"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2704"><highlight class="normal"></highlight></codeline>
<codeline lineno="2705"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compiler<sp/>warning<sp/>suppression:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2706"><highlight class="normal"></highlight></codeline>
<codeline lineno="2707"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2708"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2709"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wundef&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2710"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2711"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2712"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wundef&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2713"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2714"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2715"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2716"><highlight class="normal"></highlight></codeline>
<codeline lineno="2717"><highlight class="normal"></highlight><highlight class="comment">//<sp/>half-open<sp/>range<sp/>[lo..hi):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2718"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_BETWEEN(v,<sp/>lo,<sp/>hi)<sp/>((lo)<sp/>&lt;=<sp/>(v)<sp/>&amp;&amp;<sp/>(v)<sp/>&lt;<sp/>(hi))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2719"><highlight class="normal"></highlight></codeline>
<codeline lineno="2720"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compiler<sp/>versions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2721"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2722"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/><sp/>6.0<sp/><sp/>_MSC_VER<sp/>==<sp/>1200<sp/><sp/>optional_COMPILER_MSVC_VERSION<sp/>==<sp/><sp/>60<sp/><sp/>(Visual<sp/>Studio<sp/>6.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2723"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/><sp/>7.0<sp/><sp/>_MSC_VER<sp/>==<sp/>1300<sp/><sp/>optional_COMPILER_MSVC_VERSION<sp/>==<sp/><sp/>70<sp/><sp/>(Visual<sp/>Studio<sp/>.NET<sp/>2002)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2724"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/><sp/>7.1<sp/><sp/>_MSC_VER<sp/>==<sp/>1310<sp/><sp/>optional_COMPILER_MSVC_VERSION<sp/>==<sp/><sp/>71<sp/><sp/>(Visual<sp/>Studio<sp/>.NET<sp/>2003)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2725"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/><sp/>8.0<sp/><sp/>_MSC_VER<sp/>==<sp/>1400<sp/><sp/>optional_COMPILER_MSVC_VERSION<sp/>==<sp/><sp/>80<sp/><sp/>(Visual<sp/>Studio<sp/>2005)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2726"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/><sp/>9.0<sp/><sp/>_MSC_VER<sp/>==<sp/>1500<sp/><sp/>optional_COMPILER_MSVC_VERSION<sp/>==<sp/><sp/>90<sp/><sp/>(Visual<sp/>Studio<sp/>2008)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2727"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>10.0<sp/><sp/>_MSC_VER<sp/>==<sp/>1600<sp/><sp/>optional_COMPILER_MSVC_VERSION<sp/>==<sp/>100<sp/><sp/>(Visual<sp/>Studio<sp/>2010)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2728"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>11.0<sp/><sp/>_MSC_VER<sp/>==<sp/>1700<sp/><sp/>optional_COMPILER_MSVC_VERSION<sp/>==<sp/>110<sp/><sp/>(Visual<sp/>Studio<sp/>2012)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2729"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>12.0<sp/><sp/>_MSC_VER<sp/>==<sp/>1800<sp/><sp/>optional_COMPILER_MSVC_VERSION<sp/>==<sp/>120<sp/><sp/>(Visual<sp/>Studio<sp/>2013)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2730"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>14.0<sp/><sp/>_MSC_VER<sp/>==<sp/>1900<sp/><sp/>optional_COMPILER_MSVC_VERSION<sp/>==<sp/>140<sp/><sp/>(Visual<sp/>Studio<sp/>2015)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2731"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>14.1<sp/><sp/>_MSC_VER<sp/>&gt;=<sp/>1910<sp/><sp/>optional_COMPILER_MSVC_VERSION<sp/>==<sp/>141<sp/><sp/>(Visual<sp/>Studio<sp/>2017)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2732"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>14.2<sp/><sp/>_MSC_VER<sp/>&gt;=<sp/>1920<sp/><sp/>optional_COMPILER_MSVC_VERSION<sp/>==<sp/>142<sp/><sp/>(Visual<sp/>Studio<sp/>2019)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2733"><highlight class="normal"></highlight></codeline>
<codeline lineno="2734"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>!defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2735"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_COMPILER_MSVC_VER<sp/>(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2736"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_COMPILER_MSVC_VERSION<sp/>(_MSC_VER<sp/>/<sp/>10<sp/>-<sp/>10<sp/>*<sp/>(5<sp/>+<sp/>(_MSC_VER<sp/>&lt;<sp/>1900)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2737"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2738"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_COMPILER_MSVC_VER<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2739"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_COMPILER_MSVC_VERSION<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2740"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2741"><highlight class="normal"></highlight></codeline>
<codeline lineno="2742"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_COMPILER_VERSION(major,<sp/>minor,<sp/>patch)<sp/>(10<sp/>*<sp/>(10<sp/>*<sp/>(major)<sp/>+<sp/>(minor))<sp/>+<sp/>(patch))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2743"><highlight class="normal"></highlight></codeline>
<codeline lineno="2744"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>!defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2745"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_COMPILER_GNUC_VERSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2746"><highlight class="preprocessor"><sp/><sp/>optional_COMPILER_VERSION(__GNUC__,<sp/>__GNUC_MINOR__,<sp/>__GNUC_PATCHLEVEL__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2747"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2748"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_COMPILER_GNUC_VERSION<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2749"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2750"><highlight class="normal"></highlight></codeline>
<codeline lineno="2751"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2752"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_COMPILER_CLANG_VERSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2753"><highlight class="preprocessor"><sp/><sp/>optional_COMPILER_VERSION(__clang_major__,<sp/>__clang_minor__,<sp/>__clang_patchlevel__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2754"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2755"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_COMPILER_CLANG_VERSION<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2756"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2757"><highlight class="normal"></highlight></codeline>
<codeline lineno="2758"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_BETWEEN(optional_COMPILER_MSVC_VERSION,<sp/>70,<sp/>140)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2759"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable<sp/>:<sp/>4345)<sp/></highlight><highlight class="comment">//<sp/>initialization<sp/>behavior<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2760"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2761"><highlight class="normal"></highlight></codeline>
<codeline lineno="2762"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_BETWEEN(optional_COMPILER_MSVC_VERSION,<sp/>70,<sp/>150)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2763"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable<sp/>:<sp/>4814)<sp/></highlight><highlight class="comment">//<sp/>in<sp/>C++14<sp/>&apos;constexpr&apos;<sp/>will<sp/>not<sp/>imply<sp/>&apos;const&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2764"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2765"><highlight class="normal"></highlight></codeline>
<codeline lineno="2766"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Presence<sp/>of<sp/>language<sp/>and<sp/>library<sp/>features:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2767"><highlight class="normal"></highlight></codeline>
<codeline lineno="2768"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_HAVE(FEATURE)<sp/>(optional_HAVE_##FEATURE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2769"><highlight class="normal"></highlight></codeline>
<codeline lineno="2770"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_HAS_CPP0X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2771"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_HAS_CPP0X<sp/>_HAS_CPP0X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2772"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2773"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_HAS_CPP0X<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2774"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2775"><highlight class="normal"></highlight></codeline>
<codeline lineno="2776"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>defined<sp/>otherwise<sp/>below,<sp/>consider<sp/>VC14<sp/>as<sp/>C++11<sp/>for<sp/>optional-lite:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2777"><highlight class="normal"></highlight></codeline>
<codeline lineno="2778"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_COMPILER_MSVC_VER<sp/>&gt;=<sp/>1900</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2779"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2780"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_CPP11_OR_GREATER<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2781"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2782"><highlight class="normal"></highlight></codeline>
<codeline lineno="2783"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_CPP11_90<sp/>(optional_CPP11_OR_GREATER_<sp/>||<sp/>optional_COMPILER_MSVC_VER<sp/>&gt;=<sp/>1500)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2784"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_CPP11_100<sp/>(optional_CPP11_OR_GREATER_<sp/>||<sp/>optional_COMPILER_MSVC_VER<sp/>&gt;=<sp/>1600)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2785"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_CPP11_110<sp/>(optional_CPP11_OR_GREATER_<sp/>||<sp/>optional_COMPILER_MSVC_VER<sp/>&gt;=<sp/>1700)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2786"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_CPP11_120<sp/>(optional_CPP11_OR_GREATER_<sp/>||<sp/>optional_COMPILER_MSVC_VER<sp/>&gt;=<sp/>1800)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2787"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_CPP11_140<sp/>(optional_CPP11_OR_GREATER_<sp/>||<sp/>optional_COMPILER_MSVC_VER<sp/>&gt;=<sp/>1900)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2788"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_CPP11_141<sp/>(optional_CPP11_OR_GREATER_<sp/>||<sp/>optional_COMPILER_MSVC_VER<sp/>&gt;=<sp/>1910)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2789"><highlight class="normal"></highlight></codeline>
<codeline lineno="2790"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_CPP11_140_490<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2791"><highlight class="preprocessor"><sp/><sp/>((optional_CPP11_OR_GREATER_<sp/>&amp;&amp;<sp/>optional_COMPILER_GNUC_VERSION<sp/>&gt;=<sp/>490)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2792"><highlight class="preprocessor"><sp/><sp/><sp/>(optional_COMPILER_MSVC_VER<sp/>&gt;=<sp/>1910))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2793"><highlight class="normal"></highlight></codeline>
<codeline lineno="2794"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_CPP14_000<sp/>(optional_CPP14_OR_GREATER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2795"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_CPP17_000<sp/>(optional_CPP17_OR_GREATER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2796"><highlight class="normal"></highlight></codeline>
<codeline lineno="2797"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Presence<sp/>of<sp/>C++11<sp/>language<sp/>features:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2798"><highlight class="normal"></highlight></codeline>
<codeline lineno="2799"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_HAVE_CONSTEXPR_11<sp/>optional_CPP11_140</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2800"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_HAVE_IS_DEFAULT<sp/>optional_CPP11_140</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2801"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_HAVE_NOEXCEPT<sp/>optional_CPP11_140</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2802"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_HAVE_NULLPTR<sp/>optional_CPP11_100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2803"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_HAVE_REF_QUALIFIER<sp/>optional_CPP11_140_490</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2804"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_HAVE_INITIALIZER_LIST<sp/>optional_CPP11_140</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2805"><highlight class="normal"></highlight></codeline>
<codeline lineno="2806"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Presence<sp/>of<sp/>C++14<sp/>language<sp/>features:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2807"><highlight class="normal"></highlight></codeline>
<codeline lineno="2808"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_HAVE_CONSTEXPR_14<sp/>optional_CPP14_000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2809"><highlight class="normal"></highlight></codeline>
<codeline lineno="2810"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Presence<sp/>of<sp/>C++17<sp/>language<sp/>features:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2811"><highlight class="normal"></highlight></codeline>
<codeline lineno="2812"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_HAVE_NODISCARD<sp/>optional_CPP17_000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2813"><highlight class="normal"></highlight></codeline>
<codeline lineno="2814"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Presence<sp/>of<sp/>C++<sp/>library<sp/>features:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2815"><highlight class="normal"></highlight></codeline>
<codeline lineno="2816"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_HAVE_CONDITIONAL<sp/>optional_CPP11_120</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2817"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_HAVE_REMOVE_CV<sp/>optional_CPP11_120</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2818"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_HAVE_TYPE_TRAITS<sp/>optional_CPP11_90</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2819"><highlight class="normal"></highlight></codeline>
<codeline lineno="2820"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_HAVE_TR1_TYPE_TRAITS<sp/>(!!optional_COMPILER_GNUC_VERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2821"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_HAVE_TR1_ADD_POINTER<sp/>(!!optional_COMPILER_GNUC_VERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal"></highlight></codeline>
<codeline lineno="2823"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++<sp/>feature<sp/>usage:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2824"><highlight class="normal"></highlight></codeline>
<codeline lineno="2825"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_HAVE(CONSTEXPR_11)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2826"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_constexpr<sp/>constexpr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2827"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2828"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_constexpr<sp/></highlight><highlight class="comment">/*constexpr*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2829"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2830"><highlight class="normal"></highlight></codeline>
<codeline lineno="2831"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_HAVE(IS_DEFAULT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2832"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_is_default<sp/>=<sp/>default;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2833"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2834"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_is_default<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2835"><highlight class="preprocessor"><sp/><sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2836"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2837"><highlight class="normal"></highlight></codeline>
<codeline lineno="2838"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_HAVE(CONSTEXPR_14)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2839"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_constexpr14<sp/>constexpr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2840"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2841"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_constexpr14<sp/></highlight><highlight class="comment">/*constexpr*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2842"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2843"><highlight class="normal"></highlight></codeline>
<codeline lineno="2844"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_HAVE(NODISCARD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2845"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_nodiscard<sp/>[[nodiscard]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2846"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2847"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_nodiscard<sp/></highlight><highlight class="comment">/*[[nodiscard]]*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2848"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2849"><highlight class="normal"></highlight></codeline>
<codeline lineno="2850"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_HAVE(NOEXCEPT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2851"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_noexcept<sp/>noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2852"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2853"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_noexcept<sp/></highlight><highlight class="comment">/*noexcept*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2854"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2855"><highlight class="normal"></highlight></codeline>
<codeline lineno="2856"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_HAVE(NULLPTR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2857"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_nullptr<sp/>nullptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2858"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2859"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_nullptr<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2860"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2861"><highlight class="normal"></highlight></codeline>
<codeline lineno="2862"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_HAVE(REF_QUALIFIER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2863"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(<sp/>bugprone-macro-parentheses<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2864"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_ref_qual<sp/>&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2865"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_refref_qual<sp/>&amp;&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2866"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2867"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_ref_qual<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&amp;*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2868"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_refref_qual<sp/></highlight><highlight class="comment">/*&amp;&amp;*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2869"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2870"><highlight class="normal"></highlight></codeline>
<codeline lineno="2871"><highlight class="normal"></highlight><highlight class="comment">//<sp/>additional<sp/>includes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2872"><highlight class="normal"></highlight></codeline>
<codeline lineno="2873"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2874"><highlight class="normal"></highlight><highlight class="comment">//<sp/>already<sp/>included:<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2875"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2876"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2877"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2878"><highlight class="normal"></highlight></codeline>
<codeline lineno="2879"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2880"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2881"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2882"><highlight class="normal"></highlight></codeline>
<codeline lineno="2883"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_HAVE(INITIALIZER_LIST)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2884"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;initializer_list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2885"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2886"><highlight class="normal"></highlight></codeline>
<codeline lineno="2887"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_HAVE(TYPE_TRAITS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2888"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2889"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>optional_HAVE(TR1_TYPE_TRAITS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2890"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tr1/type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2891"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2892"><highlight class="normal"></highlight></codeline>
<codeline lineno="2893"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Method<sp/>enabling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2894"><highlight class="normal"></highlight></codeline>
<codeline lineno="2895"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2896"><highlight class="normal"></highlight></codeline>
<codeline lineno="2897"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_REQUIRES_0(...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2898"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;bool<sp/>B<sp/>=<sp/>(__VA_ARGS__),<sp/>typename<sp/>std::enable_if&lt;B,<sp/>int&gt;::type<sp/>=<sp/>0&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2899"><highlight class="normal"></highlight></codeline>
<codeline lineno="2900"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_REQUIRES_T(...)<sp/>,<sp/>typename<sp/>std::enable_if&lt;(__VA_ARGS__),<sp/>int&gt;::type<sp/>=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2901"><highlight class="normal"></highlight></codeline>
<codeline lineno="2902"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_REQUIRES_R(R,<sp/>...)<sp/>typename<sp/>std::enable_if&lt;(__VA_ARGS__),<sp/>R&gt;::type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2903"><highlight class="normal"></highlight></codeline>
<codeline lineno="2904"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_REQUIRES_A(...)<sp/>,<sp/>typename<sp/>std::enable_if&lt;(__VA_ARGS__),<sp/>void<sp/>*&gt;::type<sp/>=<sp/>nullptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2905"><highlight class="normal"></highlight></codeline>
<codeline lineno="2906"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2907"><highlight class="normal"></highlight></codeline>
<codeline lineno="2908"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2909"><highlight class="normal"></highlight><highlight class="comment">//<sp/>optional:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2910"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2911"><highlight class="normal"></highlight></codeline>
<codeline lineno="2912"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">nonstd<sp/>{</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">optional_lite<sp/>{</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"></highlight></codeline>
<codeline lineno="2915"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std11<sp/>{</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"></highlight></codeline>
<codeline lineno="2917"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2918"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::move;</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2920"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>T<sp/>&amp;move(T<sp/>&amp;t)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;<sp/>}</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2922"><highlight class="normal"></highlight></codeline>
<codeline lineno="2923"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_HAVE(CONDITIONAL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2924"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::conditional;</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2926" refid="structnonstd_1_1optional__lite_1_1std11_1_1conditional" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1optional__lite_1_1std11_1_1conditional" kindref="compound">conditional</ref><sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="2927" refid="structnonstd_1_1optional__lite_1_1std11_1_1conditional_3_01false_00_01T_00_01F_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1optional__lite_1_1std11_1_1conditional" kindref="compound">conditional</ref>&lt;false,<sp/>T,<sp/>F&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>F<sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>optional_HAVE_CONDITIONAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2929"><highlight class="normal"></highlight></codeline>
<codeline lineno="2930"><highlight class="normal"></highlight><highlight class="comment">//<sp/>gcc<sp/>&lt;<sp/>5:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2931"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2932"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_BETWEEN(optional_COMPILER_GNUC_VERSION,<sp/>1,<sp/>500)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2933"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_trivially_copy_constructible<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_trivially_move_constructible<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2936"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::is_trivially_copy_constructible;</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::is_trivially_move_constructible;</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2939"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2940"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2941"><highlight class="normal"></highlight></codeline>
<codeline lineno="2942"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2943"><highlight class="normal"></highlight></codeline>
<codeline lineno="2945"><highlight class="normal"></highlight></codeline>
<codeline lineno="2946"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std17<sp/>{</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"></highlight></codeline>
<codeline lineno="2948"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CPP17_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2949"><highlight class="normal"></highlight></codeline>
<codeline lineno="2950"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::is_nothrow_swappable;</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::is_swappable;</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"></highlight></codeline>
<codeline lineno="2953"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2954"><highlight class="normal"></highlight></codeline>
<codeline lineno="2955"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"></highlight></codeline>
<codeline lineno="2957"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::swap;</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"></highlight></codeline>
<codeline lineno="2959"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_swappable<sp/>{</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>decltype(swap(std::declval&lt;T<sp/>&amp;&gt;(),<sp/>std::declval&lt;T<sp/>&amp;&gt;()))&gt;</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::true_type<sp/>test(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"></highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::false_type<sp/>test(...);</highlight></codeline>
<codeline lineno="2964"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"></highlight></codeline>
<codeline lineno="2966"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_nothrow_swappable<sp/>{</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>wrap<sp/>noexcept(expr)<sp/>in<sp/>separate<sp/>function<sp/>as<sp/>work-around<sp/>for<sp/>VC140<sp/>(VS2015):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2968"><highlight class="normal"></highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>satisfies()<sp/>{</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(swap(std::declval&lt;T<sp/>&amp;&gt;(),<sp/>std::declval&lt;T<sp/>&amp;&gt;()));</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"></highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal">)<sp/>-&gt;<sp/>std::integral_constant&lt;bool,<sp/>satisfies&lt;T&gt;()&gt;<sp/>{}</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"></highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test(...)<sp/>-&gt;<sp/>std::false_type;</highlight></codeline>
<codeline lineno="2977"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"></highlight></codeline>
<codeline lineno="2979"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2980"><highlight class="normal"></highlight></codeline>
<codeline lineno="2981"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>[nothow]<sp/>swappable:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2982"><highlight class="normal"></highlight></codeline>
<codeline lineno="2983"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_swappable<sp/>:<sp/>decltype(detail::is_swappable::test&lt;T&gt;(0))<sp/>{};</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"></highlight></codeline>
<codeline lineno="2985"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_nothrow_swappable<sp/>:<sp/>decltype(detail::is_nothrow_swappable::test&lt;T&gt;(0))<sp/>{};</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"></highlight></codeline>
<codeline lineno="2988"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>optional_CPP17_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2989"><highlight class="normal"></highlight></codeline>
<codeline lineno="2990"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2991"><highlight class="normal"></highlight></codeline>
<codeline lineno="2993"><highlight class="normal"></highlight></codeline>
<codeline lineno="2994"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std20<sp/>{</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"></highlight></codeline>
<codeline lineno="2996"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">remove_cvref<sp/>{</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_cv&lt;typename<sp/>std::remove_reference&lt;T&gt;::type&gt;::type<sp/>type;</highlight></codeline>
<codeline lineno="2998"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"></highlight></codeline>
<codeline lineno="3000"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3001"><highlight class="normal"></highlight></codeline>
<codeline lineno="3002"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3003"><highlight class="normal"></highlight></codeline>
<codeline lineno="3005"><highlight class="normal"></highlight></codeline>
<codeline lineno="3006"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">optional;</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"></highlight></codeline>
<codeline lineno="3008"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"></highlight></codeline>
<codeline lineno="3010"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++11<sp/>emulation:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3011"><highlight class="normal"></highlight></codeline>
<codeline lineno="3012" refid="structnonstd_1_1optional__lite_1_1detail_1_1nulltype" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1optional__lite_1_1detail_1_1nulltype" kindref="compound">nulltype</ref><sp/>{};</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"></highlight></codeline>
<codeline lineno="3014" refid="structnonstd_1_1optional__lite_1_1detail_1_1typelist" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Head,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tail&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1optional__lite_1_1detail_1_1typelist" kindref="compound">typelist</ref><sp/>{</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Head<sp/>head;</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Tail<sp/>tail;</highlight></codeline>
<codeline lineno="3017"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"></highlight></codeline>
<codeline lineno="3019"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CONFIG_MAX_ALIGN_HACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3020"><highlight class="normal"></highlight></codeline>
<codeline lineno="3021"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Max<sp/>align,<sp/>use<sp/>most<sp/>restricted<sp/>type<sp/>for<sp/>alignment:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3022"><highlight class="normal"></highlight></codeline>
<codeline lineno="3023"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_UNIQUE(name)<sp/>optional_UNIQUE2(name,<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3024"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_UNIQUE2(name,<sp/>line)<sp/>optional_UNIQUE3(name,<sp/>line)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3025"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_UNIQUE3(name,<sp/>line)<sp/>name##line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3026"><highlight class="normal"></highlight></codeline>
<codeline lineno="3027"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_ALIGN_TYPE(type)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3028"><highlight class="preprocessor"><sp/><sp/>type<sp/>optional_UNIQUE(_t);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3029"><highlight class="preprocessor"><sp/><sp/>struct_t&lt;type&gt;<sp/>optional_UNIQUE(_st)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3030"><highlight class="normal"></highlight></codeline>
<codeline lineno="3031"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1optional__lite_1_1detail_1_1struct__t" kindref="compound">struct_t</ref><sp/>{<sp/>T<sp/>_;<sp/>};</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"></highlight></codeline>
<codeline lineno="3033"><highlight class="normal"></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">max_align_t<sp/>{</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"></highlight></codeline>
<codeline lineno="3050"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_LONG_LONG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3053"><highlight class="normal"></highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Unknown;</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"></highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/>Unknown<sp/>(*optional_UNIQUE(_))(Unknown);</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/>Unknown<sp/>*Unknown::*optional_UNIQUE(_);</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/>Unknown<sp/>(Unknown::*optional_UNIQUE(_))(Unknown);</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"></highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/>struct_t&lt;Unknown<sp/>(*)(Unknown)&gt;<sp/>optional_UNIQUE(_);</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/>struct_t&lt;Unknown<sp/>*<sp/>Unknown::*&gt;<sp/>optional_UNIQUE(_);</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/>struct_t&lt;Unknown<sp/>(Unknown::*)(Unknown)&gt;<sp/>optional_UNIQUE(_);</highlight></codeline>
<codeline lineno="3063"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"></highlight></codeline>
<codeline lineno="3065"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>optional_UNIQUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3066"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>optional_UNIQUE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3067"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>optional_UNIQUE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3068"><highlight class="normal"></highlight></codeline>
<codeline lineno="3069"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>optional_ALIGN_TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3070"><highlight class="normal"></highlight></codeline>
<codeline lineno="3071"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(optional_CONFIG_ALIGN_AS)<sp/></highlight><highlight class="comment">//<sp/>optional_CONFIG_MAX_ALIGN_HACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3072"><highlight class="normal"></highlight></codeline>
<codeline lineno="3073"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>user-specified<sp/>type<sp/>for<sp/>alignment:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3074"><highlight class="normal"></highlight></codeline>
<codeline lineno="3075"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_ALIGN_AS(unused)<sp/>optional_CONFIG_ALIGN_AS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3076"><highlight class="normal"></highlight></codeline>
<codeline lineno="3077"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>optional_CONFIG_MAX_ALIGN_HACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3078"><highlight class="normal"></highlight></codeline>
<codeline lineno="3079"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Determine<sp/>POD<sp/>type<sp/>to<sp/>use<sp/>for<sp/>alignment:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3080"><highlight class="normal"></highlight></codeline>
<codeline lineno="3081"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_ALIGN_AS(to_align)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3082"><highlight class="preprocessor"><sp/><sp/>typename<sp/>type_of_size&lt;alignment_types,<sp/>alignment_of&lt;to_align&gt;::value&gt;::type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3083"><highlight class="normal"></highlight></codeline>
<codeline lineno="3084"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">alignment_of;</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"></highlight></codeline>
<codeline lineno="3086" refid="structnonstd_1_1optional__lite_1_1detail_1_1alignment__of__hack" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1optional__lite_1_1detail_1_1alignment__of__hack" kindref="compound">alignment_of_hack</ref><sp/>{</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/>T<sp/>t;</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><ref refid="structnonstd_1_1optional__lite_1_1detail_1_1alignment__of__hack" kindref="compound">alignment_of_hack</ref>();</highlight></codeline>
<codeline lineno="3090"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"></highlight></codeline>
<codeline lineno="3092" refid="structnonstd_1_1optional__lite_1_1detail_1_1alignment__logic" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>A,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1optional__lite_1_1detail_1_1alignment__logic" kindref="compound">alignment_logic</ref><sp/>{</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>value<sp/>=<sp/>A<sp/>&lt;<sp/>S<sp/>?<sp/>A<sp/>:<sp/>S<sp/>};</highlight></codeline>
<codeline lineno="3094"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"></highlight></codeline>
<codeline lineno="3096" refid="structnonstd_1_1optional__lite_1_1detail_1_1alignment__of" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1optional__lite_1_1detail_1_1alignment__of" kindref="compound">alignment_of</ref><sp/>{</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>value<sp/>=<sp/><ref refid="structnonstd_1_1optional__lite_1_1detail_1_1alignment__logic" kindref="compound">alignment_logic</ref>&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structnonstd_1_1optional__lite_1_1detail_1_1alignment__of__hack" kindref="compound">alignment_of_hack&lt;T&gt;</ref>)<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)&gt;::value<sp/>};</highlight></codeline>
<codeline lineno="3098"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"></highlight></codeline>
<codeline lineno="3100" refid="structnonstd_1_1optional__lite_1_1detail_1_1type__of__size" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>List,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1optional__lite_1_1detail_1_1type__of__size" kindref="compound">type_of_size</ref><sp/>{</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1optional__lite_1_1std11_1_1conditional" kindref="compound">std11::conditional</ref>&lt;N<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>List::head),<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>List::head,</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>type_of_size&lt;typename<sp/>List::tail,<sp/>N&gt;::type&gt;::type<sp/>type;</highlight></codeline>
<codeline lineno="3104"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"></highlight></codeline>
<codeline lineno="3106" refid="structnonstd_1_1optional__lite_1_1detail_1_1type__of__size_3_01nulltype_00_01N_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1optional__lite_1_1detail_1_1type__of__size" kindref="compound">type_of_size</ref>&lt;<ref refid="structnonstd_1_1optional__lite_1_1detail_1_1nulltype" kindref="compound">nulltype</ref>,<sp/>N&gt;<sp/>{</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>optional_CONFIG_ALIGN_AS_FALLBACK<sp/>type;</highlight></codeline>
<codeline lineno="3108"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"></highlight></codeline>
<codeline lineno="3110" refid="structnonstd_1_1optional__lite_1_1detail_1_1struct__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1optional__lite_1_1detail_1_1struct__t" kindref="compound">struct_t</ref><sp/>{<sp/>T<sp/>_;<sp/>};</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"></highlight></codeline>
<codeline lineno="3112"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>optional_ALIGN_TYPE(type)<sp/>typelist<sp/>&lt;<sp/>type,<sp/>typelist<sp/>&lt;<sp/>struct_t&lt;type&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3113"><highlight class="normal"></highlight></codeline>
<codeline lineno="3114"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Unknown;</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"></highlight></codeline>
<codeline lineno="3116"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),<sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">),<sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">),<sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),<sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"></highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*),<sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*),<sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*),</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*),<sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*),<sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*),</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/>optional_ALIGN_TYPE(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*),</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"></highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/>optional_ALIGN_TYPE(Unknown<sp/>(*)(Unknown)),<sp/>optional_ALIGN_TYPE(Unknown<sp/>*Unknown::*),</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/>optional_ALIGN_TYPE(Unknown<sp/>(Unknown::*)(Unknown)),</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"></highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnonstd_1_1optional__lite_1_1detail_1_1nulltype" kindref="compound">nulltype</ref><sp/>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<sp/><ref refid="structnonstd_1_1optional__lite_1_1detail_1_1nulltype" kindref="compound">alignment_types</ref>;</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"></highlight></codeline>
<codeline lineno="3129"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>optional_ALIGN_TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3130"><highlight class="normal"></highlight></codeline>
<codeline lineno="3131"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>optional_CONFIG_MAX_ALIGN_HACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3132"><highlight class="normal"></highlight></codeline>
<codeline lineno="3134"><highlight class="normal"></highlight></codeline>
<codeline lineno="3135" refid="unionnonstd_1_1optional__lite_1_1detail_1_1storage__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="unionnonstd_1_1optional__lite_1_1detail_1_1storage__t" kindref="compound">storage_t</ref><sp/>{</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>private:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>template&lt;<sp/>typename<sp/>&gt;<sp/>friend<sp/>class<sp/>optional;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3138"><highlight class="normal"></highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>value_type;</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"></highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><ref refid="unionnonstd_1_1optional__lite_1_1detail_1_1storage__t" kindref="compound">storage_t</ref>()<sp/>optional_is_default</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"></highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="unionnonstd_1_1optional__lite_1_1detail_1_1storage__t" kindref="compound">storage_t</ref>(value_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/>construct_value(v);</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"></highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>construct_value(value_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v)<sp/>{<sp/>::new<sp/>(value_ptr())<sp/>value_type(v);<sp/>}</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"></highlight></codeline>
<codeline lineno="3149"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3150"><highlight class="normal"></highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="unionnonstd_1_1optional__lite_1_1detail_1_1storage__t" kindref="compound">storage_t</ref>(value_type<sp/>&amp;&amp;v)<sp/>{<sp/>construct_value(std::move(v));<sp/>}</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"></highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>construct_value(value_type<sp/>&amp;&amp;v)<sp/>{<sp/>::new<sp/>(value_ptr())<sp/>value_type(std::move(v));<sp/>}</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"></highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>emplace(Args<sp/>&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/>::new<sp/>(value_ptr())<sp/>value_type(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"></highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">U,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>emplace(std::initializer_list&lt;U&gt;<sp/>il,<sp/>Args<sp/>&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/>::new<sp/>(value_ptr())<sp/>value_type(il,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"></highlight></codeline>
<codeline lineno="3163"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3164"><highlight class="normal"></highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destruct_value()<sp/>{<sp/>value_ptr()-&gt;~T();<sp/>}</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"></highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/>optional_nodiscard<sp/>value_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*value_ptr()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>as&lt;value_type&gt;();<sp/>}</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"></highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/>value_type<sp/>*value_ptr()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>as&lt;value_type&gt;();<sp/>}</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"></highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/>optional_nodiscard<sp/>value_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;value()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>optional_ref_qual<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*value_ptr();<sp/>}</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"></highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/>value_type<sp/>&amp;value()<sp/>optional_ref_qual<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*value_ptr();<sp/>}</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"></highlight></codeline>
<codeline lineno="3175"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_HAVE(REF_QUALIFIER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3176"><highlight class="normal"></highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/>optional_nodiscard<sp/>value_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;&amp;value()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>optional_refref_qual<sp/>{</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(value());</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"></highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/>value_type<sp/>&amp;&amp;value()<sp/>optional_refref_qual<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(value());<sp/>}</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"></highlight></codeline>
<codeline lineno="3183"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3184"><highlight class="normal"></highlight></codeline>
<codeline lineno="3185"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3186"><highlight class="normal"></highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1optional__lite_1_1detail_1_1storage__t_1_1aligned__storage__t" kindref="compound">aligned_storage_t</ref><sp/>=</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::aligned_storage&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(value_type),<sp/></highlight><highlight class="keyword">alignof</highlight><highlight class="normal">(value_type)&gt;::type;</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/><ref refid="structnonstd_1_1optional__lite_1_1detail_1_1storage__t_1_1aligned__storage__t" kindref="compound">aligned_storage_t</ref><sp/>data;</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"></highlight></codeline>
<codeline lineno="3191"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>optional_CONFIG_MAX_ALIGN_HACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3192"><highlight class="normal"></highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>data[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(value_type)];</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structnonstd_1_1optional__lite_1_1detail_1_1storage__t_1_1aligned__storage__t" kindref="compound">aligned_storage_t</ref>;</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"></highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/>max_align_t<sp/>hack;</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><ref refid="structnonstd_1_1optional__lite_1_1detail_1_1storage__t_1_1aligned__storage__t" kindref="compound">aligned_storage_t</ref><sp/>data;</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"></highlight></codeline>
<codeline lineno="3200"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>optional_ALIGN_AS(value_type)<sp/>align_as_type;</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"></highlight></codeline>
<codeline lineno="3203" refid="structnonstd_1_1optional__lite_1_1detail_1_1storage__t_1_1aligned__storage__t" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/>align_as_type<sp/>data[1<sp/>+<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(value_type)<sp/>-<sp/>1)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(align_as_type)];</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="structnonstd_1_1optional__lite_1_1detail_1_1storage__t_1_1aligned__storage__t" kindref="compound">aligned_storage_t</ref>;</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/><ref refid="structnonstd_1_1optional__lite_1_1detail_1_1storage__t_1_1aligned__storage__t" kindref="compound">aligned_storage_t</ref><sp/>data;</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"></highlight></codeline>
<codeline lineno="3208"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>optional_ALIGN_AS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3209"><highlight class="normal"></highlight></codeline>
<codeline lineno="3210"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>optional_CONFIG_MAX_ALIGN_HACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3211"><highlight class="normal"></highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/>optional_nodiscard<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr()<sp/>optional_noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;data;<sp/>}</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"></highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/>optional_nodiscard<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*ptr()<sp/>const<sp/>optional_noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;data;<sp/>}</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"></highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;<sp/>optional_nodiscard<sp/>U<sp/>*as()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr());<sp/>}</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"></highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;<sp/>optional_nodiscard<sp/>U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*as()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">U<sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr());</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3221"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"></highlight></codeline>
<codeline lineno="3223"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3224"><highlight class="normal"></highlight></codeline>
<codeline lineno="3226"><highlight class="normal"></highlight></codeline>
<codeline lineno="3227" refid="structnonstd_1_1optional__lite_1_1nullopt__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1optional__lite_1_1nullopt__t" kindref="compound">nullopt_t</ref><sp/>{</highlight></codeline>
<codeline lineno="3228" refid="structnonstd_1_1optional__lite_1_1nullopt__t_1_1init" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnonstd_1_1optional__lite_1_1nullopt__t_1_1init" kindref="compound">init</ref><sp/>{};</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>optional_constexpr<sp/><ref refid="structnonstd_1_1optional__lite_1_1nullopt__t" kindref="compound">nullopt_t</ref>(<ref refid="structnonstd_1_1optional__lite_1_1nullopt__t_1_1init" kindref="compound">init</ref><sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal">)<sp/>optional_noexcept<sp/>{}</highlight></codeline>
<codeline lineno="3230"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"></highlight></codeline>
<codeline lineno="3232"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_HAVE(CONSTEXPR_11)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3233"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="structnonstd_1_1optional__lite_1_1nullopt__t" kindref="compound">nullopt_t</ref><sp/>nullopt{<ref refid="structnonstd_1_1optional__lite_1_1nullopt__t_1_1init" kindref="compound">nullopt_t::init</ref>{}};</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>extra<sp/>parenthesis<sp/>to<sp/>prevent<sp/>the<sp/>most<sp/>vexing<sp/>parse:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3236"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nullopt_t<sp/>nullopt((nullopt_t::init()));</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3238"><highlight class="normal"></highlight></codeline>
<codeline lineno="3240"><highlight class="normal"></highlight></codeline>
<codeline lineno="3241"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!optional_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3242"><highlight class="normal"></highlight></codeline>
<codeline lineno="3243"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">bad_optional_access<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::logic_error<sp/>{</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>bad_optional_access()<sp/>:<sp/>logic_error(</highlight><highlight class="stringliteral">&quot;bad<sp/>optional<sp/>access&quot;</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="3246"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"></highlight></codeline>
<codeline lineno="3248"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>optional_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3249"><highlight class="normal"></highlight></codeline>
<codeline lineno="3251"><highlight class="normal"></highlight></codeline>
<codeline lineno="3252" refid="classnonstd_1_1optional__lite_1_1optional" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref><sp/>{</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref>;</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"></highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref>::*safe_bool)()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"></highlight></codeline>
<codeline lineno="3258"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>value_type;</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"></highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>x.x.3.1,<sp/>constructors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3262"><highlight class="normal"></highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1a<sp/>-<sp/>default<sp/>construct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/>optional_constexpr<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref>()<sp/>optional_noexcept<sp/>:<sp/>has_value_(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/>contained()<sp/>{}</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"></highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1b<sp/>-<sp/>construct<sp/>explicitly<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(<sp/>google-explicit-constructor,<sp/>hicpp-explicit-conversions<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/>optional_constexpr<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref>(<ref refid="structnonstd_1_1optional__lite_1_1nullopt__t" kindref="compound">nullopt_t</ref><sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal">)<sp/>optional_noexcept<sp/>:<sp/>has_value_(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contained()<sp/>{}</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"></highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/>copy-construct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3272"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>template&lt;<sp/>typename<sp/>U<sp/>=<sp/>T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>optional_REQUIRES_T(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_copy_constructible&lt;U&gt;::value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>std11::is_trivially_copy_constructible&lt;U&gt;::value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3279"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/>optional_constexpr14<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref>(<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other)<sp/>:<sp/>has_value_(other.has_value())<sp/>{</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.has_value())<sp/>{</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>contained.construct_value(other.contained.value());</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"></highlight></codeline>
<codeline lineno="3286"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3287"><highlight class="normal"></highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>3<sp/>(C++11)<sp/>-<sp/>move-construct<sp/>from<sp/>optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>T<sp/>optional_REQUIRES_T(std::is_move_constructible&lt;U&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std11::is_trivially_move_constructible&lt;U&gt;::value)&gt;</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/>optional_constexpr14<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref>(<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref><sp/>&amp;&amp;other)</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(<sp/>performance-noexcept-move-constructor<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(std::is_nothrow_move_constructible&lt;T&gt;::value)</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>has_value_(other.has_value())<sp/>{</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.has_value())<sp/>{</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>contained.construct_value(std::move(other.contained.value()));</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"></highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>4a<sp/>(C++11)<sp/>-<sp/>explicit<sp/>converting<sp/>copy-construct<sp/>from<sp/>optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>optional_REQUIRES_T(std::is_constructible&lt;T,<sp/>U<sp/>const<sp/>&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;T,<sp/>optional&lt;U&gt;<sp/>&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;T,<sp/>optional&lt;U&gt;<sp/>&amp;&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;T,<sp/>optional&lt;U&gt;<sp/>const<sp/>&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;T,<sp/>optional&lt;U&gt;<sp/>const<sp/>&amp;&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;optional&lt;U&gt;<sp/>&amp;,<sp/>T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;optional&lt;U&gt;<sp/>&amp;&amp;,<sp/>T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;optional&lt;U&gt;<sp/>const<sp/>&amp;,<sp/>T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;optional&lt;U&gt;<sp/>const<sp/>&amp;&amp;,<sp/>T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;U<sp/>const<sp/>&amp;,<sp/>T&gt;::value<sp/></highlight><highlight class="comment">/*=&gt;<sp/>explicit</highlight></codeline>
<codeline lineno="3311"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)&gt;</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref>(<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other)<sp/>:<sp/>has_value_(other.has_value())<sp/>{</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.has_value())<sp/>{</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>contained.construct_value(T{other.contained.value()});</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3319"><highlight class="normal"></highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>4b<sp/>(C++98<sp/>and<sp/>later)<sp/>-<sp/>non-explicit<sp/>converting<sp/>copy-construct<sp/>from<sp/>optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optional_REQUIRES_T(std::is_constructible&lt;T,<sp/>U<sp/>const<sp/>&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;T,<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/>&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;T,<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/>&amp;&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;T,<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;T,<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/>&amp;,<sp/>T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/>&amp;&amp;,<sp/>T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;,<sp/>T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;&amp;,<sp/>T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_convertible&lt;U<sp/>const<sp/>&amp;,<sp/>T&gt;::value<sp/></highlight><highlight class="comment">/*=&gt;<sp/>non-explicit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(<sp/>google-explicit-constructor,<sp/>hicpp-explicit-conversions<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*non-explicit*/</highlight><highlight class="normal"><sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref>(<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other)<sp/>:<sp/>has_value_(other.has_value())<sp/>{</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.has_value())<sp/>{</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>contained.construct_value(other.contained.value());</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"></highlight></codeline>
<codeline lineno="3343"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3344"><highlight class="normal"></highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>5a<sp/>(C++11)<sp/>-<sp/>explicit<sp/>converting<sp/>move-construct<sp/>from<sp/>optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>optional_REQUIRES_T(std::is_constructible&lt;T,<sp/>U<sp/>&amp;&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;T,<sp/>optional&lt;U&gt;<sp/>&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;T,<sp/>optional&lt;U&gt;<sp/>&amp;&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;T,<sp/>optional&lt;U&gt;<sp/>const<sp/>&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;T,<sp/>optional&lt;U&gt;<sp/>const<sp/>&amp;&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;optional&lt;U&gt;<sp/>&amp;,<sp/>T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;optional&lt;U&gt;<sp/>&amp;&amp;,<sp/>T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;optional&lt;U&gt;<sp/>const<sp/>&amp;,<sp/>T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;optional&lt;U&gt;<sp/>const<sp/>&amp;&amp;,<sp/>T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;U<sp/>&amp;&amp;,<sp/>T&gt;::value<sp/></highlight><highlight class="comment">/*=&gt;<sp/>explicit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)&gt;</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref>(<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/>&amp;&amp;other)<sp/>:<sp/>has_value_(other.has_value())<sp/>{</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.has_value())<sp/>{</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>contained.construct_value(T{std::move(other.contained.value())});</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"></highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>5a<sp/>(C++11)<sp/>-<sp/>non-explicit<sp/>converting<sp/>move-construct<sp/>from<sp/>optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>optional_REQUIRES_T(std::is_constructible&lt;T,<sp/>U<sp/>&amp;&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;T,<sp/>optional&lt;U&gt;<sp/>&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;T,<sp/>optional&lt;U&gt;<sp/>&amp;&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;T,<sp/>optional&lt;U&gt;<sp/>const<sp/>&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;T,<sp/>optional&lt;U&gt;<sp/>const<sp/>&amp;&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;optional&lt;U&gt;<sp/>&amp;,<sp/>T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;optional&lt;U&gt;<sp/>&amp;&amp;,<sp/>T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;optional&lt;U&gt;<sp/>const<sp/>&amp;,<sp/>T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;optional&lt;U&gt;<sp/>const<sp/>&amp;&amp;,<sp/>T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_convertible&lt;U<sp/>&amp;&amp;,<sp/>T&gt;::value<sp/></highlight><highlight class="comment">/*=&gt;<sp/>non-explicit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)&gt;</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(<sp/>google-explicit-constructor,<sp/>hicpp-explicit-conversions<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*non-explicit*/</highlight><highlight class="normal"><sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref>(<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/>&amp;&amp;other)<sp/>:<sp/>has_value_(other.has_value())<sp/>{</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.has_value())<sp/>{</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>contained.construct_value(std::move(other.contained.value()));</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"></highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>6<sp/>(C++11)<sp/>-<sp/>in-place<sp/>construct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args<sp/>optional_REQUIRES_T(std::is_constructible&lt;T,<sp/>Args<sp/>&amp;&amp;...&gt;::value)&gt;</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/>optional_constexpr<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref>(nonstd_lite_in_place_t(T),<sp/>Args<sp/>&amp;&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>has_value_(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>contained(T(std::forward&lt;Args&gt;(args)...))<sp/>{}</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"></highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>7<sp/>(C++11)<sp/>-<sp/>in-place<sp/>construct,<sp/><sp/>initializer-list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args<sp/>optional_REQUIRES_T(</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_constructible&lt;T,<sp/>std::initializer_list&lt;U&gt;<sp/>&amp;,<sp/>Args<sp/>&amp;&amp;...&gt;::value)&gt;</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/>optional_constexpr<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref>(nonstd_lite_in_place_t(T),<sp/>std::initializer_list&lt;U&gt;<sp/>il,</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args<sp/>&amp;&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>has_value_(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>contained(T(il,<sp/>std::forward&lt;Args&gt;(args)...))<sp/>{}</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"></highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>8a<sp/>(C++11)<sp/>-<sp/>explicit<sp/>move<sp/>construct<sp/>from<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>T<sp/>optional_REQUIRES_T(</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_constructible&lt;T,<sp/>U<sp/>&amp;&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_same&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std20::remove_cvref&lt;U&gt;::type,<sp/>nonstd_lite_in_place_t(U)&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_same&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std20::remove_cvref&lt;U&gt;::type,<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;T&gt;</ref>&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;U<sp/>&amp;&amp;,<sp/>T&gt;::value<sp/></highlight><highlight class="comment">/*=&gt;<sp/>explicit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)&gt;</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/>optional_constexpr<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref>(U<sp/>&amp;&amp;value)</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>has_value_(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>contained(T{std::forward&lt;U&gt;(value)})<sp/>{}</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"></highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>8b<sp/>(C++11)<sp/>-<sp/>non-explicit<sp/>move<sp/>construct<sp/>from<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>T<sp/>optional_REQUIRES_T(</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_constructible&lt;T,<sp/>U<sp/>&amp;&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_same&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std20::remove_cvref&lt;U&gt;::type,<sp/>nonstd_lite_in_place_t(U)&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_same&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std20::remove_cvref&lt;U&gt;::type,<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;T&gt;</ref>&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_convertible&lt;U<sp/>&amp;&amp;,<sp/>T&gt;::value<sp/></highlight><highlight class="comment">/*=&gt;<sp/>non-explicit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)&gt;</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(<sp/>google-explicit-constructor,<sp/>hicpp-explicit-conversions<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/>optional_constexpr<sp/></highlight><highlight class="comment">/*non-explicit*/</highlight><highlight class="normal"><sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref>(U<sp/>&amp;&amp;value)</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>has_value_(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>contained(std::forward&lt;U&gt;(value))<sp/>{}</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"></highlight></codeline>
<codeline lineno="3418"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3419"><highlight class="normal"></highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>8<sp/>(C++98)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref>(value_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;value)<sp/>:<sp/>has_value_(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>contained(value)<sp/>{}</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"></highlight></codeline>
<codeline lineno="3423"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3424"><highlight class="normal"></highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>x.x.3.2,<sp/>destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3426"><highlight class="normal"></highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">~optional</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_value())<sp/>{</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>contained.destruct_value();</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"></highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>x.x.3.3,<sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3434"><highlight class="normal"></highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>(C++98and<sp/>later)<sp/>-<sp/><sp/>assign<sp/>explicitly<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref><sp/>&amp;operator=(<ref refid="structnonstd_1_1optional__lite_1_1nullopt__t" kindref="compound">nullopt_t</ref><sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal">)<sp/>optional_noexcept<sp/>{</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/>reset();</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"></highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>(C++98and<sp/>later)<sp/>-<sp/>copy-assign<sp/>from<sp/>optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3442"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(<sp/>cppcoreguidelines-c-copy-assignment-signature,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>misc-unconventional-assign-operator<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/>optional_REQUIRES_R(<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref><sp/>&amp;,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>std::is_copy_constructible&lt;T&gt;::value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>std::is_copy_assignable&lt;T&gt;::value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/>operator=(<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_nothrow_move_assignable&lt;T&gt;::value<sp/>&amp;&amp;std::is_nothrow_move_constructible&lt;T&gt;::value)</highlight></codeline>
<codeline lineno="3451"><highlight class="normal">#</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref><sp/>&amp;</highlight><highlight class="keyword">operator</highlight><highlight class="normal">=(<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other)</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((has_value()<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(other.has_value()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reset();</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((has_value()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(other.has_value()<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>initialize(*other);</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((has_value()<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(other.has_value()<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>contained.value()<sp/>=<sp/>*other;</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"></highlight></codeline>
<codeline lineno="3465"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3466"><highlight class="normal"></highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>3<sp/>(C++11)<sp/>-<sp/>move-assign<sp/>from<sp/>optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(<sp/>cppcoreguidelines-c-copy-assignment-signature,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>misc-unconventional-assign-operator<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/>optional_REQUIRES_R(<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref><sp/>&amp;,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>std::is_move_constructible&lt;T&gt;::value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>std::is_move_assignable&lt;T&gt;::value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/>operator=(<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref><sp/>&amp;&amp;other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((has_value()<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(other.has_value()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reset();</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((has_value()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(other.has_value()<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>initialize(std::move(*other));</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((has_value()<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(other.has_value()<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>contained.value()<sp/>=<sp/>std::move(*other);</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"></highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>4<sp/>(C++11)<sp/>-<sp/>move-assign<sp/>from<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>T&gt;</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(<sp/>cppcoreguidelines-c-copy-assignment-signature,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>misc-unconventional-assign-operator<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/>optional_REQUIRES_R(</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref><sp/>&amp;,</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_constructible&lt;T,<sp/>U&gt;::value<sp/>&amp;&amp;std::is_assignable&lt;T<sp/>&amp;,<sp/>U&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_same&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std20::remove_cvref&lt;U&gt;::type,<sp/>nonstd_lite_in_place_t(U)&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_same&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std20::remove_cvref&lt;U&gt;::type,<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;T&gt;</ref>&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!(std::is_scalar&lt;T&gt;::value<sp/>&amp;&amp;<sp/>std::is_same&lt;T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::decay&lt;U&gt;::type&gt;::value))</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/>operator=(U<sp/>&amp;&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_value())<sp/>{</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>contained.value()<sp/>=<sp/>std::forward&lt;U&gt;(value);</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>initialize(T(std::forward&lt;U&gt;(value)));</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"></highlight></codeline>
<codeline lineno="3504"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3505"><highlight class="normal"></highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>4<sp/>(C++98)<sp/>-<sp/>copy-assign<sp/>from<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/></highlight><highlight class="comment">/*=<sp/>T*/</highlight><highlight class="normal">&gt;<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref><sp/>&amp;operator=(U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_value())</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>contained.value()<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>initialize(T(value));</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"></highlight></codeline>
<codeline lineno="3515"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3516"><highlight class="normal"></highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>5<sp/>(C++98<sp/>and<sp/>later)<sp/>-<sp/>converting<sp/>copy-assign<sp/>from<sp/>optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(<sp/>cppcoreguidelines-c-copy-assignment-signature,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>misc-unconventional-assign-operator<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/>optional_REQUIRES_R(</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref><sp/>&amp;,</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_constructible&lt;T,<sp/>U<sp/>const<sp/>&amp;&gt;::value<sp/>&amp;&amp;std::is_assignable&lt;T<sp/>&amp;,<sp/>U<sp/>const<sp/>&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;T,<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/>&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;T,<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/>&amp;&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;T,<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;T,<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/>&amp;,<sp/>T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/>&amp;&amp;,<sp/>T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;,<sp/>T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;&amp;,<sp/>T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_assignable&lt;T<sp/>&amp;,<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/>&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_assignable&lt;T<sp/>&amp;,<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/>&amp;&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_assignable&lt;T<sp/>&amp;,<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_assignable&lt;T<sp/>&amp;,<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;&amp;&gt;::value)</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref><sp/>&amp;</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/>operator=(<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref>(other);</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"></highlight></codeline>
<codeline lineno="3544"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3545"><highlight class="normal"></highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>6<sp/>(C++11)<sp/>-<sp/><sp/>converting<sp/>move-assign<sp/>from<sp/>optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(<sp/>cppcoreguidelines-c-copy-assignment-signature,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>misc-unconventional-assign-operator<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/>optional_REQUIRES_R(<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref><sp/>&amp;,</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_constructible&lt;T,<sp/>U&gt;::value<sp/>&amp;&amp;std::is_assignable&lt;T<sp/>&amp;,<sp/>U&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;T,<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/>&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;T,<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/>&amp;&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;T,<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;T,<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/>&amp;,<sp/>T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/>&amp;&amp;,<sp/>T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;,<sp/>T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;&amp;,<sp/>T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_assignable&lt;T<sp/>&amp;,<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/>&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_assignable&lt;T<sp/>&amp;,<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/>&amp;&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_assignable&lt;T<sp/>&amp;,<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_assignable&lt;T<sp/>&amp;,<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;&amp;&gt;::value)</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/>operator=(<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/>&amp;&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref>(std::move(other));</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"></highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>7<sp/>(C++11)<sp/>-<sp/>emplace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args<sp/>optional_REQUIRES_T(std::is_constructible&lt;T,<sp/>Args<sp/>&amp;&amp;...&gt;::value)&gt;</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/>T<sp/>&amp;emplace(Args<sp/>&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>nullopt;</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/>contained.emplace(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/>has_value_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>contained.value();</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"></highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>8<sp/>(C++11)<sp/>-<sp/>emplace,<sp/>initializer-list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args<sp/>optional_REQUIRES_T(</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_constructible&lt;T,<sp/>std::initializer_list&lt;U&gt;<sp/>&amp;,<sp/>Args<sp/>&amp;&amp;...&gt;::value)&gt;</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/>T<sp/>&amp;emplace(std::initializer_list&lt;U&gt;<sp/>il,<sp/>Args<sp/>&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>nullopt;</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/>contained.emplace(il,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/>has_value_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>contained.value();</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"></highlight></codeline>
<codeline lineno="3588"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3589"><highlight class="normal"></highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>x.x.3.4,<sp/>swap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3591"><highlight class="normal"></highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional</ref><sp/>&amp;other)</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(std::is_nothrow_move_constructible&lt;T&gt;::value<sp/>&amp;&amp;std17::is_nothrow_swappable&lt;T&gt;::value)</highlight></codeline>
<codeline lineno="3595"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::swap;</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((has_value()<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(other.has_value()<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>swap(**</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>*other);</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((has_value()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(other.has_value()<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>initialize(std11::move(*other));</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>other.reset();</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((has_value()<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(other.has_value()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>other.initialize(std11::move(**</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reset();</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"></highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>x.x.3.5,<sp/>observers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3610"><highlight class="normal"></highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/>optional_constexpr<sp/>value_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*operator-&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assert(has_value()),<sp/>contained.value_ptr();</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"></highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/>optional_constexpr14<sp/>value_type<sp/>*operator-&gt;()<sp/>{</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assert(has_value()),<sp/>contained.value_ptr();</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"></highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/>optional_constexpr<sp/>value_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;operator*()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>optional_ref_qual<sp/>{</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assert(has_value()),<sp/>contained.value();</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"></highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/>optional_constexpr14<sp/>value_type<sp/>&amp;operator*()<sp/>optional_ref_qual<sp/>{</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assert(has_value()),<sp/>contained.value();</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"></highlight></codeline>
<codeline lineno="3627"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_HAVE(REF_QUALIFIER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3628"><highlight class="normal"></highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/>optional_constexpr<sp/>value_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;&amp;operator*()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>optional_refref_qual<sp/>{</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(**</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"></highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/>optional_constexpr14<sp/>value_type<sp/>&amp;&amp;operator*()<sp/>optional_refref_qual<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(**</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"></highlight></codeline>
<codeline lineno="3635"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3636"><highlight class="normal"></highlight></codeline>
<codeline lineno="3637"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/>optional_constexpr<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>optional_noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>has_value();<sp/>}</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/>optional_constexpr<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>safe_bool()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>optional_noexcept<sp/>{</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>has_value()<sp/>?<sp/>&amp;optional::this_type_does_not_support_comparisons<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3644"><highlight class="normal"></highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(<sp/>modernize-use-nodiscard<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*optional_nodiscard*/</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_value()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>optional_noexcept<sp/>{</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>has_value_;</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"></highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(<sp/>modernize-use-nodiscard<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*optional_nodiscard*/</highlight><highlight class="normal"><sp/>optional_constexpr14<sp/>value_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;value()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>optional_ref_qual<sp/>{</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(has_value());</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!has_value())<sp/>{</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>bad_optional_access();</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>contained.value();</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"></highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/>optional_constexpr14<sp/>value_type<sp/>&amp;value()<sp/>optional_ref_qual<sp/>{</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(has_value());</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!has_value())<sp/>{</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>bad_optional_access();</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>contained.value();</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"></highlight></codeline>
<codeline lineno="3673"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_HAVE(REF_QUALIFIER)<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="3674"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(!optional_COMPILER_GNUC_VERSION<sp/>||<sp/>optional_COMPILER_GNUC_VERSION<sp/>&gt;=<sp/>490)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3675"><highlight class="normal"></highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(<sp/>modernize-use-nodiscard<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*optional_nodiscard*/</highlight><highlight class="normal"><sp/>optional_constexpr<sp/>value_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;&amp;value()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>optional_refref_qual<sp/>{</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(value());</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"></highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/>optional_constexpr14<sp/>value_type<sp/>&amp;&amp;value()<sp/>optional_refref_qual<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(value());<sp/>}</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"></highlight></codeline>
<codeline lineno="3683"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3684"><highlight class="normal"></highlight></codeline>
<codeline lineno="3685"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3686"><highlight class="normal"></highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;<sp/>optional_constexpr<sp/>value_type<sp/>value_or(U<sp/>&amp;&amp;v)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>optional_ref_qual<sp/>{</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>has_value()<sp/>?<sp/>contained.value()<sp/>:<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::forward&lt;U&gt;(v));</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"></highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;<sp/>optional_constexpr14<sp/>value_type<sp/>value_or(U<sp/>&amp;&amp;v)<sp/>optional_refref_qual<sp/>{</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>has_value()<sp/>?<sp/>std::move(contained.value())<sp/>:<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::forward&lt;U&gt;(v));</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"></highlight></codeline>
<codeline lineno="3695"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3696"><highlight class="normal"></highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;<sp/>optional_constexpr<sp/>value_type<sp/>value_or(U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>has_value()<sp/>?<sp/>contained.value()<sp/>:<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">value_type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v);</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"></highlight></codeline>
<codeline lineno="3701"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3702"><highlight class="normal"></highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>x.x.3.6,<sp/>modifiers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3704"><highlight class="normal"></highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset()<sp/>optional_noexcept<sp/>{</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_value())<sp/>{</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>contained.destruct_value();</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"></highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/>has_value_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"></highlight></codeline>
<codeline lineno="3713"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>this_type_does_not_support_comparisons()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"></highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initialize(V<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!has_value());</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/>contained.construct_value(value);</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/>has_value_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"></highlight></codeline>
<codeline lineno="3722"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initialize(V<sp/>&amp;&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!has_value());</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/>contained.construct_value(std::move(value));</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/>has_value_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"></highlight></codeline>
<codeline lineno="3729"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3730"><highlight class="normal"></highlight></codeline>
<codeline lineno="3731"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_value_;</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><ref refid="unionnonstd_1_1optional__lite_1_1detail_1_1storage__t" kindref="compound">detail::storage_t&lt;value_type&gt;</ref><sp/>contained;</highlight></codeline>
<codeline lineno="3734"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"></highlight></codeline>
<codeline lineno="3736"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Relational<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3737"><highlight class="normal"></highlight></codeline>
<codeline lineno="3738"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x,<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;y)<sp/>{</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bool(x)<sp/>!=<sp/>bool(y)<sp/>?<sp/>false<sp/>:<sp/>!bool(x)<sp/>?<sp/>true<sp/>:<sp/>*x<sp/>==<sp/>*y;</highlight></codeline>
<codeline lineno="3741"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"></highlight></codeline>
<codeline lineno="3743"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x,<sp/><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">optional&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;y)<sp/>{</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(x<sp/>==<sp/>y);</highlight></codeline>
<codeline lineno="3746"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"></highlight></codeline>
<codeline lineno="3748"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x,<sp/>optional&lt;U&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;y)<sp/>{</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!y)<sp/>?<sp/>false<sp/>:<sp/>(!x)<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/>*x<sp/>&lt;<sp/>*y;</highlight></codeline>
<codeline lineno="3751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"></highlight></codeline>
<codeline lineno="3753"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;(optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x,<sp/>optional&lt;U&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;y)<sp/>{</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>x);</highlight></codeline>
<codeline lineno="3756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"></highlight></codeline>
<codeline lineno="3758"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=(optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x,<sp/>optional&lt;U&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;y)<sp/>{</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(y<sp/>&lt;<sp/>x);</highlight></codeline>
<codeline lineno="3761"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"></highlight></codeline>
<codeline lineno="3763"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;=(optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x,<sp/>optional&lt;U&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;y)<sp/>{</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(x<sp/>&lt;<sp/>y);</highlight></codeline>
<codeline lineno="3766"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"></highlight></codeline>
<codeline lineno="3768"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comparison<sp/>with<sp/>nullopt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3769"><highlight class="normal"></highlight></codeline>
<codeline lineno="3770"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x,</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nullopt_t<sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal">)<sp/>optional_noexcept<sp/>{</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!x);</highlight></codeline>
<codeline lineno="3774"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"></highlight></codeline>
<codeline lineno="3776"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(nullopt_t<sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x)<sp/>optional_noexcept<sp/>{</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!x);</highlight></codeline>
<codeline lineno="3780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"></highlight></codeline>
<codeline lineno="3782"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x,</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nullopt_t<sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal">)<sp/>optional_noexcept<sp/>{</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bool(x);</highlight></codeline>
<codeline lineno="3786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"></highlight></codeline>
<codeline lineno="3788"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(nullopt_t<sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x)<sp/>optional_noexcept<sp/>{</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bool(x);</highlight></codeline>
<codeline lineno="3792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"></highlight></codeline>
<codeline lineno="3794"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nullopt_t<sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal">)<sp/>optional_noexcept<sp/>{</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3798"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"></highlight></codeline>
<codeline lineno="3800"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(nullopt_t<sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x)<sp/>optional_noexcept<sp/>{</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bool(x);</highlight></codeline>
<codeline lineno="3804"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"></highlight></codeline>
<codeline lineno="3806"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=(optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x,</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nullopt_t<sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal">)<sp/>optional_noexcept<sp/>{</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!x);</highlight></codeline>
<codeline lineno="3810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"></highlight></codeline>
<codeline lineno="3812"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=(nullopt_t<sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal">)<sp/>optional_noexcept<sp/>{</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3816"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"></highlight></codeline>
<codeline lineno="3818"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;(optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x,</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nullopt_t<sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal">)<sp/>optional_noexcept<sp/>{</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bool(x);</highlight></codeline>
<codeline lineno="3822"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"></highlight></codeline>
<codeline lineno="3824"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;(nullopt_t<sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal">)<sp/>optional_noexcept<sp/>{</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3828"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"></highlight></codeline>
<codeline lineno="3830"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;=(optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nullopt_t<sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal">)<sp/>optional_noexcept<sp/>{</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"></highlight></codeline>
<codeline lineno="3836"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;=(nullopt_t<sp/></highlight><highlight class="comment">/*unused*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x)<sp/>optional_noexcept<sp/>{</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!x);</highlight></codeline>
<codeline lineno="3840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"></highlight></codeline>
<codeline lineno="3842"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comparison<sp/>with<sp/>T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3843"><highlight class="normal"></highlight></codeline>
<codeline lineno="3844"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x,<sp/>U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bool(x)<sp/>?<sp/>*x<sp/>==<sp/>v<sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3847"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"></highlight></codeline>
<codeline lineno="3849"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v,<sp/>optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x)<sp/>{</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bool(x)<sp/>?<sp/>v<sp/>==<sp/>*x<sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3852"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"></highlight></codeline>
<codeline lineno="3854"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x,<sp/>U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bool(x)<sp/>?<sp/>*x<sp/>!=<sp/>v<sp/>:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3857"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"></highlight></codeline>
<codeline lineno="3859"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v,<sp/>optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x)<sp/>{</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bool(x)<sp/>?<sp/>v<sp/>!=<sp/>*x<sp/>:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"></highlight></codeline>
<codeline lineno="3864"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x,<sp/>U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bool(x)<sp/>?<sp/>*x<sp/>&lt;<sp/>v<sp/>:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3867"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"></highlight></codeline>
<codeline lineno="3869"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v,<sp/>optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x)<sp/>{</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bool(x)<sp/>?<sp/>v<sp/>&lt;<sp/>*x<sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"></highlight></codeline>
<codeline lineno="3874"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=(optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x,<sp/>U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bool(x)<sp/>?<sp/>*x<sp/>&lt;=<sp/>v<sp/>:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"></highlight></codeline>
<codeline lineno="3879"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=(U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v,<sp/>optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x)<sp/>{</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bool(x)<sp/>?<sp/>v<sp/>&lt;=<sp/>*x<sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3882"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"></highlight></codeline>
<codeline lineno="3884"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;(optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x,<sp/>U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bool(x)<sp/>?<sp/>*x<sp/>&gt;<sp/>v<sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3887"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"></highlight></codeline>
<codeline lineno="3889"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;(U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v,<sp/>optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x)<sp/>{</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bool(x)<sp/>?<sp/>v<sp/>&gt;<sp/>*x<sp/>:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3892"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"></highlight></codeline>
<codeline lineno="3894"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;=(optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x,<sp/>U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bool(x)<sp/>?<sp/>*x<sp/>&gt;=<sp/>v<sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"></highlight></codeline>
<codeline lineno="3899"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>optional_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;=(U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v,<sp/>optional&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;x)<sp/>{</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bool(x)<sp/>?<sp/>v<sp/>&gt;=<sp/>*x<sp/>:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3902"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"></highlight></codeline>
<codeline lineno="3904"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specialized<sp/>algorithms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3905"><highlight class="normal"></highlight></codeline>
<codeline lineno="3906"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optional_REQUIRES_T(std::is_move_constructible&lt;T&gt;::value<sp/>&amp;&amp;std17::is_swappable&lt;T&gt;::value)</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(optional&lt;T&gt;<sp/>&amp;x,<sp/>optional&lt;T&gt;<sp/>&amp;y)</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(</highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(x.swap(y)))</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3916"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/>x.swap(y);</highlight></codeline>
<codeline lineno="3918"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"></highlight></codeline>
<codeline lineno="3920"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3921"><highlight class="normal"></highlight></codeline>
<codeline lineno="3922"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3923"><highlight class="normal">optional_constexpr<sp/>optional&lt;typename<sp/>std::decay&lt;T&gt;::type&gt;<sp/>make_optional(T<sp/>&amp;&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>optional&lt;typename<sp/>std::decay&lt;T&gt;::type&gt;(std::forward&lt;T&gt;(value));</highlight></codeline>
<codeline lineno="3925"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"></highlight></codeline>
<codeline lineno="3927"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="3928"><highlight class="normal">optional_constexpr<sp/>optional&lt;T&gt;<sp/>make_optional(Args<sp/>&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>optional&lt;T&gt;(nonstd_lite_in_place(T),<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="3930"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"></highlight></codeline>
<codeline lineno="3932"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="3933"><highlight class="normal">optional_constexpr<sp/>optional&lt;T&gt;<sp/>make_optional(std::initializer_list&lt;U&gt;<sp/>il,<sp/>Args<sp/>&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>optional&lt;T&gt;(nonstd_lite_in_place(T),<sp/>il,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="3935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"></highlight></codeline>
<codeline lineno="3937"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3938"><highlight class="normal"></highlight></codeline>
<codeline lineno="3939"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>optional&lt;T&gt;<sp/>make_optional(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;value)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>optional&lt;T&gt;(value);<sp/>}</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"></highlight></codeline>
<codeline lineno="3941"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3942"><highlight class="normal"></highlight></codeline>
<codeline lineno="3943"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>optional_lite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3944"><highlight class="normal"></highlight></codeline>
<codeline lineno="3945"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">optional_lite::nullopt;</highlight></codeline>
<codeline lineno="3946"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">optional_lite::nullopt_t;</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">optional_lite::optional;</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"></highlight></codeline>
<codeline lineno="3949"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!optional_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3950"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">optional_lite::bad_optional_access;</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3952"><highlight class="normal"></highlight></codeline>
<codeline lineno="3953"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">optional_lite::make_optional;</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"></highlight></codeline>
<codeline lineno="3955"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>nonstd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3956"><highlight class="normal"></highlight></codeline>
<codeline lineno="3957"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3958"><highlight class="normal"></highlight></codeline>
<codeline lineno="3959"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specialize<sp/>the<sp/>std::hash<sp/>algorithm:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3960"><highlight class="normal"></highlight></codeline>
<codeline lineno="3961"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std<sp/>{</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"></highlight></codeline>
<codeline lineno="3963"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hash&lt;nonstd::optional&lt;T&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/>std::size_t<sp/>operator()(<ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">nonstd::optional&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>optional_noexcept<sp/>{</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bool(v)<sp/>?<sp/>std::hash&lt;T&gt;{}(*v)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3968"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"></highlight></codeline>
<codeline lineno="3970"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3971"><highlight class="normal"></highlight></codeline>
<codeline lineno="3972"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>optional_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3973"><highlight class="normal"></highlight></codeline>
<codeline lineno="3974"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3975"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3976"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3977"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3978"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3979"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3980"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3981"><highlight class="normal"></highlight></codeline>
<codeline lineno="3982"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>optional_USES_STD_OPTIONAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3983"><highlight class="normal"></highlight></codeline>
<codeline lineno="3984"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NONSTD_OPTIONAL_LITE_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3985"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2017-2020<sp/>by<sp/>Martin<sp/>Moene</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3986"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3987"><highlight class="normal"></highlight><highlight class="comment">//<sp/>string-view<sp/>lite,<sp/>a<sp/>C++17-like<sp/>string_view<sp/>for<sp/>C++98<sp/>and<sp/>later.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3988"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>more<sp/>information<sp/>see<sp/>https://github.com/martinmoene/string-view-lite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3989"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3990"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3991"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(See<sp/>accompanying<sp/>file<sp/>LICENSE.txt<sp/>or<sp/>copy<sp/>at<sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3992"><highlight class="normal"></highlight></codeline>
<codeline lineno="3993"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3994"><highlight class="normal"></highlight></codeline>
<codeline lineno="3995"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NONSTD_SV_LITE_H_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3996"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NONSTD_SV_LITE_H_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3997"><highlight class="normal"></highlight></codeline>
<codeline lineno="3998"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>string_view_lite_MAJOR<sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3999"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>string_view_lite_MINOR<sp/><sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4000"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>string_view_lite_PATCH<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4001"><highlight class="normal"></highlight></codeline>
<codeline lineno="4002"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>string_view_lite_VERSION<sp/><sp/>nssv_STRINGIFY(string_view_lite_MAJOR)<sp/>&quot;.&quot;</highlight><highlight class="normal"><sp/>nssv_STRINGIFY(string_view_lite_MINOR)<sp/>&quot;.&quot;<sp/>nssv_STRINGIFY(string_view_lite_PATCH)</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"></highlight></codeline>
<codeline lineno="4004"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_STRINGIFY(<sp/><sp/>x<sp/>)<sp/><sp/>nssv_STRINGIFY_(<sp/>x<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4005"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_STRINGIFY_(<sp/>x<sp/>)<sp/><sp/>#x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4006"><highlight class="normal"></highlight></codeline>
<codeline lineno="4007"><highlight class="normal"></highlight><highlight class="comment">//<sp/>string-view<sp/>lite<sp/>configuration:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4008"><highlight class="normal"></highlight></codeline>
<codeline lineno="4009"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_STRING_VIEW_DEFAULT<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4010"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_STRING_VIEW_NONSTD<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4011"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_STRING_VIEW_STD<sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4012"><highlight class="normal"></highlight></codeline>
<codeline lineno="4013"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tweak<sp/>header<sp/>support:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4014"><highlight class="normal"></highlight></codeline>
<codeline lineno="4015"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__has_include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4016"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>__has_include(&lt;nonstd/string_view.tweak.hpp&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4017"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;nonstd/string_view.tweak.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4018"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4019"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_HAVE_TWEAK_HEADER<sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4020"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4021"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_HAVE_TWEAK_HEADER<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4022"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>pragma<sp/>message(&quot;string_view.hpp:<sp/>Note:<sp/>Tweak<sp/>header<sp/>not<sp/>supported.&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4023"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4024"><highlight class="normal"></highlight></codeline>
<codeline lineno="4025"><highlight class="normal"></highlight><highlight class="comment">//<sp/>string_view<sp/>selection<sp/>and<sp/>configuration:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4026"><highlight class="normal"></highlight></codeline>
<codeline lineno="4027"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(<sp/>nssv_CONFIG_SELECT_STRING_VIEW<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4028"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_CONFIG_SELECT_STRING_VIEW<sp/><sp/>(<sp/>nssv_HAVE_STD_STRING_VIEW<sp/>?<sp/>nssv_STRING_VIEW_STD<sp/>:<sp/>nssv_STRING_VIEW_NONSTD<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4029"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4030"><highlight class="normal"></highlight></codeline>
<codeline lineno="4031"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/><sp/>nssv_CONFIG_STD_SV_OPERATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4032"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_CONFIG_STD_SV_OPERATOR<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4033"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4034"><highlight class="normal"></highlight></codeline>
<codeline lineno="4035"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/><sp/>nssv_CONFIG_USR_SV_OPERATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4036"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_CONFIG_USR_SV_OPERATOR<sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4037"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4038"><highlight class="normal"></highlight></codeline>
<codeline lineno="4039"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/><sp/>nssv_CONFIG_CONVERSION_STD_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4040"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_CONFIG_CONVERSION_STD_STRING_CLASS_METHODS<sp/><sp/><sp/>nssv_CONFIG_CONVERSION_STD_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4041"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_CONFIG_CONVERSION_STD_STRING_FREE_FUNCTIONS<sp/><sp/>nssv_CONFIG_CONVERSION_STD_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4042"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4043"><highlight class="normal"></highlight></codeline>
<codeline lineno="4044"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/><sp/>nssv_CONFIG_CONVERSION_STD_STRING_CLASS_METHODS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4045"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_CONFIG_CONVERSION_STD_STRING_CLASS_METHODS<sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4046"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4047"><highlight class="normal"></highlight></codeline>
<codeline lineno="4048"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/><sp/>nssv_CONFIG_CONVERSION_STD_STRING_FREE_FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4049"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_CONFIG_CONVERSION_STD_STRING_FREE_FUNCTIONS<sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4050"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4051"><highlight class="normal"></highlight></codeline>
<codeline lineno="4052"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/><sp/>nssv_CONFIG_NO_STREAM_INSERTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4053"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_CONFIG_NO_STREAM_INSERTION<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4054"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4055"><highlight class="normal"></highlight></codeline>
<codeline lineno="4056"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Control<sp/>presence<sp/>of<sp/>exception<sp/>handling<sp/>(try<sp/>and<sp/>auto<sp/>discover):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4057"><highlight class="normal"></highlight></codeline>
<codeline lineno="4058"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>nssv_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4059"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4060"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4061"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4062"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(__cpp_exceptions)<sp/>||<sp/>defined(__EXCEPTIONS)<sp/>||<sp/>(_HAS_EXCEPTIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4063"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>nssv_CONFIG_NO_EXCEPTIONS<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4064"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4065"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>nssv_CONFIG_NO_EXCEPTIONS<sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4066"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4067"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4068"><highlight class="normal"></highlight></codeline>
<codeline lineno="4069"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++<sp/>language<sp/>version<sp/>detection<sp/>(C++20<sp/>is<sp/>speculative):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4070"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>VC14.0/1900<sp/>(VS2015)<sp/>lacks<sp/>too<sp/>much<sp/>from<sp/>C++14.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4071"><highlight class="normal"></highlight></codeline>
<codeline lineno="4072"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/><sp/><sp/>nssv_CPLUSPLUS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4073"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(_MSVC_LANG<sp/>)<sp/>&amp;&amp;<sp/>!defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4074"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>nssv_CPLUSPLUS<sp/><sp/>(_MSC_VER<sp/>==<sp/>1900<sp/>?<sp/>201103L<sp/>:<sp/>_MSVC_LANG<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4075"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4076"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>nssv_CPLUSPLUS<sp/><sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4077"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4078"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4079"><highlight class="normal"></highlight></codeline>
<codeline lineno="4080"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_CPP98_OR_GREATER<sp/><sp/>(<sp/>nssv_CPLUSPLUS<sp/>&gt;=<sp/>199711L<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4081"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_CPP11_OR_GREATER<sp/><sp/>(<sp/>nssv_CPLUSPLUS<sp/>&gt;=<sp/>201103L<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4082"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_CPP11_OR_GREATER_<sp/>(<sp/>nssv_CPLUSPLUS<sp/>&gt;=<sp/>201103L<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4083"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_CPP14_OR_GREATER<sp/><sp/>(<sp/>nssv_CPLUSPLUS<sp/>&gt;=<sp/>201402L<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4084"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_CPP17_OR_GREATER<sp/><sp/>(<sp/>nssv_CPLUSPLUS<sp/>&gt;=<sp/>201703L<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4085"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_CPP20_OR_GREATER<sp/><sp/>(<sp/>nssv_CPLUSPLUS<sp/>&gt;=<sp/>202000L<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4086"><highlight class="normal"></highlight></codeline>
<codeline lineno="4087"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>C++17<sp/>std::string_view<sp/>if<sp/>available<sp/>and<sp/>requested:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4088"><highlight class="normal"></highlight></codeline>
<codeline lineno="4089"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_CPP17_OR_GREATER<sp/>&amp;&amp;<sp/>defined(__has_include<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4090"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>__has_include(<sp/>&lt;string_view&gt;<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4091"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>nssv_HAVE_STD_STRING_VIEW<sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4092"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4093"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>nssv_HAVE_STD_STRING_VIEW<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4094"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4095"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4096"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/><sp/>nssv_HAVE_STD_STRING_VIEW<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4097"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4098"><highlight class="normal"></highlight></codeline>
<codeline lineno="4099"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>nssv_USES_STD_STRING_VIEW<sp/><sp/>(<sp/>(nssv_CONFIG_SELECT_STRING_VIEW<sp/>==<sp/>nssv_STRING_VIEW_STD)<sp/>||<sp/>((nssv_CONFIG_SELECT_STRING_VIEW<sp/>==<sp/>nssv_STRING_VIEW_DEFAULT)<sp/>&amp;&amp;<sp/>nssv_HAVE_STD_STRING_VIEW)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4100"><highlight class="normal"></highlight></codeline>
<codeline lineno="4101"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_HAVE_STARTS_WITH<sp/>(<sp/>nssv_CPP20_OR_GREATER<sp/>||<sp/>!nssv_USES_STD_STRING_VIEW<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4102"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_HAVE_ENDS_WITH<sp/><sp/><sp/><sp/><sp/>nssv_HAVE_STARTS_WITH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4103"><highlight class="normal"></highlight></codeline>
<codeline lineno="4104"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>C++17<sp/>std::string_view:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4106"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4107"><highlight class="normal"></highlight></codeline>
<codeline lineno="4108"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_USES_STD_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4109"><highlight class="normal"></highlight></codeline>
<codeline lineno="4110"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string_view&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4111"><highlight class="normal"></highlight></codeline>
<codeline lineno="4112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Extensions<sp/>for<sp/>std::string:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4113"><highlight class="normal"></highlight></codeline>
<codeline lineno="4114"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_CONFIG_CONVERSION_STD_STRING_FREE_FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4115"><highlight class="normal"></highlight></codeline>
<codeline lineno="4116"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">nonstd<sp/>{</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"></highlight></codeline>
<codeline lineno="4118"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Allocator<sp/>=<sp/>std::allocator&lt;CharT&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="4119"><highlight class="normal">std::basic_string&lt;CharT,<sp/>Traits,<sp/>Allocator&gt;</highlight></codeline>
<codeline lineno="4120"><highlight class="normal">to_string(<sp/>std::basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>v,<sp/>Allocator<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>a<sp/>=<sp/>Allocator()<sp/>)</highlight></codeline>
<codeline lineno="4121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::basic_string&lt;CharT,Traits,<sp/>Allocator&gt;(<sp/>v.begin(),<sp/>v.end(),<sp/>a<sp/>);</highlight></codeline>
<codeline lineno="4123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"></highlight></codeline>
<codeline lineno="4125"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Allocator<sp/>&gt;</highlight></codeline>
<codeline lineno="4126"><highlight class="normal">std::basic_string_view&lt;CharT,<sp/>Traits&gt;</highlight></codeline>
<codeline lineno="4127"><highlight class="normal">to_string_view(<sp/>std::basic_string&lt;CharT,<sp/>Traits,<sp/>Allocator&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>s<sp/>)</highlight></codeline>
<codeline lineno="4128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::basic_string_view&lt;CharT,<sp/>Traits&gt;(<sp/>s.data(),<sp/>s.size()<sp/>);</highlight></codeline>
<codeline lineno="4130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"></highlight></codeline>
<codeline lineno="4132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Literal<sp/>operators<sp/>sv<sp/>and<sp/>_sv:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4133"><highlight class="normal"></highlight></codeline>
<codeline lineno="4134"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_CONFIG_STD_SV_OPERATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4135"><highlight class="normal"></highlight></codeline>
<codeline lineno="4136"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std::literals::string_view_literals;</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"></highlight></codeline>
<codeline lineno="4138"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4139"><highlight class="normal"></highlight></codeline>
<codeline lineno="4140"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_CONFIG_USR_SV_OPERATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4141"><highlight class="normal"></highlight></codeline>
<codeline lineno="4142"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">literals<sp/>{</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">string_view_literals<sp/>{</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"></highlight></codeline>
<codeline lineno="4145"><highlight class="normal"></highlight></codeline>
<codeline lineno="4146"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>std::string_view<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_sv(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string_view{<sp/>str,<sp/>len<sp/>};</highlight></codeline>
<codeline lineno="4149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4150"><highlight class="normal"></highlight></codeline>
<codeline lineno="4151"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>std::u16string_view<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_sv(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char16_t</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::u16string_view{<sp/>str,<sp/>len<sp/>};</highlight></codeline>
<codeline lineno="4154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"></highlight></codeline>
<codeline lineno="4156"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>std::u32string_view<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_sv(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char32_t</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::u32string_view{<sp/>str,<sp/>len<sp/>};</highlight></codeline>
<codeline lineno="4159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"></highlight></codeline>
<codeline lineno="4161"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>std::wstring_view<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_sv(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::wstring_view{<sp/>str,<sp/>len<sp/>};</highlight></codeline>
<codeline lineno="4164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"></highlight></codeline>
<codeline lineno="4166"><highlight class="normal">}}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>literals::string_view_literals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4167"><highlight class="normal"></highlight></codeline>
<codeline lineno="4168"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>nssv_CONFIG_USR_SV_OPERATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4169"><highlight class="normal"></highlight></codeline>
<codeline lineno="4170"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>nonstd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4171"><highlight class="normal"></highlight></codeline>
<codeline lineno="4172"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>nssv_CONFIG_CONVERSION_STD_STRING_FREE_FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4173"><highlight class="normal"></highlight></codeline>
<codeline lineno="4174"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">nonstd<sp/>{</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"></highlight></codeline>
<codeline lineno="4176"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::string_view;</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::wstring_view;</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::u16string_view;</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::u32string_view;</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::basic_string_view;</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"></highlight></codeline>
<codeline lineno="4182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>literal<sp/>&quot;sv&quot;<sp/>and<sp/>&quot;_sv&quot;,<sp/>see<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4183"><highlight class="normal"></highlight></codeline>
<codeline lineno="4184"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator==;</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator!=;</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator&lt;;</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator&lt;=;</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator&gt;;</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator&gt;=;</highlight></codeline>
<codeline lineno="4190"><highlight class="normal"></highlight></codeline>
<codeline lineno="4191"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator&lt;&lt;;</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"></highlight></codeline>
<codeline lineno="4193"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>nonstd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4194"><highlight class="normal"></highlight></codeline>
<codeline lineno="4195"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>nssv_HAVE_STD_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4196"><highlight class="normal"></highlight></codeline>
<codeline lineno="4197"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Before<sp/>C++17:<sp/>use<sp/>string_view<sp/>lite:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4199"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4200"><highlight class="normal"></highlight></codeline>
<codeline lineno="4201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Compiler<sp/>versions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4202"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4203"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/><sp/>6.0<sp/><sp/>_MSC_VER<sp/>==<sp/>1200<sp/><sp/>nssv_COMPILER_MSVC_VERSION<sp/>==<sp/><sp/>60<sp/><sp/>(Visual<sp/>Studio<sp/>6.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/><sp/>7.0<sp/><sp/>_MSC_VER<sp/>==<sp/>1300<sp/><sp/>nssv_COMPILER_MSVC_VERSION<sp/>==<sp/><sp/>70<sp/><sp/>(Visual<sp/>Studio<sp/>.NET<sp/>2002)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4205"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/><sp/>7.1<sp/><sp/>_MSC_VER<sp/>==<sp/>1310<sp/><sp/>nssv_COMPILER_MSVC_VERSION<sp/>==<sp/><sp/>71<sp/><sp/>(Visual<sp/>Studio<sp/>.NET<sp/>2003)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/><sp/>8.0<sp/><sp/>_MSC_VER<sp/>==<sp/>1400<sp/><sp/>nssv_COMPILER_MSVC_VERSION<sp/>==<sp/><sp/>80<sp/><sp/>(Visual<sp/>Studio<sp/>2005)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/><sp/>9.0<sp/><sp/>_MSC_VER<sp/>==<sp/>1500<sp/><sp/>nssv_COMPILER_MSVC_VERSION<sp/>==<sp/><sp/>90<sp/><sp/>(Visual<sp/>Studio<sp/>2008)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4208"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>10.0<sp/><sp/>_MSC_VER<sp/>==<sp/>1600<sp/><sp/>nssv_COMPILER_MSVC_VERSION<sp/>==<sp/>100<sp/><sp/>(Visual<sp/>Studio<sp/>2010)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4209"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>11.0<sp/><sp/>_MSC_VER<sp/>==<sp/>1700<sp/><sp/>nssv_COMPILER_MSVC_VERSION<sp/>==<sp/>110<sp/><sp/>(Visual<sp/>Studio<sp/>2012)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4210"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>12.0<sp/><sp/>_MSC_VER<sp/>==<sp/>1800<sp/><sp/>nssv_COMPILER_MSVC_VERSION<sp/>==<sp/>120<sp/><sp/>(Visual<sp/>Studio<sp/>2013)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4211"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>14.0<sp/><sp/>_MSC_VER<sp/>==<sp/>1900<sp/><sp/>nssv_COMPILER_MSVC_VERSION<sp/>==<sp/>140<sp/><sp/>(Visual<sp/>Studio<sp/>2015)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>14.1<sp/><sp/>_MSC_VER<sp/>&gt;=<sp/>1910<sp/><sp/>nssv_COMPILER_MSVC_VERSION<sp/>==<sp/>141<sp/><sp/>(Visual<sp/>Studio<sp/>2017)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC++<sp/>14.2<sp/><sp/>_MSC_VER<sp/>&gt;=<sp/>1920<sp/><sp/>nssv_COMPILER_MSVC_VERSION<sp/>==<sp/>142<sp/><sp/>(Visual<sp/>Studio<sp/>2019)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4214"><highlight class="normal"></highlight></codeline>
<codeline lineno="4215"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER<sp/>)<sp/>&amp;&amp;<sp/>!defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4216"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_COMPILER_MSVC_VER<sp/><sp/><sp/><sp/><sp/><sp/>(_MSC_VER<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4217"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_COMPILER_MSVC_VERSION<sp/><sp/>(_MSC_VER<sp/>/<sp/>10<sp/>-<sp/>10<sp/>*<sp/>(<sp/>5<sp/>+<sp/>(_MSC_VER<sp/>&lt;<sp/>1900<sp/>)<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4218"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4219"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_COMPILER_MSVC_VER<sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4220"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_COMPILER_MSVC_VERSION<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4221"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4222"><highlight class="normal"></highlight></codeline>
<codeline lineno="4223"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_COMPILER_VERSION(<sp/>major,<sp/>minor,<sp/>patch<sp/>)<sp/><sp/>(<sp/>10<sp/>*<sp/>(<sp/>10<sp/>*<sp/>(major)<sp/>+<sp/>(minor)<sp/>)<sp/>+<sp/>(patch)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4224"><highlight class="normal"></highlight></codeline>
<codeline lineno="4225"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(<sp/>__apple_build_version__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4226"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_COMPILER_APPLECLANG_VERSION<sp/><sp/>nssv_COMPILER_VERSION(__clang_major__,<sp/>__clang_minor__,<sp/>__clang_patchlevel__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4227"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_COMPILER_CLANG_VERSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4228"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(<sp/>__clang__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4229"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_COMPILER_APPLECLANG_VERSION<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4230"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_COMPILER_CLANG_VERSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/>nssv_COMPILER_VERSION(__clang_major__,<sp/>__clang_minor__,<sp/>__clang_patchlevel__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4231"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4232"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_COMPILER_APPLECLANG_VERSION<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4233"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_COMPILER_CLANG_VERSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4234"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4235"><highlight class="normal"></highlight></codeline>
<codeline lineno="4236"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>!defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4237"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_COMPILER_GNUC_VERSION<sp/><sp/>nssv_COMPILER_VERSION(__GNUC__,<sp/>__GNUC_MINOR__,<sp/>__GNUC_PATCHLEVEL__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4238"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4239"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_COMPILER_GNUC_VERSION<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4240"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4241"><highlight class="normal"></highlight></codeline>
<codeline lineno="4242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>half-open<sp/>range<sp/>[lo..hi):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4243"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_BETWEEN(<sp/>v,<sp/>lo,<sp/>hi<sp/>)<sp/>(<sp/>(lo)<sp/>&lt;=<sp/>(v)<sp/>&amp;&amp;<sp/>(v)<sp/>&lt;<sp/>(hi)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4244"><highlight class="normal"></highlight></codeline>
<codeline lineno="4245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Presence<sp/>of<sp/>language<sp/>and<sp/>library<sp/>features:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4246"><highlight class="normal"></highlight></codeline>
<codeline lineno="4247"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_HAS_CPP0X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4248"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_HAS_CPP0X<sp/><sp/>_HAS_CPP0X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4249"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4250"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_HAS_CPP0X<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4251"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4252"><highlight class="normal"></highlight></codeline>
<codeline lineno="4253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>defined<sp/>otherwise<sp/>below,<sp/>consider<sp/>VC14<sp/>as<sp/>C++11<sp/>for<sp/>variant-lite:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4254"><highlight class="normal"></highlight></codeline>
<codeline lineno="4255"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_COMPILER_MSVC_VER<sp/>&gt;=<sp/>1900</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4256"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>undef<sp/><sp/>nssv_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4257"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_CPP11_OR_GREATER<sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4258"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4259"><highlight class="normal"></highlight></codeline>
<codeline lineno="4260"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_CPP11_90<sp/><sp/><sp/>(nssv_CPP11_OR_GREATER_<sp/>||<sp/>nssv_COMPILER_MSVC_VER<sp/>&gt;=<sp/>1500)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4261"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_CPP11_100<sp/><sp/>(nssv_CPP11_OR_GREATER_<sp/>||<sp/>nssv_COMPILER_MSVC_VER<sp/>&gt;=<sp/>1600)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4262"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_CPP11_110<sp/><sp/>(nssv_CPP11_OR_GREATER_<sp/>||<sp/>nssv_COMPILER_MSVC_VER<sp/>&gt;=<sp/>1700)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4263"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_CPP11_120<sp/><sp/>(nssv_CPP11_OR_GREATER_<sp/>||<sp/>nssv_COMPILER_MSVC_VER<sp/>&gt;=<sp/>1800)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4264"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_CPP11_140<sp/><sp/>(nssv_CPP11_OR_GREATER_<sp/>||<sp/>nssv_COMPILER_MSVC_VER<sp/>&gt;=<sp/>1900)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4265"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_CPP11_141<sp/><sp/>(nssv_CPP11_OR_GREATER_<sp/>||<sp/>nssv_COMPILER_MSVC_VER<sp/>&gt;=<sp/>1910)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4266"><highlight class="normal"></highlight></codeline>
<codeline lineno="4267"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_CPP14_000<sp/><sp/>(nssv_CPP14_OR_GREATER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4268"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_CPP17_000<sp/><sp/>(nssv_CPP17_OR_GREATER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4269"><highlight class="normal"></highlight></codeline>
<codeline lineno="4270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Presence<sp/>of<sp/>C++11<sp/>language<sp/>features:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4271"><highlight class="normal"></highlight></codeline>
<codeline lineno="4272"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_HAVE_CONSTEXPR_11<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nssv_CPP11_140</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4273"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_HAVE_EXPLICIT_CONVERSION<sp/><sp/><sp/>nssv_CPP11_140</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4274"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_HAVE_INLINE_NAMESPACE<sp/><sp/><sp/><sp/><sp/><sp/>nssv_CPP11_140</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4275"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_HAVE_NOEXCEPT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nssv_CPP11_140</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4276"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_HAVE_NULLPTR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nssv_CPP11_100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4277"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_HAVE_REF_QUALIFIER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nssv_CPP11_140</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4278"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_HAVE_UNICODE_LITERALS<sp/><sp/><sp/><sp/><sp/><sp/>nssv_CPP11_140</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4279"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_HAVE_USER_DEFINED_LITERALS<sp/>nssv_CPP11_140</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4280"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_HAVE_WCHAR16_T<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nssv_CPP11_100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4281"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_HAVE_WCHAR32_T<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nssv_CPP11_100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4282"><highlight class="normal"></highlight></codeline>
<codeline lineno="4283"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!<sp/>(<sp/>(<sp/>nssv_CPP11_OR_GREATER<sp/>&amp;&amp;<sp/>nssv_COMPILER_CLANG_VERSION<sp/>)<sp/>||<sp/>nssv_BETWEEN(<sp/>nssv_COMPILER_CLANG_VERSION,<sp/>300,<sp/>400<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4284"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_HAVE_STD_DEFINED_LITERALS<sp/><sp/>nssv_CPP11_140</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4285"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4286"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_HAVE_STD_DEFINED_LITERALS<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4287"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4288"><highlight class="normal"></highlight></codeline>
<codeline lineno="4289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Presence<sp/>of<sp/>C++14<sp/>language<sp/>features:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4290"><highlight class="normal"></highlight></codeline>
<codeline lineno="4291"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_HAVE_CONSTEXPR_14<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nssv_CPP14_000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4292"><highlight class="normal"></highlight></codeline>
<codeline lineno="4293"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Presence<sp/>of<sp/>C++17<sp/>language<sp/>features:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4294"><highlight class="normal"></highlight></codeline>
<codeline lineno="4295"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_HAVE_NODISCARD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nssv_CPP17_000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4296"><highlight class="normal"></highlight></codeline>
<codeline lineno="4297"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Presence<sp/>of<sp/>C++<sp/>library<sp/>features:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4298"><highlight class="normal"></highlight></codeline>
<codeline lineno="4299"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_HAVE_STD_HASH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nssv_CPP11_120</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4300"><highlight class="normal"></highlight></codeline>
<codeline lineno="4301"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Presence<sp/>of<sp/>compiler<sp/>intrinsics:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4302"><highlight class="normal"></highlight></codeline>
<codeline lineno="4303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Providing<sp/>char-type<sp/>specializations<sp/>for<sp/>compare()<sp/>and<sp/>length()<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4304"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>compiler<sp/>intrinsics<sp/>can<sp/>improve<sp/>compile-<sp/>and<sp/>run-time<sp/>performance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4305"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4306"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>challenge<sp/>is<sp/>in<sp/>using<sp/>the<sp/>right<sp/>combinations<sp/>of<sp/>builtin<sp/>availability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4307"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>its<sp/>constexpr-ness.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4308"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>|<sp/>compiler<sp/>|<sp/>__builtin_memcmp<sp/>(constexpr)<sp/>|<sp/>memcmp<sp/><sp/>(constexpr)<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4310"><highlight class="normal"></highlight><highlight class="comment">//<sp/>|----------|------------------------------|---------------------|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4311"><highlight class="normal"></highlight><highlight class="comment">//<sp/>|<sp/>clang<sp/><sp/><sp/><sp/>|<sp/>4.0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&gt;=<sp/>4.0<sp/><sp/><sp/>)<sp/>|<sp/>any<sp/><sp/><sp/><sp/><sp/>(?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4312"><highlight class="normal"></highlight><highlight class="comment">//<sp/>|<sp/>clang-a<sp/><sp/>|<sp/>9.0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&gt;=<sp/>9.0<sp/><sp/><sp/>)<sp/>|<sp/>any<sp/><sp/><sp/><sp/><sp/>(?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4313"><highlight class="normal"></highlight><highlight class="comment">//<sp/>|<sp/>gcc<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>any<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(constexpr)<sp/>|<sp/>any<sp/><sp/><sp/><sp/><sp/>(?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>|<sp/>msvc<sp/><sp/><sp/><sp/><sp/>|<sp/>&gt;=<sp/>14.2<sp/>C++17<sp/><sp/><sp/><sp/>(&gt;=<sp/>14.2<sp/><sp/>)<sp/>|<sp/>any<sp/><sp/><sp/><sp/><sp/>(?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4315"><highlight class="normal"></highlight></codeline>
<codeline lineno="4316"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_HAVE_BUILTIN_VER<sp/><sp/><sp/><sp/><sp/>(<sp/>(nssv_CPP17_000<sp/>&amp;&amp;<sp/>nssv_COMPILER_MSVC_VERSION<sp/>&gt;=<sp/>142)<sp/>||<sp/>nssv_COMPILER_GNUC_VERSION<sp/>&gt;<sp/>0<sp/>||<sp/>nssv_COMPILER_CLANG_VERSION<sp/>&gt;=<sp/>400<sp/>||<sp/>nssv_COMPILER_APPLECLANG_VERSION<sp/>&gt;=<sp/>900<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4317"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_HAVE_BUILTIN_CE<sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/>nssv_HAVE_BUILTIN_VER<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4318"><highlight class="normal"></highlight></codeline>
<codeline lineno="4319"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_HAVE_BUILTIN_MEMCMP<sp/><sp/>(<sp/>(nssv_HAVE_CONSTEXPR_14<sp/>&amp;&amp;<sp/>nssv_HAVE_BUILTIN_CE)<sp/>||<sp/>!nssv_HAVE_CONSTEXPR_14<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4320"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_HAVE_BUILTIN_STRLEN<sp/><sp/>(<sp/>(nssv_HAVE_CONSTEXPR_11<sp/>&amp;&amp;<sp/>nssv_HAVE_BUILTIN_CE)<sp/>||<sp/>!nssv_HAVE_CONSTEXPR_11<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4321"><highlight class="normal"></highlight></codeline>
<codeline lineno="4322"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__has_builtin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4323"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_HAVE_BUILTIN(<sp/>x<sp/>)<sp/><sp/>__has_builtin(<sp/>x<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4324"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4325"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_HAVE_BUILTIN(<sp/>x<sp/>)<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4326"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4327"><highlight class="normal"></highlight></codeline>
<codeline lineno="4328"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_HAVE_BUILTIN(__builtin_memcmp)<sp/>||<sp/>nssv_HAVE_BUILTIN_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4329"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_BUILTIN_MEMCMP<sp/><sp/>__builtin_memcmp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4330"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4331"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_BUILTIN_MEMCMP<sp/><sp/>memcmp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4332"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4333"><highlight class="normal"></highlight></codeline>
<codeline lineno="4334"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_HAVE_BUILTIN(__builtin_strlen)<sp/>||<sp/>nssv_HAVE_BUILTIN_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4335"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_BUILTIN_STRLEN<sp/><sp/>__builtin_strlen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4336"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4337"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_BUILTIN_STRLEN<sp/><sp/>strlen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4338"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4339"><highlight class="normal"></highlight></codeline>
<codeline lineno="4340"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++<sp/>feature<sp/>usage:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4341"><highlight class="normal"></highlight></codeline>
<codeline lineno="4342"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_HAVE_CONSTEXPR_11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4343"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_constexpr<sp/><sp/>constexpr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4344"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4345"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_constexpr<sp/><sp/></highlight><highlight class="comment">/*constexpr*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4346"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4347"><highlight class="normal"></highlight></codeline>
<codeline lineno="4348"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/>nssv_HAVE_CONSTEXPR_14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4349"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_constexpr14<sp/><sp/>constexpr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4350"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4351"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_constexpr14<sp/><sp/></highlight><highlight class="comment">/*constexpr*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4352"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4353"><highlight class="normal"></highlight></codeline>
<codeline lineno="4354"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_HAVE_EXPLICIT_CONVERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4355"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_explicit<sp/><sp/>explicit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4356"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4357"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_explicit<sp/><sp/></highlight><highlight class="comment">/*explicit*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4358"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4359"><highlight class="normal"></highlight></codeline>
<codeline lineno="4360"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_HAVE_INLINE_NAMESPACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4361"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_inline_ns<sp/><sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4362"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4363"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_inline_ns<sp/><sp/></highlight><highlight class="comment">/*inline*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4364"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4365"><highlight class="normal"></highlight></codeline>
<codeline lineno="4366"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_HAVE_NOEXCEPT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4367"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_noexcept<sp/><sp/>noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4368"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4369"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_noexcept<sp/><sp/></highlight><highlight class="comment">/*noexcept*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4370"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4371"><highlight class="normal"></highlight></codeline>
<codeline lineno="4372"><highlight class="normal"></highlight><highlight class="comment">//#if<sp/>nssv_HAVE_REF_QUALIFIER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4373"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>define<sp/>nssv_ref_qual<sp/><sp/>&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4374"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>define<sp/>nssv_refref_qual<sp/><sp/>&amp;&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4375"><highlight class="normal"></highlight><highlight class="comment">//#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4376"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>define<sp/>nssv_ref_qual<sp/><sp/>/*&amp;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4377"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>define<sp/>nssv_refref_qual<sp/><sp/>/*&amp;&amp;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4378"><highlight class="normal"></highlight><highlight class="comment">//#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4379"><highlight class="normal"></highlight></codeline>
<codeline lineno="4380"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_HAVE_NULLPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4381"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_nullptr<sp/><sp/>nullptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4382"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4383"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_nullptr<sp/><sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4384"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4385"><highlight class="normal"></highlight></codeline>
<codeline lineno="4386"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_HAVE_NODISCARD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4387"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_nodiscard<sp/><sp/>[[nodiscard]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4388"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4389"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_nodiscard<sp/><sp/></highlight><highlight class="comment">/*[[nodiscard]]*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4390"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4391"><highlight class="normal"></highlight></codeline>
<codeline lineno="4392"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Additional<sp/>includes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4393"><highlight class="normal"></highlight></codeline>
<codeline lineno="4394"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4395"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4396"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4397"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4398"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::char_traits&lt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4399"><highlight class="normal"></highlight></codeline>
<codeline lineno="4400"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!<sp/>nssv_CONFIG_NO_STREAM_INSERTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4401"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4402"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4403"><highlight class="normal"></highlight></codeline>
<codeline lineno="4404"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!<sp/>nssv_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4405"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4406"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4407"><highlight class="normal"></highlight></codeline>
<codeline lineno="4408"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4409"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4410"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4411"><highlight class="normal"></highlight></codeline>
<codeline lineno="4412"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Clang,<sp/>GNUC,<sp/>MSVC<sp/>warning<sp/>suppression<sp/>macros:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4413"><highlight class="normal"></highlight></codeline>
<codeline lineno="4414"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4415"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wreserved-user-defined-literal&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4416"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4417"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wuser-defined-literals&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4418"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4419"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/><sp/>GCC<sp/><sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4420"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/><sp/>GCC<sp/><sp/>diagnostic<sp/>ignored<sp/>&quot;-Wliteral-suffix&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4421"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4422"><highlight class="normal"></highlight></codeline>
<codeline lineno="4423"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_COMPILER_MSVC_VERSION<sp/>&gt;=<sp/>140</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4424"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_SUPPRESS_MSGSL_WARNING(expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[[gsl::suppress(expr)]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4425"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_SUPPRESS_MSVC_WARNING(code,<sp/>descr)<sp/><sp/>__pragma(warning(suppress:<sp/>code)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4426"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_DISABLE_MSVC_WARNINGS(codes)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pragma(warning(push))<sp/><sp/>__pragma(warning(disable:<sp/>codes))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4427"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4428"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_SUPPRESS_MSGSL_WARNING(expr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4429"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_SUPPRESS_MSVC_WARNING(code,<sp/>descr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4430"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_DISABLE_MSVC_WARNINGS(codes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4431"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4432"><highlight class="normal"></highlight></codeline>
<codeline lineno="4433"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4434"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_RESTORE_WARNINGS()<sp/><sp/>_Pragma(&quot;clang<sp/>diagnostic<sp/>pop&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4436"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_RESTORE_WARNINGS()<sp/><sp/>_Pragma(&quot;GCC<sp/>diagnostic<sp/>pop&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>nssv_COMPILER_MSVC_VERSION<sp/>&gt;=<sp/>140</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4438"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_RESTORE_WARNINGS()<sp/><sp/>__pragma(warning(pop<sp/>))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4439"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4440"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_RESTORE_WARNINGS()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4441"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4442"><highlight class="normal"></highlight></codeline>
<codeline lineno="4443"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Suppress<sp/>the<sp/>following<sp/>MSVC<sp/>(GSL)<sp/>warnings:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4444"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>C4455,<sp/>non-gsl<sp/><sp/><sp/>:<sp/>&apos;operator<sp/>&quot;&quot;sv&apos;:<sp/>literal<sp/>suffix<sp/>identifiers<sp/>that<sp/>do<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4445"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>with<sp/>an<sp/>underscore<sp/>are<sp/>reserved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4446"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>C26472,<sp/>gsl::t.1<sp/>:<sp/>don&apos;t<sp/>use<sp/>a<sp/>static_cast<sp/>for<sp/>arithmetic<sp/>conversions;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4447"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use<sp/>brace<sp/>initialization,<sp/>gsl::narrow_cast<sp/>or<sp/>gsl::narow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4448"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>C26481:<sp/>gsl::b.1<sp/>:<sp/>don&apos;t<sp/>use<sp/>pointer<sp/>arithmetic.<sp/>Use<sp/>span<sp/>instead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4449"><highlight class="normal"></highlight></codeline>
<codeline lineno="4450"><highlight class="normal">nssv_DISABLE_MSVC_WARNINGS(<sp/>4455<sp/>26481<sp/>26472<sp/>)</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"></highlight><highlight class="comment">//nssv_DISABLE_CLANG_WARNINGS(<sp/>&quot;-Wuser-defined-literals&quot;<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4452"><highlight class="normal"></highlight><highlight class="comment">//nssv_DISABLE_GNUC_WARNINGS(<sp/>-Wliteral-suffix<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4453"><highlight class="normal"></highlight></codeline>
<codeline lineno="4454"><highlight class="normal">namespace<sp/>nonstd<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">sv_lite<sp/>{</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"></highlight></codeline>
<codeline lineno="4456"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="4457"><highlight class="normal"></highlight></codeline>
<codeline lineno="4458"><highlight class="normal"></highlight><highlight class="comment">//<sp/>support<sp/>constexpr<sp/>comparison<sp/>in<sp/>C++14;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4459"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>C++17<sp/>and<sp/>later,<sp/>use<sp/>provided<sp/>traits:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4460"><highlight class="normal"></highlight></codeline>
<codeline lineno="4461"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharT<sp/>&gt;</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>nssv_constexpr14<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compare(<sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>s1,<sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>s2,<sp/>std::size_t<sp/>count<sp/>)</highlight></codeline>
<codeline lineno="4463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>count--<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*s1<sp/>&lt;<sp/>*s2<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>*s1<sp/>&gt;<sp/>*s2<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>+1;</highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++s1;<sp/>++s2;</highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4472"><highlight class="normal"></highlight></codeline>
<codeline lineno="4473"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_HAVE_BUILTIN_MEMCMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4474"><highlight class="normal"></highlight></codeline>
<codeline lineno="4475"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specialization<sp/>of<sp/>compare()<sp/>for<sp/>char,<sp/>see<sp/>also<sp/>generic<sp/>compare()<sp/>above:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4476"><highlight class="normal"></highlight></codeline>
<codeline lineno="4477"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>nssv_constexpr14<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compare(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>s1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>s2,<sp/>std::size_t<sp/>count<sp/>)</highlight></codeline>
<codeline lineno="4478"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nssv_BUILTIN_MEMCMP(<sp/>s1,<sp/>s2,<sp/>count<sp/>);</highlight></codeline>
<codeline lineno="4480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"></highlight></codeline>
<codeline lineno="4482"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4483"><highlight class="normal"></highlight></codeline>
<codeline lineno="4484"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_HAVE_BUILTIN_STRLEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4485"><highlight class="normal"></highlight></codeline>
<codeline lineno="4486"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specialization<sp/>of<sp/>length()<sp/>for<sp/>char,<sp/>see<sp/>also<sp/>generic<sp/>length()<sp/>further<sp/>below:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4487"><highlight class="normal"></highlight></codeline>
<codeline lineno="4488"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>nssv_constexpr<sp/>std::size_t<sp/>length(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>s<sp/>)</highlight></codeline>
<codeline lineno="4489"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nssv_BUILTIN_STRLEN(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="4491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4492"><highlight class="normal"></highlight></codeline>
<codeline lineno="4493"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4494"><highlight class="normal"></highlight></codeline>
<codeline lineno="4495"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__OPTIMIZE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4496"><highlight class="normal"></highlight></codeline>
<codeline lineno="4497"><highlight class="normal"></highlight><highlight class="comment">//<sp/>gcc,<sp/>clang<sp/>provide<sp/>__OPTIMIZE__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4498"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Expect<sp/>tail<sp/>call<sp/>optimization<sp/>to<sp/>make<sp/>length()<sp/>non-recursive:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4499"><highlight class="normal"></highlight></codeline>
<codeline lineno="4500"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharT<sp/>&gt;</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>nssv_constexpr<sp/>std::size_t<sp/>length(<sp/>CharT<sp/>*<sp/>s,<sp/>std::size_t<sp/>result<sp/>=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="4502"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*s<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>?<sp/>result<sp/>:<sp/>length(<sp/>s<sp/>+<sp/>1,<sp/>result<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="4504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"></highlight></codeline>
<codeline lineno="4506"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>OPTIMIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4507"><highlight class="normal"></highlight></codeline>
<codeline lineno="4508"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-recursive:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4509"><highlight class="normal"></highlight></codeline>
<codeline lineno="4510"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharT<sp/>&gt;</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>nssv_constexpr14<sp/>std::size_t<sp/>length(<sp/>CharT<sp/>*<sp/>s<sp/>)</highlight></codeline>
<codeline lineno="4512"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>*s++<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++result;</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"></highlight></codeline>
<codeline lineno="4521"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>OPTIMIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4522"><highlight class="normal"></highlight></codeline>
<codeline lineno="4523"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4524"><highlight class="normal"></highlight></codeline>
<codeline lineno="4525"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4526"><highlight class="normal">&lt;</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">CharT,</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Traits<sp/>=<sp/>std::char_traits&lt;CharT&gt;</highlight></codeline>
<codeline lineno="4529"><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="4530"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">basic_string_view;</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"></highlight></codeline>
<codeline lineno="4532"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4533"><highlight class="normal"></highlight><highlight class="comment">//<sp/>basic_string_view:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4534"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4535"><highlight class="normal"></highlight></codeline>
<codeline lineno="4536"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4537"><highlight class="normal">&lt;</highlight></codeline>
<codeline lineno="4538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">CharT,</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Traits<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>std::char_traits&lt;CharT&gt;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4540"><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="4541"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">basic_string_view</highlight></codeline>
<codeline lineno="4542"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4543"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Member<sp/>types:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4545"><highlight class="normal"></highlight></codeline>
<codeline lineno="4546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Traits<sp/>traits_type;</highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CharT<sp/><sp/>value_type;</highlight></codeline>
<codeline lineno="4548"><highlight class="normal"></highlight></codeline>
<codeline lineno="4549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CharT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>pointer;</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>const_pointer;</highlight></codeline>
<codeline lineno="4551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CharT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>reference;</highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>const_reference;</highlight></codeline>
<codeline lineno="4553"><highlight class="normal"></highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>const_pointer<sp/>iterator;</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>const_pointer<sp/>const_iterator;</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::reverse_iterator&lt;<sp/>const_iterator<sp/>&gt;<sp/>reverse_iterator;</highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::reverse_iterator&lt;<sp/>const_iterator<sp/>&gt;<sp/>const_reverse_iterator;</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"></highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::size_t<sp/><sp/><sp/><sp/><sp/>size_type;</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::ptrdiff_t<sp/><sp/>difference_type;</highlight></codeline>
<codeline lineno="4561"><highlight class="normal"></highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>24.4.2.1<sp/>Construction<sp/>and<sp/>assignment:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4563"><highlight class="normal"></highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>basic_string_view()<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="4565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>data_(<sp/>nssv_nullptr<sp/>)</highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>size_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="4568"><highlight class="normal"></highlight></codeline>
<codeline lineno="4569"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4570"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>basic_string_view(<sp/>basic_string_view<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other<sp/>)<sp/>nssv_noexcept<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4572"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>basic_string_view(<sp/>basic_string_view<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>data_(<sp/>other.data_)</highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>size_(<sp/>other.size_)</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4577"><highlight class="normal"></highlight></codeline>
<codeline lineno="4578"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>basic_string_view(<sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>s,<sp/>size_type<sp/>count<sp/>)<sp/>nssv_noexcept<sp/></highlight><highlight class="comment">//<sp/>non-standard<sp/>noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>data_(<sp/>s<sp/>)</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>size_(<sp/>count<sp/>)</highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"></highlight></codeline>
<codeline lineno="4583"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>basic_string_view(<sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>s)<sp/>nssv_noexcept<sp/></highlight><highlight class="comment">//<sp/>non-standard<sp/>noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>data_(<sp/>s<sp/>)</highlight></codeline>
<codeline lineno="4585"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_CPP17_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>size_(<sp/>Traits::length(s)<sp/>)</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>nssv_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>size_(<sp/>detail::length(s)<sp/>)</highlight></codeline>
<codeline lineno="4589"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>size_(<sp/>Traits::length(s)<sp/>)</highlight></codeline>
<codeline lineno="4591"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"></highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assignment:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4595"><highlight class="normal"></highlight></codeline>
<codeline lineno="4596"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4597"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr14<sp/>basic_string_view<sp/>&amp;<sp/>operator=(<sp/>basic_string_view<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other<sp/>)<sp/>nssv_noexcept<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr14<sp/>basic_string_view<sp/>&amp;<sp/>operator=(<sp/>basic_string_view<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_<sp/>=<sp/>other.data_;</highlight></codeline>
<codeline lineno="4602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_<sp/>=<sp/>other.size_;</highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4605"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4606"><highlight class="normal"></highlight></codeline>
<codeline lineno="4607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>24.4.2.2<sp/>Iterator<sp/>support:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4608"><highlight class="normal"></highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>const_iterator<sp/>begin()<sp/><sp/>const<sp/>nssv_noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>const_iterator<sp/>end()<sp/><sp/><sp/><sp/>const<sp/>nssv_noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_<sp/>+<sp/>size_;<sp/>}</highlight></codeline>
<codeline lineno="4611"><highlight class="normal"></highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>const_iterator<sp/>cbegin()<sp/>const<sp/>nssv_noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin();<sp/>}</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>const_iterator<sp/>cend()<sp/><sp/><sp/>const<sp/>nssv_noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>end();<sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4614"><highlight class="normal"></highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>const_reverse_iterator<sp/>rbegin()<sp/><sp/>const<sp/>nssv_noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>const_reverse_iterator(<sp/>end()<sp/>);<sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>const_reverse_iterator<sp/>rend()<sp/><sp/><sp/><sp/>const<sp/>nssv_noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>const_reverse_iterator(<sp/>begin()<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="4617"><highlight class="normal"></highlight></codeline>
<codeline lineno="4618"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>const_reverse_iterator<sp/>crbegin()<sp/>const<sp/>nssv_noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rbegin();<sp/>}</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>const_reverse_iterator<sp/>crend()<sp/><sp/><sp/>const<sp/>nssv_noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rend();<sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4620"><highlight class="normal"></highlight></codeline>
<codeline lineno="4621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>24.4.2.3<sp/>Capacity:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4622"><highlight class="normal"></highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>size_type<sp/>size()<sp/><sp/><sp/><sp/><sp/>const<sp/>nssv_noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_;<sp/>}</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>size_type<sp/>length()<sp/><sp/><sp/>const<sp/>nssv_noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_;<sp/>}</highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>size_type<sp/>max_size()<sp/>const<sp/>nssv_noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::numeric_limits&lt;<sp/>size_type<sp/>&gt;::max)();<sp/>}</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"></highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>C++20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_nodiscard<sp/>nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>empty()<sp/>const<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0<sp/>==<sp/>size_;</highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"></highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>24.4.2.4<sp/>Element<sp/>access:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4634"><highlight class="normal"></highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>const_reference<sp/>operator[](<sp/>size_type<sp/>pos<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4636"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_at(<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"></highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr14<sp/>const_reference<sp/>at(<sp/>size_type<sp/>pos<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4641"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>pos<sp/>&lt;<sp/>size()<sp/>);</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pos<sp/>&gt;=<sp/>size()<sp/>)</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;nonstd::string_view::at()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4649"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_at(<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4652"><highlight class="normal"></highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>const_reference<sp/>front()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_at(<sp/>0<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>const_reference<sp/>back()</highlight><highlight class="keyword"><sp/><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_at(<sp/>size()<sp/>-<sp/>1<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="4655"><highlight class="normal"></highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>const_pointer<sp/><sp/><sp/>data()<sp/><sp/>const<sp/>nssv_noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_;<sp/>}</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"></highlight></codeline>
<codeline lineno="4658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>24.4.2.5<sp/>Modifiers:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4659"><highlight class="normal"></highlight></codeline>
<codeline lineno="4660"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr14<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>remove_prefix(<sp/>size_type<sp/>n<sp/>)</highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>n<sp/>&lt;=<sp/>size()<sp/>);</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_<sp/>-=<sp/>n;</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4666"><highlight class="normal"></highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr14<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>remove_suffix(<sp/>size_type<sp/>n<sp/>)</highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>n<sp/>&lt;=<sp/>size()<sp/>);</highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_<sp/>-=<sp/>n;</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"></highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr14<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(<sp/>basic_string_view<sp/>&amp;<sp/>other<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>basic_string_view<sp/>tmp(other);</highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4679"><highlight class="normal"></highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>24.4.2.6<sp/>String<sp/>operations:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4681"><highlight class="normal"></highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/><sp/><sp/>size_type<sp/>copy(<sp/>CharT<sp/>*<sp/>dest,<sp/>size_type<sp/>n,<sp/>size_type<sp/>pos<sp/>=<sp/>0<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4683"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>pos<sp/>&lt;=<sp/>size()<sp/>);</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pos<sp/>&gt;<sp/>size()<sp/>)</highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;nonstd::string_view::copy()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4691"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>size_type<sp/>rlen<sp/>=<sp/>(std::min)(<sp/>n,<sp/>size()<sp/>-<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"></highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)<sp/>Traits::copy(<sp/>dest,<sp/>data()<sp/>+<sp/>pos,<sp/>rlen<sp/>);</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"></highlight></codeline>
<codeline lineno="4696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rlen;</highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"></highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr14<sp/>basic_string_view<sp/>substr(<sp/>size_type<sp/>pos<sp/>=<sp/>0,<sp/>size_type<sp/>n<sp/>=<sp/>npos<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4700"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_CONFIG_NO_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>pos<sp/>&lt;=<sp/>size()<sp/>);</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pos<sp/>&gt;<sp/>size()<sp/>)</highlight></codeline>
<codeline lineno="4705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;nonstd::string_view::substr()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4708"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>basic_string_view(<sp/>data()<sp/>+<sp/>pos,<sp/>(std::min)(<sp/>n,<sp/>size()<sp/>-<sp/>pos<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4711"><highlight class="normal"></highlight></codeline>
<codeline lineno="4712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compare(),<sp/>6x:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4713"><highlight class="normal"></highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr14<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compare(<sp/>basic_string_view<sp/>other<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nssv_noexcept<sp/></highlight><highlight class="comment">//<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_CPP17_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>Traits::compare(<sp/>data(),<sp/>other.data(),<sp/>(std::min)(<sp/>size(),<sp/>other.size()<sp/>)<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="4718"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>detail::compare(<sp/>data(),<sp/>other.data(),<sp/>(std::min)(<sp/>size(),<sp/>other.size()<sp/>)<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="4720"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4724"><highlight class="normal"></highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size()<sp/>==<sp/>other.size()<sp/>?<sp/>0<sp/>:<sp/>size()<sp/>&lt;<sp/>other.size()<sp/>?<sp/>-1<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4727"><highlight class="normal"></highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compare(<sp/>size_type<sp/>pos1,<sp/>size_type<sp/>n1,<sp/>basic_string_view<sp/>other<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4729"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>substr(<sp/>pos1,<sp/>n1<sp/>).compare(<sp/>other<sp/>);</highlight></codeline>
<codeline lineno="4731"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4732"><highlight class="normal"></highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compare(<sp/>size_type<sp/>pos1,<sp/>size_type<sp/>n1,<sp/>basic_string_view<sp/>other,<sp/>size_type<sp/>pos2,<sp/>size_type<sp/>n2<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>(3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>substr(<sp/>pos1,<sp/>n1<sp/>).compare(<sp/>other.substr(<sp/>pos2,<sp/>n2<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"></highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compare(<sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>s<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>(4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>compare(<sp/>basic_string_view(<sp/>s<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"></highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compare(<sp/>size_type<sp/>pos1,<sp/>size_type<sp/>n1,<sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>s<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>(5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>substr(<sp/>pos1,<sp/>n1<sp/>).compare(<sp/>basic_string_view(<sp/>s<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4747"><highlight class="normal"></highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compare(<sp/>size_type<sp/>pos1,<sp/>size_type<sp/>n1,<sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>s,<sp/>size_type<sp/>n2<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>(6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>substr(<sp/>pos1,<sp/>n1<sp/>).compare(<sp/>basic_string_view(<sp/>s,<sp/>n2<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4752"><highlight class="normal"></highlight></codeline>
<codeline lineno="4753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>24.4.2.7<sp/>Searching:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4754"><highlight class="normal"></highlight></codeline>
<codeline lineno="4755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>starts_with(),<sp/>3x,<sp/>since<sp/>C++20:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4756"><highlight class="normal"></highlight></codeline>
<codeline lineno="4757"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>starts_with(<sp/>basic_string_view<sp/>v<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nssv_noexcept<sp/><sp/></highlight><highlight class="comment">//<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4758"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size()<sp/>&gt;=<sp/>v.size()<sp/>&amp;&amp;<sp/>compare(<sp/>0,<sp/>v.size(),<sp/>v<sp/>)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"></highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>starts_with(<sp/>CharT<sp/>c<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nssv_noexcept<sp/><sp/></highlight><highlight class="comment">//<sp/>(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>starts_with(<sp/>basic_string_view(<sp/>&amp;c,<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4766"><highlight class="normal"></highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>starts_with(<sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>s<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>starts_with(<sp/>basic_string_view(<sp/>s<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"></highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ends_with(),<sp/>3x,<sp/>since<sp/>C++20:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4773"><highlight class="normal"></highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ends_with(<sp/>basic_string_view<sp/>v<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nssv_noexcept<sp/><sp/></highlight><highlight class="comment">//<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size()<sp/>&gt;=<sp/>v.size()<sp/>&amp;&amp;<sp/>compare(<sp/>size()<sp/>-<sp/>v.size(),<sp/>npos,<sp/>v<sp/>)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="4777"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4778"><highlight class="normal"></highlight></codeline>
<codeline lineno="4779"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ends_with(<sp/>CharT<sp/>c<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nssv_noexcept<sp/><sp/></highlight><highlight class="comment">//<sp/>(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ends_with(<sp/>basic_string_view(<sp/>&amp;c,<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"></highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ends_with(<sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>s<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ends_with(<sp/>basic_string_view(<sp/>s<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4788"><highlight class="normal"></highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find(),<sp/>4x:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4790"><highlight class="normal"></highlight></codeline>
<codeline lineno="4791"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr14<sp/>size_type<sp/>find(<sp/>basic_string_view<sp/>v,<sp/>size_type<sp/>pos<sp/>=<sp/>0<sp/>)<sp/>const<sp/>nssv_noexcept<sp/><sp/></highlight><highlight class="comment">//<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assert(<sp/>v.size()<sp/>==<sp/>0<sp/>||<sp/>v.data()<sp/>!=<sp/>nssv_nullptr<sp/>)</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>pos<sp/>&gt;=<sp/>size()</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>npos</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>to_pos(<sp/>std::search(<sp/>cbegin()<sp/>+<sp/>pos,<sp/>cend(),<sp/>v.cbegin(),<sp/>v.cend(),<sp/>Traits::eq<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4798"><highlight class="normal"></highlight></codeline>
<codeline lineno="4799"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr14<sp/>size_type<sp/>find(<sp/>CharT<sp/>c,<sp/>size_type<sp/>pos<sp/>=<sp/>0<sp/>)<sp/>const<sp/>nssv_noexcept<sp/><sp/></highlight><highlight class="comment">//<sp/>(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4800"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>find(<sp/>basic_string_view(<sp/>&amp;c,<sp/>1<sp/>),<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4803"><highlight class="normal"></highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr14<sp/>size_type<sp/>find(<sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>s,<sp/>size_type<sp/>pos,<sp/>size_type<sp/>n<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>find(<sp/>basic_string_view(<sp/>s,<sp/>n<sp/>),<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"></highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr14<sp/>size_type<sp/>find(<sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>s,<sp/>size_type<sp/>pos<sp/>=<sp/>0<sp/>)<sp/>const<sp/><sp/></highlight><highlight class="comment">//<sp/>(4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4810"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>find(<sp/>basic_string_view(<sp/>s<sp/>),<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"></highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rfind(),<sp/>4x:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4815"><highlight class="normal"></highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr14<sp/>size_type<sp/>rfind(<sp/>basic_string_view<sp/>v,<sp/>size_type<sp/>pos<sp/>=<sp/>npos<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nssv_noexcept<sp/><sp/></highlight><highlight class="comment">//<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>size()<sp/>&lt;<sp/>v.size()<sp/>)</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>npos;</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"></highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>v.empty()<sp/>)</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::min)(<sp/>size(),<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4827"><highlight class="normal"></highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const_iterator<sp/>last<sp/><sp/><sp/>=<sp/>cbegin()<sp/>+<sp/>(std::min)(<sp/>size()<sp/>-<sp/>v.size(),<sp/>pos<sp/>)<sp/>+<sp/>v.size();</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const_iterator<sp/>result<sp/>=<sp/>std::find_end(<sp/>cbegin(),<sp/>last,<sp/>v.cbegin(),<sp/>v.cend(),<sp/>Traits::eq<sp/>);</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"></highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result<sp/>!=<sp/>last<sp/>?<sp/>size_type(<sp/>result<sp/>-<sp/>cbegin()<sp/>)<sp/>:<sp/>npos;</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4833"><highlight class="normal"></highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr14<sp/>size_type<sp/>rfind(<sp/>CharT<sp/>c,<sp/>size_type<sp/>pos<sp/>=<sp/>npos<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nssv_noexcept<sp/><sp/></highlight><highlight class="comment">//<sp/>(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rfind(<sp/>basic_string_view(<sp/>&amp;c,<sp/>1<sp/>),<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"></highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr14<sp/>size_type<sp/>rfind(<sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>s,<sp/>size_type<sp/>pos,<sp/>size_type<sp/>n<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rfind(<sp/>basic_string_view(<sp/>s,<sp/>n<sp/>),<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4843"><highlight class="normal"></highlight></codeline>
<codeline lineno="4844"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr14<sp/>size_type<sp/>rfind(<sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>s,<sp/>size_type<sp/>pos<sp/>=<sp/>npos<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4845"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rfind(<sp/>basic_string_view(<sp/>s<sp/>),<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"></highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find_first_of(),<sp/>4x:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4850"><highlight class="normal"></highlight></codeline>
<codeline lineno="4851"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>size_type<sp/>find_first_of(<sp/>basic_string_view<sp/>v,<sp/>size_type<sp/>pos<sp/>=<sp/>0<sp/>)<sp/>const<sp/>nssv_noexcept<sp/><sp/></highlight><highlight class="comment">//<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pos<sp/>&gt;=<sp/>size()</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>npos</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>to_pos(<sp/>std::find_first_of(<sp/>cbegin()<sp/>+<sp/>pos,<sp/>cend(),<sp/>v.cbegin(),<sp/>v.cend(),<sp/>Traits::eq<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"></highlight></codeline>
<codeline lineno="4858"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>size_type<sp/>find_first_of(<sp/>CharT<sp/>c,<sp/>size_type<sp/>pos<sp/>=<sp/>0<sp/>)<sp/>const<sp/>nssv_noexcept<sp/><sp/></highlight><highlight class="comment">//<sp/>(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>find_first_of(<sp/>basic_string_view(<sp/>&amp;c,<sp/>1<sp/>),<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"></highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>size_type<sp/>find_first_of(<sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>s,<sp/>size_type<sp/>pos,<sp/>size_type<sp/>n<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>find_first_of(<sp/>basic_string_view(<sp/>s,<sp/>n<sp/>),<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"></highlight></codeline>
<codeline lineno="4868"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>size_type<sp/>find_first_of(<sp/><sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>s,<sp/>size_type<sp/>pos<sp/>=<sp/>0<sp/>)<sp/>const<sp/><sp/></highlight><highlight class="comment">//<sp/>(4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4869"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>find_first_of(<sp/>basic_string_view(<sp/>s<sp/>),<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"></highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find_last_of(),<sp/>4x:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4874"><highlight class="normal"></highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>size_type<sp/>find_last_of(<sp/>basic_string_view<sp/>v,<sp/>size_type<sp/>pos<sp/>=<sp/>npos<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nssv_noexcept<sp/><sp/></highlight><highlight class="comment">//<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>empty()</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>npos</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pos<sp/>&gt;=<sp/>size()</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>find_last_of(<sp/>v,<sp/>size()<sp/>-<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>to_pos(<sp/>std::find_first_of(<sp/>const_reverse_iterator(<sp/>cbegin()<sp/>+<sp/>pos<sp/>+<sp/>1<sp/>),<sp/>crend(),<sp/>v.cbegin(),<sp/>v.cend(),<sp/>Traits::eq<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4883"><highlight class="normal"></highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>size_type<sp/>find_last_of(<sp/>CharT<sp/>c,<sp/>size_type<sp/>pos<sp/>=<sp/>npos<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nssv_noexcept<sp/><sp/></highlight><highlight class="comment">//<sp/>(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4885"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>find_last_of(<sp/>basic_string_view(<sp/>&amp;c,<sp/>1<sp/>),<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"></highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>size_type<sp/>find_last_of(<sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>s,<sp/>size_type<sp/>pos,<sp/>size_type<sp/>count<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>find_last_of(<sp/>basic_string_view(<sp/>s,<sp/>count<sp/>),<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4893"><highlight class="normal"></highlight></codeline>
<codeline lineno="4894"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>size_type<sp/>find_last_of(<sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>s,<sp/>size_type<sp/>pos<sp/>=<sp/>npos<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4895"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>find_last_of(<sp/>basic_string_view(<sp/>s<sp/>),<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="4897"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"></highlight></codeline>
<codeline lineno="4899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find_first_not_of(),<sp/>4x:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4900"><highlight class="normal"></highlight></codeline>
<codeline lineno="4901"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>size_type<sp/>find_first_not_of(<sp/>basic_string_view<sp/>v,<sp/>size_type<sp/>pos<sp/>=<sp/>0<sp/>)<sp/>const<sp/>nssv_noexcept<sp/><sp/></highlight><highlight class="comment">//<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4902"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pos<sp/>&gt;=<sp/>size()</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>npos</highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>to_pos(<sp/>std::find_if(<sp/>cbegin()<sp/>+<sp/>pos,<sp/>cend(),<sp/>not_in_view(<sp/>v<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4906"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"></highlight></codeline>
<codeline lineno="4908"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>size_type<sp/>find_first_not_of(<sp/>CharT<sp/>c,<sp/>size_type<sp/>pos<sp/>=<sp/>0<sp/>)<sp/>const<sp/>nssv_noexcept<sp/><sp/></highlight><highlight class="comment">//<sp/>(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>find_first_not_of(<sp/>basic_string_view(<sp/>&amp;c,<sp/>1<sp/>),<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="4911"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"></highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>size_type<sp/>find_first_not_of(<sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>s,<sp/>size_type<sp/>pos,<sp/>size_type<sp/>count<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>find_first_not_of(<sp/>basic_string_view(<sp/>s,<sp/>count<sp/>),<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"></highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>size_type<sp/>find_first_not_of(<sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>s,<sp/>size_type<sp/>pos<sp/>=<sp/>0<sp/>)<sp/>const<sp/><sp/></highlight><highlight class="comment">//<sp/>(4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>find_first_not_of(<sp/>basic_string_view(<sp/>s<sp/>),<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4922"><highlight class="normal"></highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find_last_not_of(),<sp/>4x:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4924"><highlight class="normal"></highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>size_type<sp/>find_last_not_of(<sp/>basic_string_view<sp/>v,<sp/>size_type<sp/>pos<sp/>=<sp/>npos<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nssv_noexcept<sp/><sp/></highlight><highlight class="comment">//<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4926"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>empty()</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>npos</highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>pos<sp/>&gt;=<sp/>size()</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>find_last_not_of(<sp/>v,<sp/>size()<sp/>-<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>to_pos(<sp/>std::find_if(<sp/>const_reverse_iterator(<sp/>cbegin()<sp/>+<sp/>pos<sp/>+<sp/>1<sp/>),<sp/>crend(),<sp/>not_in_view(<sp/>v<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"></highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>size_type<sp/>find_last_not_of(<sp/>CharT<sp/>c,<sp/>size_type<sp/>pos<sp/>=<sp/>npos<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nssv_noexcept<sp/><sp/></highlight><highlight class="comment">//<sp/>(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>find_last_not_of(<sp/>basic_string_view(<sp/>&amp;c,<sp/>1<sp/>),<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"></highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>size_type<sp/>find_last_not_of(<sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>s,<sp/>size_type<sp/>pos,<sp/>size_type<sp/>count<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>find_last_not_of(<sp/>basic_string_view(<sp/>s,<sp/>count<sp/>),<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4943"><highlight class="normal"></highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>size_type<sp/>find_last_not_of(<sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>s,<sp/>size_type<sp/>pos<sp/>=<sp/>npos<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>find_last_not_of(<sp/>basic_string_view(<sp/>s<sp/>),<sp/>pos<sp/>);</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4948"><highlight class="normal"></highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Constants:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4950"><highlight class="normal"></highlight></codeline>
<codeline lineno="4951"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_CPP17_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>nssv_constexpr<sp/>size_type<sp/>npos<sp/>=<sp/>size_type(-1);</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>nssv_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/><sp/><sp/>enum<sp/>:<sp/>size_type<sp/>{<sp/>npos<sp/>=<sp/>size_type(-1)<sp/>};</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>npos<sp/>=<sp/>size_type(-1)<sp/>};</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4958"><highlight class="normal"></highlight></codeline>
<codeline lineno="4959"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">not_in_view</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>basic_string_view<sp/>v;</highlight></codeline>
<codeline lineno="4963"><highlight class="normal"></highlight></codeline>
<codeline lineno="4964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nssv_constexpr<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>not_in_view(<sp/>basic_string_view<sp/>v_<sp/>)<sp/>:<sp/>v(<sp/>v_<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="4965"><highlight class="normal"></highlight></codeline>
<codeline lineno="4966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(<sp/>CharT<sp/>c<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4967"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>npos<sp/>==<sp/>v.find_first_of(<sp/>c<sp/>);</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4970"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4971"><highlight class="normal"></highlight></codeline>
<codeline lineno="4972"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>size_type<sp/>to_pos(<sp/>const_iterator<sp/>it<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4973"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it<sp/>==<sp/>cend()<sp/>?<sp/>npos<sp/>:<sp/>size_type(<sp/>it<sp/>-<sp/>cbegin()<sp/>);</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4976"><highlight class="normal"></highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>size_type<sp/>to_pos(<sp/>const_reverse_iterator<sp/>it<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4978"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it<sp/>==<sp/>crend()<sp/>?<sp/>npos<sp/>:<sp/>size_type(<sp/>crend()<sp/>-<sp/>it<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"></highlight></codeline>
<codeline lineno="4982"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_constexpr<sp/>const_reference<sp/>data_at(<sp/>size_type<sp/>pos<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4983"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_BETWEEN(<sp/>nssv_COMPILER_GNUC_VERSION,<sp/>1,<sp/>500<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[pos];</highlight></codeline>
<codeline lineno="4986"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>assert(<sp/>pos<sp/>&lt;<sp/>size()<sp/>),<sp/>data_[pos];</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4990"><highlight class="normal"></highlight></codeline>
<codeline lineno="4991"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4992"><highlight class="normal"><sp/><sp/><sp/><sp/>const_pointer<sp/>data_;</highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/><sp/><sp/>size_type<sp/><sp/><sp/><sp/><sp/>size_;</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"></highlight></codeline>
<codeline lineno="4995"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4996"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_CONFIG_CONVERSION_STD_STRING_CLASS_METHODS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4997"><highlight class="normal"></highlight></codeline>
<codeline lineno="4998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Allocator<sp/>&gt;</highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view(<sp/>std::basic_string&lt;CharT,<sp/>Traits,<sp/>Allocator&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>s<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>data_(<sp/>s.data()<sp/>)</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>size_(<sp/>s.size()<sp/>)</highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"></highlight></codeline>
<codeline lineno="5004"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_HAVE_EXPLICIT_CONVERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5005"><highlight class="normal"></highlight></codeline>
<codeline lineno="5006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Allocator<sp/>&gt;</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::basic_string&lt;CharT,<sp/>Traits,<sp/>Allocator&gt;()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="5008"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>to_string(<sp/>Allocator()<sp/>);</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"></highlight></codeline>
<codeline lineno="5012"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>nssv_HAVE_EXPLICIT_CONVERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5013"><highlight class="normal"></highlight></codeline>
<codeline lineno="5014"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5015"><highlight class="normal"></highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Allocator<sp/>=<sp/>std::allocator&lt;CharT&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/><sp/><sp/>std::basic_string&lt;CharT,<sp/>Traits,<sp/>Allocator&gt;</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/><sp/><sp/>to_string(<sp/>Allocator<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>a<sp/>=<sp/>Allocator()<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="5019"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::basic_string&lt;CharT,<sp/>Traits,<sp/>Allocator&gt;(<sp/>begin(),<sp/>end(),<sp/>a<sp/>);</highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5022"><highlight class="normal"></highlight></codeline>
<codeline lineno="5023"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5024"><highlight class="normal"></highlight></codeline>
<codeline lineno="5025"><highlight class="normal"><sp/><sp/><sp/><sp/>std::basic_string&lt;CharT,<sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5026"><highlight class="normal"><sp/><sp/><sp/><sp/>to_string()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="5027"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::basic_string&lt;CharT,<sp/>Traits&gt;(<sp/>begin(),<sp/>end()<sp/>);</highlight></codeline>
<codeline lineno="5029"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5030"><highlight class="normal"></highlight></codeline>
<codeline lineno="5031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Allocator<sp/>&gt;</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/><sp/><sp/>std::basic_string&lt;CharT,<sp/>Traits,<sp/>Allocator&gt;</highlight></codeline>
<codeline lineno="5033"><highlight class="normal"><sp/><sp/><sp/><sp/>to_string(<sp/>Allocator<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>a<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="5034"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::basic_string&lt;CharT,<sp/>Traits,<sp/>Allocator&gt;(<sp/>begin(),<sp/>end(),<sp/>a<sp/>);</highlight></codeline>
<codeline lineno="5036"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5037"><highlight class="normal"></highlight></codeline>
<codeline lineno="5038"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>nssv_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5039"><highlight class="normal"></highlight></codeline>
<codeline lineno="5040"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>nssv_CONFIG_CONVERSION_STD_STRING_CLASS_METHODS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5041"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5042"><highlight class="normal"></highlight></codeline>
<codeline lineno="5043"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5044"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Non-member<sp/>functions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5045"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5046"><highlight class="normal"></highlight></codeline>
<codeline lineno="5047"><highlight class="normal"></highlight><highlight class="comment">//<sp/>24.4.3<sp/>Non-member<sp/>comparison<sp/>functions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5048"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lexicographically<sp/>compare<sp/>two<sp/>string<sp/>views<sp/>(function<sp/>template):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5049"><highlight class="normal"></highlight></codeline>
<codeline lineno="5050"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits<sp/>&gt;</highlight></codeline>
<codeline lineno="5051"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==<sp/>(</highlight></codeline>
<codeline lineno="5052"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view<sp/>&lt;CharT,<sp/>Traits&gt;<sp/>lhs,</highlight></codeline>
<codeline lineno="5053"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view<sp/>&lt;CharT,<sp/>Traits&gt;<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5054"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.size()<sp/>==<sp/>rhs.size()<sp/>&amp;&amp;<sp/>lhs.compare(<sp/>rhs<sp/>)<sp/>==<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5055"><highlight class="normal"></highlight></codeline>
<codeline lineno="5056"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits<sp/>&gt;</highlight></codeline>
<codeline lineno="5057"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=<sp/>(</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view<sp/>&lt;CharT,<sp/>Traits&gt;<sp/>lhs,</highlight></codeline>
<codeline lineno="5059"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view<sp/>&lt;CharT,<sp/>Traits&gt;<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5060"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(<sp/>lhs<sp/>==<sp/>rhs<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="5061"><highlight class="normal"></highlight></codeline>
<codeline lineno="5062"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits<sp/>&gt;</highlight></codeline>
<codeline lineno="5063"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;<sp/>(</highlight></codeline>
<codeline lineno="5064"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view<sp/>&lt;CharT,<sp/>Traits&gt;<sp/>lhs,</highlight></codeline>
<codeline lineno="5065"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view<sp/>&lt;CharT,<sp/>Traits&gt;<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5066"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(<sp/>rhs<sp/>)<sp/>&lt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5067"><highlight class="normal"></highlight></codeline>
<codeline lineno="5068"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits<sp/>&gt;</highlight></codeline>
<codeline lineno="5069"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=<sp/>(</highlight></codeline>
<codeline lineno="5070"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view<sp/>&lt;CharT,<sp/>Traits&gt;<sp/>lhs,</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view<sp/>&lt;CharT,<sp/>Traits&gt;<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5072"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(<sp/>rhs<sp/>)<sp/>&lt;=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5073"><highlight class="normal"></highlight></codeline>
<codeline lineno="5074"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits<sp/>&gt;</highlight></codeline>
<codeline lineno="5075"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;<sp/>(</highlight></codeline>
<codeline lineno="5076"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view<sp/>&lt;CharT,<sp/>Traits&gt;<sp/>lhs,</highlight></codeline>
<codeline lineno="5077"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view<sp/>&lt;CharT,<sp/>Traits&gt;<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5078"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(<sp/>rhs<sp/>)<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5079"><highlight class="normal"></highlight></codeline>
<codeline lineno="5080"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits<sp/>&gt;</highlight></codeline>
<codeline lineno="5081"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;=<sp/>(</highlight></codeline>
<codeline lineno="5082"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view<sp/>&lt;CharT,<sp/>Traits&gt;<sp/>lhs,</highlight></codeline>
<codeline lineno="5083"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view<sp/>&lt;CharT,<sp/>Traits&gt;<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5084"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(<sp/>rhs<sp/>)<sp/>&gt;=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5085"><highlight class="normal"></highlight></codeline>
<codeline lineno="5086"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Let<sp/>S<sp/>be<sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;,<sp/>and<sp/>sv<sp/>be<sp/>an<sp/>instance<sp/>of<sp/>S.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5087"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implementations<sp/>shall<sp/>provide<sp/>sufficient<sp/>additional<sp/>overloads<sp/>marked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5088"><highlight class="normal"></highlight><highlight class="comment">//<sp/>constexpr<sp/>and<sp/>noexcept<sp/>so<sp/>that<sp/>an<sp/>object<sp/>t<sp/>with<sp/>an<sp/>implicit<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5089"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>S<sp/>can<sp/>be<sp/>compared<sp/>according<sp/>to<sp/>Table<sp/>67.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5090"><highlight class="normal"></highlight></codeline>
<codeline lineno="5091"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!<sp/>nssv_CPP11_OR_GREATER<sp/>||<sp/>nssv_BETWEEN(<sp/>nssv_COMPILER_MSVC_VERSION,<sp/>100,<sp/>141<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5092"><highlight class="normal"></highlight></codeline>
<codeline lineno="5093"><highlight class="normal"></highlight><highlight class="comment">//<sp/>accommodate<sp/>for<sp/>older<sp/>compilers:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5094"><highlight class="normal"></highlight></codeline>
<codeline lineno="5095"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5096"><highlight class="normal"></highlight></codeline>
<codeline lineno="5097"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5098"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight></codeline>
<codeline lineno="5099"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>lhs,</highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/><sp/><sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5101"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.size()<sp/>==<sp/>detail::length(<sp/>rhs<sp/>)<sp/>&amp;&amp;<sp/>lhs.compare(<sp/>rhs<sp/>)<sp/>==<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5102"><highlight class="normal"></highlight></codeline>
<codeline lineno="5103"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5104"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight></codeline>
<codeline lineno="5105"><highlight class="normal"><sp/><sp/><sp/><sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>lhs,</highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5107"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::length(<sp/>lhs<sp/>)<sp/>==<sp/>rhs.size()<sp/>&amp;&amp;<sp/>rhs.compare(<sp/>lhs<sp/>)<sp/>==<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"></highlight></codeline>
<codeline lineno="5109"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5110"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight></codeline>
<codeline lineno="5111"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>lhs,</highlight></codeline>
<codeline lineno="5112"><highlight class="normal"><sp/><sp/><sp/><sp/>std::basic_string&lt;CharT,<sp/>Traits&gt;<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5113"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.size()<sp/>==<sp/>rhs.size()<sp/>&amp;&amp;<sp/>lhs.compare(<sp/>rhs<sp/>)<sp/>==<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5114"><highlight class="normal"></highlight></codeline>
<codeline lineno="5115"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5116"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"><sp/><sp/><sp/><sp/>std::basic_string&lt;CharT,<sp/>Traits&gt;<sp/>rhs,</highlight></codeline>
<codeline lineno="5118"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>lhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5119"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.size()<sp/>==<sp/>rhs.size()<sp/>&amp;&amp;<sp/>lhs.compare(<sp/>rhs<sp/>)<sp/>==<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5120"><highlight class="normal"></highlight></codeline>
<codeline lineno="5121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>!=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5122"><highlight class="normal"></highlight></codeline>
<codeline lineno="5123"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5124"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>lhs,</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/><sp/><sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5127"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(<sp/>lhs<sp/>==<sp/>rhs<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"></highlight></codeline>
<codeline lineno="5129"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5130"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight></codeline>
<codeline lineno="5131"><highlight class="normal"><sp/><sp/><sp/><sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>lhs,</highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5133"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(<sp/>lhs<sp/>==<sp/>rhs<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"></highlight></codeline>
<codeline lineno="5135"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5136"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>lhs,</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"><sp/><sp/><sp/><sp/>std::basic_string&lt;CharT,<sp/>Traits&gt;<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5139"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(<sp/>lhs<sp/>==<sp/>rhs<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="5140"><highlight class="normal"></highlight></codeline>
<codeline lineno="5141"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5142"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/><sp/><sp/>std::basic_string&lt;CharT,<sp/>Traits&gt;<sp/>rhs,</highlight></codeline>
<codeline lineno="5144"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>lhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5145"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(<sp/>lhs<sp/>==<sp/>rhs<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="5146"><highlight class="normal"></highlight></codeline>
<codeline lineno="5147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5148"><highlight class="normal"></highlight></codeline>
<codeline lineno="5149"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5150"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>lhs,</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/><sp/><sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5153"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(<sp/>rhs<sp/>)<sp/>&lt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"></highlight></codeline>
<codeline lineno="5155"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5156"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(</highlight></codeline>
<codeline lineno="5157"><highlight class="normal"><sp/><sp/><sp/><sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>lhs,</highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5159"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs.compare(<sp/>lhs<sp/>)<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"></highlight></codeline>
<codeline lineno="5161"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5162"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(</highlight></codeline>
<codeline lineno="5163"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>lhs,</highlight></codeline>
<codeline lineno="5164"><highlight class="normal"><sp/><sp/><sp/><sp/>std::basic_string&lt;CharT,<sp/>Traits&gt;<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5165"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(<sp/>rhs<sp/>)<sp/>&lt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5166"><highlight class="normal"></highlight></codeline>
<codeline lineno="5167"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5168"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(</highlight></codeline>
<codeline lineno="5169"><highlight class="normal"><sp/><sp/><sp/><sp/>std::basic_string&lt;CharT,<sp/>Traits&gt;<sp/>rhs,</highlight></codeline>
<codeline lineno="5170"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>lhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5171"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs.compare(<sp/>lhs<sp/>)<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5172"><highlight class="normal"></highlight></codeline>
<codeline lineno="5173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&lt;=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5174"><highlight class="normal"></highlight></codeline>
<codeline lineno="5175"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5176"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=(</highlight></codeline>
<codeline lineno="5177"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>lhs,</highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/><sp/><sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5179"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(<sp/>rhs<sp/>)<sp/>&lt;=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5180"><highlight class="normal"></highlight></codeline>
<codeline lineno="5181"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5182"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=(</highlight></codeline>
<codeline lineno="5183"><highlight class="normal"><sp/><sp/><sp/><sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>lhs,</highlight></codeline>
<codeline lineno="5184"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5185"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs.compare(<sp/>lhs<sp/>)<sp/>&gt;=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5186"><highlight class="normal"></highlight></codeline>
<codeline lineno="5187"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5188"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=(</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>lhs,</highlight></codeline>
<codeline lineno="5190"><highlight class="normal"><sp/><sp/><sp/><sp/>std::basic_string&lt;CharT,<sp/>Traits&gt;<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5191"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(<sp/>rhs<sp/>)<sp/>&lt;=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5192"><highlight class="normal"></highlight></codeline>
<codeline lineno="5193"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5194"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=(</highlight></codeline>
<codeline lineno="5195"><highlight class="normal"><sp/><sp/><sp/><sp/>std::basic_string&lt;CharT,<sp/>Traits&gt;<sp/>rhs,</highlight></codeline>
<codeline lineno="5196"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>lhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5197"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs.compare(<sp/>lhs<sp/>)<sp/>&gt;=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5198"><highlight class="normal"></highlight></codeline>
<codeline lineno="5199"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5200"><highlight class="normal"></highlight></codeline>
<codeline lineno="5201"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5202"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;(</highlight></codeline>
<codeline lineno="5203"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>lhs,</highlight></codeline>
<codeline lineno="5204"><highlight class="normal"><sp/><sp/><sp/><sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5205"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(<sp/>rhs<sp/>)<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5206"><highlight class="normal"></highlight></codeline>
<codeline lineno="5207"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5208"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;(</highlight></codeline>
<codeline lineno="5209"><highlight class="normal"><sp/><sp/><sp/><sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>lhs,</highlight></codeline>
<codeline lineno="5210"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5211"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs.compare(<sp/>lhs<sp/>)<sp/>&lt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5212"><highlight class="normal"></highlight></codeline>
<codeline lineno="5213"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5214"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;(</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>lhs,</highlight></codeline>
<codeline lineno="5216"><highlight class="normal"><sp/><sp/><sp/><sp/>std::basic_string&lt;CharT,<sp/>Traits&gt;<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5217"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(<sp/>rhs<sp/>)<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5218"><highlight class="normal"></highlight></codeline>
<codeline lineno="5219"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5220"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;(</highlight></codeline>
<codeline lineno="5221"><highlight class="normal"><sp/><sp/><sp/><sp/>std::basic_string&lt;CharT,<sp/>Traits&gt;<sp/>rhs,</highlight></codeline>
<codeline lineno="5222"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>lhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5223"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs.compare(<sp/>lhs<sp/>)<sp/>&lt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5224"><highlight class="normal"></highlight></codeline>
<codeline lineno="5225"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&gt;=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5226"><highlight class="normal"></highlight></codeline>
<codeline lineno="5227"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5228"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;=(</highlight></codeline>
<codeline lineno="5229"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>lhs,</highlight></codeline>
<codeline lineno="5230"><highlight class="normal"><sp/><sp/><sp/><sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5231"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(<sp/>rhs<sp/>)<sp/>&gt;=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5232"><highlight class="normal"></highlight></codeline>
<codeline lineno="5233"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5234"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;=(</highlight></codeline>
<codeline lineno="5235"><highlight class="normal"><sp/><sp/><sp/><sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>lhs,</highlight></codeline>
<codeline lineno="5236"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5237"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs.compare(<sp/>lhs<sp/>)<sp/>&lt;=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5238"><highlight class="normal"></highlight></codeline>
<codeline lineno="5239"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5240"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;=(</highlight></codeline>
<codeline lineno="5241"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>lhs,</highlight></codeline>
<codeline lineno="5242"><highlight class="normal"><sp/><sp/><sp/><sp/>std::basic_string&lt;CharT,<sp/>Traits&gt;<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5243"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(<sp/>rhs<sp/>)<sp/>&gt;=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5244"><highlight class="normal"></highlight></codeline>
<codeline lineno="5245"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5246"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;=(</highlight></codeline>
<codeline lineno="5247"><highlight class="normal"><sp/><sp/><sp/><sp/>std::basic_string&lt;CharT,<sp/>Traits&gt;<sp/>rhs,</highlight></codeline>
<codeline lineno="5248"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>lhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5249"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs.compare(<sp/>lhs<sp/>)<sp/>&lt;=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5250"><highlight class="normal"></highlight></codeline>
<codeline lineno="5251"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>newer<sp/>compilers:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5252"><highlight class="normal"></highlight></codeline>
<codeline lineno="5253"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>nssv_BASIC_STRING_VIEW_I(T,U)<sp/><sp/>typename<sp/>std::decay&lt;<sp/>basic_string_view&lt;T,U&gt;<sp/>&gt;::type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5254"><highlight class="normal"></highlight></codeline>
<codeline lineno="5255"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>issue<sp/>40</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5256"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_MSVC_ORDER(x)<sp/><sp/>,<sp/>int=x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5257"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5258"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>nssv_MSVC_ORDER(x)<sp/><sp/></highlight><highlight class="comment">/*,<sp/>int=x*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5259"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5260"><highlight class="normal"></highlight></codeline>
<codeline lineno="5261"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5262"><highlight class="normal"></highlight></codeline>
<codeline lineno="5263"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits<sp/><sp/>nssv_MSVC_ORDER(1)<sp/>&gt;</highlight></codeline>
<codeline lineno="5264"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight></codeline>
<codeline lineno="5265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basic_string_view<sp/><sp/>&lt;CharT,<sp/>Traits&gt;<sp/>lhs,</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_BASIC_STRING_VIEW_I(CharT,<sp/>Traits)<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5267"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.size()<sp/>==<sp/>rhs.size()<sp/>&amp;&amp;<sp/>lhs.compare(<sp/>rhs<sp/>)<sp/>==<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5268"><highlight class="normal"></highlight></codeline>
<codeline lineno="5269"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits<sp/><sp/>nssv_MSVC_ORDER(2)<sp/>&gt;</highlight></codeline>
<codeline lineno="5270"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight></codeline>
<codeline lineno="5271"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_BASIC_STRING_VIEW_I(CharT,<sp/>Traits)<sp/>lhs,</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basic_string_view<sp/><sp/>&lt;CharT,<sp/>Traits&gt;<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5273"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.size()<sp/>==<sp/>rhs.size()<sp/>&amp;&amp;<sp/>lhs.compare(<sp/>rhs<sp/>)<sp/>==<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5274"><highlight class="normal"></highlight></codeline>
<codeline lineno="5275"><highlight class="normal"></highlight><highlight class="comment">//<sp/>!=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5276"><highlight class="normal"></highlight></codeline>
<codeline lineno="5277"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits<sp/><sp/>nssv_MSVC_ORDER(1)<sp/>&gt;</highlight></codeline>
<codeline lineno="5278"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=<sp/>(</highlight></codeline>
<codeline lineno="5279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basic_string_view<sp/><sp/>&lt;<sp/>CharT,<sp/>Traits<sp/>&gt;<sp/>lhs,</highlight></codeline>
<codeline lineno="5280"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_BASIC_STRING_VIEW_I(<sp/>CharT,<sp/>Traits<sp/>)<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5281"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(<sp/>lhs<sp/>==<sp/>rhs<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="5282"><highlight class="normal"></highlight></codeline>
<codeline lineno="5283"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits<sp/><sp/>nssv_MSVC_ORDER(2)<sp/>&gt;</highlight></codeline>
<codeline lineno="5284"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=<sp/>(</highlight></codeline>
<codeline lineno="5285"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_BASIC_STRING_VIEW_I(<sp/>CharT,<sp/>Traits<sp/>)<sp/>lhs,</highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basic_string_view<sp/><sp/>&lt;<sp/>CharT,<sp/>Traits<sp/>&gt;<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5287"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(<sp/>lhs<sp/>==<sp/>rhs<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="5288"><highlight class="normal"></highlight></codeline>
<codeline lineno="5289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5290"><highlight class="normal"></highlight></codeline>
<codeline lineno="5291"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits<sp/><sp/>nssv_MSVC_ORDER(1)<sp/>&gt;</highlight></codeline>
<codeline lineno="5292"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;<sp/>(</highlight></codeline>
<codeline lineno="5293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basic_string_view<sp/><sp/>&lt;<sp/>CharT,<sp/>Traits<sp/>&gt;<sp/>lhs,</highlight></codeline>
<codeline lineno="5294"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_BASIC_STRING_VIEW_I(<sp/>CharT,<sp/>Traits<sp/>)<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5295"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(<sp/>rhs<sp/>)<sp/>&lt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5296"><highlight class="normal"></highlight></codeline>
<codeline lineno="5297"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits<sp/><sp/>nssv_MSVC_ORDER(2)<sp/>&gt;</highlight></codeline>
<codeline lineno="5298"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;<sp/>(</highlight></codeline>
<codeline lineno="5299"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_BASIC_STRING_VIEW_I(<sp/>CharT,<sp/>Traits<sp/>)<sp/>lhs,</highlight></codeline>
<codeline lineno="5300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basic_string_view<sp/><sp/>&lt;<sp/>CharT,<sp/>Traits<sp/>&gt;<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5301"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(<sp/>rhs<sp/>)<sp/>&lt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5302"><highlight class="normal"></highlight></codeline>
<codeline lineno="5303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&lt;=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5304"><highlight class="normal"></highlight></codeline>
<codeline lineno="5305"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits<sp/><sp/>nssv_MSVC_ORDER(1)<sp/>&gt;</highlight></codeline>
<codeline lineno="5306"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=<sp/>(</highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basic_string_view<sp/><sp/>&lt;<sp/>CharT,<sp/>Traits<sp/>&gt;<sp/>lhs,</highlight></codeline>
<codeline lineno="5308"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_BASIC_STRING_VIEW_I(<sp/>CharT,<sp/>Traits<sp/>)<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5309"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(<sp/>rhs<sp/>)<sp/>&lt;=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5310"><highlight class="normal"></highlight></codeline>
<codeline lineno="5311"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits<sp/><sp/>nssv_MSVC_ORDER(2)<sp/>&gt;</highlight></codeline>
<codeline lineno="5312"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=<sp/>(</highlight></codeline>
<codeline lineno="5313"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_BASIC_STRING_VIEW_I(<sp/>CharT,<sp/>Traits<sp/>)<sp/>lhs,</highlight></codeline>
<codeline lineno="5314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basic_string_view<sp/><sp/>&lt;<sp/>CharT,<sp/>Traits<sp/>&gt;<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5315"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(<sp/>rhs<sp/>)<sp/>&lt;=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5316"><highlight class="normal"></highlight></codeline>
<codeline lineno="5317"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5318"><highlight class="normal"></highlight></codeline>
<codeline lineno="5319"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits<sp/><sp/>nssv_MSVC_ORDER(1)<sp/>&gt;</highlight></codeline>
<codeline lineno="5320"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;<sp/>(</highlight></codeline>
<codeline lineno="5321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basic_string_view<sp/><sp/>&lt;<sp/>CharT,<sp/>Traits<sp/>&gt;<sp/>lhs,</highlight></codeline>
<codeline lineno="5322"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_BASIC_STRING_VIEW_I(<sp/>CharT,<sp/>Traits<sp/>)<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5323"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(<sp/>rhs<sp/>)<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5324"><highlight class="normal"></highlight></codeline>
<codeline lineno="5325"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits<sp/><sp/>nssv_MSVC_ORDER(2)<sp/>&gt;</highlight></codeline>
<codeline lineno="5326"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;<sp/>(</highlight></codeline>
<codeline lineno="5327"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_BASIC_STRING_VIEW_I(<sp/>CharT,<sp/>Traits<sp/>)<sp/>lhs,</highlight></codeline>
<codeline lineno="5328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basic_string_view<sp/><sp/>&lt;<sp/>CharT,<sp/>Traits<sp/>&gt;<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5329"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(<sp/>rhs<sp/>)<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5330"><highlight class="normal"></highlight></codeline>
<codeline lineno="5331"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&gt;=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5332"><highlight class="normal"></highlight></codeline>
<codeline lineno="5333"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits<sp/><sp/>nssv_MSVC_ORDER(1)<sp/>&gt;</highlight></codeline>
<codeline lineno="5334"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;=<sp/>(</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basic_string_view<sp/><sp/>&lt;<sp/>CharT,<sp/>Traits<sp/>&gt;<sp/>lhs,</highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_BASIC_STRING_VIEW_I(<sp/>CharT,<sp/>Traits<sp/>)<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5337"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(<sp/>rhs<sp/>)<sp/>&gt;=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"></highlight></codeline>
<codeline lineno="5339"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits<sp/><sp/>nssv_MSVC_ORDER(2)<sp/>&gt;</highlight></codeline>
<codeline lineno="5340"><highlight class="normal">nssv_constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;=<sp/>(</highlight></codeline>
<codeline lineno="5341"><highlight class="normal"><sp/><sp/><sp/><sp/>nssv_BASIC_STRING_VIEW_I(<sp/>CharT,<sp/>Traits<sp/>)<sp/>lhs,</highlight></codeline>
<codeline lineno="5342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basic_string_view<sp/><sp/>&lt;<sp/>CharT,<sp/>Traits<sp/>&gt;<sp/>rhs<sp/>)<sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5343"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(<sp/>rhs<sp/>)<sp/>&gt;=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="5344"><highlight class="normal"></highlight></codeline>
<codeline lineno="5345"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>nssv_MSVC_ORDER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5346"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>nssv_BASIC_STRING_VIEW_I</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5347"><highlight class="normal"></highlight></codeline>
<codeline lineno="5348"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>compiler-dependent<sp/>approach<sp/>to<sp/>comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5349"><highlight class="normal"></highlight></codeline>
<codeline lineno="5350"><highlight class="normal"></highlight><highlight class="comment">//<sp/>24.4.4<sp/>Inserters<sp/>and<sp/>extractors:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5351"><highlight class="normal"></highlight></codeline>
<codeline lineno="5352"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!<sp/>nssv_CONFIG_NO_STREAM_INSERTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5353"><highlight class="normal"></highlight></codeline>
<codeline lineno="5354"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="5355"><highlight class="normal"></highlight></codeline>
<codeline lineno="5356"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Stream<sp/>&gt;</highlight></codeline>
<codeline lineno="5357"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_padding(<sp/>Stream<sp/>&amp;<sp/>os,<sp/>std::streamsize<sp/>n<sp/>)</highlight></codeline>
<codeline lineno="5358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>std::streamsize<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="5360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.rdbuf()-&gt;sputc(<sp/>os.fill()<sp/>);</highlight></codeline>
<codeline lineno="5361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5362"><highlight class="normal"></highlight></codeline>
<codeline lineno="5363"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Stream,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>View<sp/>&gt;</highlight></codeline>
<codeline lineno="5364"><highlight class="normal">Stream<sp/>&amp;<sp/>write_to_stream(<sp/>Stream<sp/>&amp;<sp/>os,<sp/>View<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>sv<sp/>)</highlight></codeline>
<codeline lineno="5365"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stream::sentry<sp/>sentry(<sp/>os<sp/>);</highlight></codeline>
<codeline lineno="5367"><highlight class="normal"></highlight></codeline>
<codeline lineno="5368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!os<sp/>)</highlight></codeline>
<codeline lineno="5369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="5370"><highlight class="normal"></highlight></codeline>
<codeline lineno="5371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::streamsize<sp/>length<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::streamsize</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>sv.length()<sp/>);</highlight></codeline>
<codeline lineno="5372"><highlight class="normal"></highlight></codeline>
<codeline lineno="5373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Whether,<sp/>and<sp/>how,<sp/>to<sp/>pad:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pad<sp/>=<sp/>(<sp/>length<sp/>&lt;<sp/>os.width()<sp/>);</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>left_pad<sp/>=<sp/>pad<sp/>&amp;&amp;<sp/>(<sp/>os.flags()<sp/>&amp;<sp/>std::ios_base::adjustfield<sp/>)<sp/>==<sp/>std::ios_base::right;</highlight></codeline>
<codeline lineno="5376"><highlight class="normal"></highlight></codeline>
<codeline lineno="5377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>left_pad<sp/>)</highlight></codeline>
<codeline lineno="5378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_padding(<sp/>os,<sp/>os.width()<sp/>-<sp/>length<sp/>);</highlight></codeline>
<codeline lineno="5379"><highlight class="normal"></highlight></codeline>
<codeline lineno="5380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>span<sp/>characters:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5381"><highlight class="normal"><sp/><sp/><sp/><sp/>os.rdbuf()-&gt;sputn(<sp/>sv.begin(),<sp/>length<sp/>);</highlight></codeline>
<codeline lineno="5382"><highlight class="normal"></highlight></codeline>
<codeline lineno="5383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pad<sp/>&amp;&amp;<sp/>!left_pad<sp/>)</highlight></codeline>
<codeline lineno="5384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_padding(<sp/>os,<sp/>os.width()<sp/>-<sp/>length<sp/>);</highlight></codeline>
<codeline lineno="5385"><highlight class="normal"></highlight></codeline>
<codeline lineno="5386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>output<sp/>stream<sp/>width:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5387"><highlight class="normal"><sp/><sp/><sp/><sp/>os.width(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="5388"><highlight class="normal"></highlight></codeline>
<codeline lineno="5389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="5390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5391"><highlight class="normal"></highlight></codeline>
<codeline lineno="5392"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5393"><highlight class="normal"></highlight></codeline>
<codeline lineno="5394"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits<sp/>&gt;</highlight></codeline>
<codeline lineno="5395"><highlight class="normal">std::basic_ostream&lt;CharT,<sp/>Traits&gt;<sp/>&amp;</highlight></codeline>
<codeline lineno="5396"><highlight class="normal">operator&lt;&lt;(</highlight></codeline>
<codeline lineno="5397"><highlight class="normal"><sp/><sp/><sp/><sp/>std::basic_ostream&lt;CharT,<sp/>Traits&gt;&amp;<sp/>os,</highlight></codeline>
<codeline lineno="5398"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_string_view<sp/>&lt;CharT,<sp/>Traits&gt;<sp/>sv<sp/>)</highlight></codeline>
<codeline lineno="5399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::write_to_stream(<sp/>os,<sp/>sv<sp/>);</highlight></codeline>
<codeline lineno="5401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5402"><highlight class="normal"></highlight></codeline>
<codeline lineno="5403"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>nssv_CONFIG_NO_STREAM_INSERTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5404"><highlight class="normal"></highlight></codeline>
<codeline lineno="5405"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Several<sp/>typedefs<sp/>for<sp/>common<sp/>character<sp/>types<sp/>are<sp/>provided:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5406"><highlight class="normal"></highlight></codeline>
<codeline lineno="5407"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>basic_string_view&lt;char&gt;<sp/><sp/><sp/><sp/><sp/><sp/>string_view;</highlight></codeline>
<codeline lineno="5408"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>basic_string_view&lt;wchar_t&gt;<sp/><sp/><sp/>wstring_view;</highlight></codeline>
<codeline lineno="5409"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_HAVE_WCHAR16_T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5410"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>basic_string_view&lt;char16_t&gt;<sp/><sp/>u16string_view;</highlight></codeline>
<codeline lineno="5411"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>basic_string_view&lt;char32_t&gt;<sp/><sp/>u32string_view;</highlight></codeline>
<codeline lineno="5412"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5413"><highlight class="normal"></highlight></codeline>
<codeline lineno="5414"><highlight class="normal">}}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>nonstd::sv_lite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5415"><highlight class="normal"></highlight></codeline>
<codeline lineno="5416"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5417"><highlight class="normal"></highlight><highlight class="comment">//<sp/>24.4.6<sp/>Suffix<sp/>for<sp/>basic_string_view<sp/>literals:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5418"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5419"><highlight class="normal"></highlight></codeline>
<codeline lineno="5420"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_HAVE_USER_DEFINED_LITERALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5421"><highlight class="normal"></highlight></codeline>
<codeline lineno="5422"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">nonstd<sp/>{</highlight></codeline>
<codeline lineno="5423"><highlight class="normal">nssv_inline_ns<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">literals<sp/>{</highlight></codeline>
<codeline lineno="5424"><highlight class="normal">nssv_inline_ns<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">string_view_literals<sp/>{</highlight></codeline>
<codeline lineno="5425"><highlight class="normal"></highlight></codeline>
<codeline lineno="5426"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_CONFIG_STD_SV_OPERATOR<sp/>&amp;&amp;<sp/>nssv_HAVE_STD_DEFINED_LITERALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5427"><highlight class="normal"></highlight></codeline>
<codeline lineno="5428"><highlight class="normal">nssv_constexpr<sp/>nonstd::sv_lite::string_view<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>sv(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>)<sp/>nssv_noexcept<sp/><sp/></highlight><highlight class="comment">//<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5429"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nonstd::sv_lite::string_view{<sp/>str,<sp/>len<sp/>};</highlight></codeline>
<codeline lineno="5431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5432"><highlight class="normal"></highlight></codeline>
<codeline lineno="5433"><highlight class="normal">nssv_constexpr<sp/>nonstd::sv_lite::u16string_view<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>sv(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char16_t</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>)<sp/>nssv_noexcept<sp/><sp/></highlight><highlight class="comment">//<sp/>(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5434"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nonstd::sv_lite::u16string_view{<sp/>str,<sp/>len<sp/>};</highlight></codeline>
<codeline lineno="5436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5437"><highlight class="normal"></highlight></codeline>
<codeline lineno="5438"><highlight class="normal">nssv_constexpr<sp/>nonstd::sv_lite::u32string_view<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>sv(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char32_t</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>)<sp/>nssv_noexcept<sp/><sp/></highlight><highlight class="comment">//<sp/>(3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nonstd::sv_lite::u32string_view{<sp/>str,<sp/>len<sp/>};</highlight></codeline>
<codeline lineno="5441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5442"><highlight class="normal"></highlight></codeline>
<codeline lineno="5443"><highlight class="normal">nssv_constexpr<sp/>nonstd::sv_lite::wstring_view<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>sv(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>)<sp/>nssv_noexcept<sp/><sp/></highlight><highlight class="comment">//<sp/>(4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5444"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nonstd::sv_lite::wstring_view{<sp/>str,<sp/>len<sp/>};</highlight></codeline>
<codeline lineno="5446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5447"><highlight class="normal"></highlight></codeline>
<codeline lineno="5448"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>nssv_CONFIG_STD_SV_OPERATOR<sp/>&amp;&amp;<sp/>nssv_HAVE_STD_DEFINED_LITERALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5449"><highlight class="normal"></highlight></codeline>
<codeline lineno="5450"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_CONFIG_USR_SV_OPERATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5451"><highlight class="normal"></highlight></codeline>
<codeline lineno="5452"><highlight class="normal">nssv_constexpr<sp/>nonstd::sv_lite::string_view<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_sv(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>)<sp/>nssv_noexcept<sp/><sp/></highlight><highlight class="comment">//<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nonstd::sv_lite::string_view{<sp/>str,<sp/>len<sp/>};</highlight></codeline>
<codeline lineno="5455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5456"><highlight class="normal"></highlight></codeline>
<codeline lineno="5457"><highlight class="normal">nssv_constexpr<sp/>nonstd::sv_lite::u16string_view<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_sv(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char16_t</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>)<sp/>nssv_noexcept<sp/><sp/></highlight><highlight class="comment">//<sp/>(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nonstd::sv_lite::u16string_view{<sp/>str,<sp/>len<sp/>};</highlight></codeline>
<codeline lineno="5460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5461"><highlight class="normal"></highlight></codeline>
<codeline lineno="5462"><highlight class="normal">nssv_constexpr<sp/>nonstd::sv_lite::u32string_view<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_sv(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char32_t</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>)<sp/>nssv_noexcept<sp/><sp/></highlight><highlight class="comment">//<sp/>(3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nonstd::sv_lite::u32string_view{<sp/>str,<sp/>len<sp/>};</highlight></codeline>
<codeline lineno="5465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5466"><highlight class="normal"></highlight></codeline>
<codeline lineno="5467"><highlight class="normal">nssv_constexpr<sp/>nonstd::sv_lite::wstring_view<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_sv(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>)<sp/>nssv_noexcept<sp/><sp/></highlight><highlight class="comment">//<sp/>(4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5468"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nonstd::sv_lite::wstring_view{<sp/>str,<sp/>len<sp/>};</highlight></codeline>
<codeline lineno="5470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5471"><highlight class="normal"></highlight></codeline>
<codeline lineno="5472"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>nssv_CONFIG_USR_SV_OPERATOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5473"><highlight class="normal"></highlight></codeline>
<codeline lineno="5474"><highlight class="normal">}}}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>nonstd::literals::string_view_literals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5475"><highlight class="normal"></highlight></codeline>
<codeline lineno="5476"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5477"><highlight class="normal"></highlight></codeline>
<codeline lineno="5478"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5479"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Extensions<sp/>for<sp/>std::string:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5480"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5481"><highlight class="normal"></highlight></codeline>
<codeline lineno="5482"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_CONFIG_CONVERSION_STD_STRING_FREE_FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5483"><highlight class="normal"></highlight></codeline>
<codeline lineno="5484"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">nonstd<sp/>{</highlight></codeline>
<codeline lineno="5485"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">sv_lite<sp/>{</highlight></codeline>
<codeline lineno="5486"><highlight class="normal"></highlight></codeline>
<codeline lineno="5487"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Exclude<sp/>MSVC<sp/>14<sp/>(19.00):<sp/>it<sp/>yields<sp/>ambiguous<sp/>to_string():</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5488"><highlight class="normal"></highlight></codeline>
<codeline lineno="5489"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_CPP11_OR_GREATER<sp/>&amp;&amp;<sp/>nssv_COMPILER_MSVC_VERSION<sp/>!=<sp/>140</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5490"><highlight class="normal"></highlight></codeline>
<codeline lineno="5491"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Allocator<sp/>=<sp/>std::allocator&lt;CharT&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="5492"><highlight class="normal">std::basic_string&lt;CharT,<sp/>Traits,<sp/>Allocator&gt;</highlight></codeline>
<codeline lineno="5493"><highlight class="normal">to_string(<sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>v,<sp/>Allocator<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>a<sp/>=<sp/>Allocator()<sp/>)</highlight></codeline>
<codeline lineno="5494"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::basic_string&lt;CharT,Traits,<sp/>Allocator&gt;(<sp/>v.begin(),<sp/>v.end(),<sp/>a<sp/>);</highlight></codeline>
<codeline lineno="5496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5497"><highlight class="normal"></highlight></codeline>
<codeline lineno="5498"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5499"><highlight class="normal"></highlight></codeline>
<codeline lineno="5500"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits<sp/>&gt;</highlight></codeline>
<codeline lineno="5501"><highlight class="normal">std::basic_string&lt;CharT,<sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5502"><highlight class="normal">to_string(<sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>v<sp/>)</highlight></codeline>
<codeline lineno="5503"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::basic_string&lt;CharT,<sp/>Traits&gt;(<sp/>v.begin(),<sp/>v.end()<sp/>);</highlight></codeline>
<codeline lineno="5505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5506"><highlight class="normal"></highlight></codeline>
<codeline lineno="5507"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Allocator<sp/>&gt;</highlight></codeline>
<codeline lineno="5508"><highlight class="normal">std::basic_string&lt;CharT,<sp/>Traits,<sp/>Allocator&gt;</highlight></codeline>
<codeline lineno="5509"><highlight class="normal">to_string(<sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;<sp/>v,<sp/>Allocator<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>a<sp/>)</highlight></codeline>
<codeline lineno="5510"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::basic_string&lt;CharT,<sp/>Traits,<sp/>Allocator&gt;(<sp/>v.begin(),<sp/>v.end(),<sp/>a<sp/>);</highlight></codeline>
<codeline lineno="5512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5513"><highlight class="normal"></highlight></codeline>
<codeline lineno="5514"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>nssv_CPP11_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5515"><highlight class="normal"></highlight></codeline>
<codeline lineno="5516"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CharT,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Traits,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Allocator<sp/>&gt;</highlight></codeline>
<codeline lineno="5517"><highlight class="normal">basic_string_view&lt;CharT,<sp/>Traits&gt;</highlight></codeline>
<codeline lineno="5518"><highlight class="normal">to_string_view(<sp/>std::basic_string&lt;CharT,<sp/>Traits,<sp/>Allocator&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>s<sp/>)</highlight></codeline>
<codeline lineno="5519"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>basic_string_view&lt;CharT,<sp/>Traits&gt;(<sp/>s.data(),<sp/>s.size()<sp/>);</highlight></codeline>
<codeline lineno="5521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"></highlight></codeline>
<codeline lineno="5523"><highlight class="normal">}}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>nonstd::sv_lite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5524"><highlight class="normal"></highlight></codeline>
<codeline lineno="5525"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>nssv_CONFIG_CONVERSION_STD_STRING_FREE_FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5526"><highlight class="normal"></highlight></codeline>
<codeline lineno="5527"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5528"><highlight class="normal"></highlight><highlight class="comment">//<sp/>make<sp/>types<sp/>and<sp/>algorithms<sp/>available<sp/>in<sp/>namespace<sp/>nonstd:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5529"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5530"><highlight class="normal"></highlight></codeline>
<codeline lineno="5531"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">nonstd<sp/>{</highlight></codeline>
<codeline lineno="5532"><highlight class="normal"></highlight></codeline>
<codeline lineno="5533"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">sv_lite::basic_string_view;</highlight></codeline>
<codeline lineno="5534"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">sv_lite::string_view;</highlight></codeline>
<codeline lineno="5535"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">sv_lite::wstring_view;</highlight></codeline>
<codeline lineno="5536"><highlight class="normal"></highlight></codeline>
<codeline lineno="5537"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_HAVE_WCHAR16_T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5538"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">sv_lite::u16string_view;</highlight></codeline>
<codeline lineno="5539"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5540"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_HAVE_WCHAR32_T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5541"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">sv_lite::u32string_view;</highlight></codeline>
<codeline lineno="5542"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5543"><highlight class="normal"></highlight></codeline>
<codeline lineno="5544"><highlight class="normal"></highlight><highlight class="comment">//<sp/>literal<sp/>&quot;sv&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5545"><highlight class="normal"></highlight></codeline>
<codeline lineno="5546"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">sv_lite::operator==;</highlight></codeline>
<codeline lineno="5547"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">sv_lite::operator!=;</highlight></codeline>
<codeline lineno="5548"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">sv_lite::operator&lt;;</highlight></codeline>
<codeline lineno="5549"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">sv_lite::operator&lt;=;</highlight></codeline>
<codeline lineno="5550"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">sv_lite::operator&gt;;</highlight></codeline>
<codeline lineno="5551"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">sv_lite::operator&gt;=;</highlight></codeline>
<codeline lineno="5552"><highlight class="normal"></highlight></codeline>
<codeline lineno="5553"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!<sp/>nssv_CONFIG_NO_STREAM_INSERTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5554"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">sv_lite::operator&lt;&lt;;</highlight></codeline>
<codeline lineno="5555"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5556"><highlight class="normal"></highlight></codeline>
<codeline lineno="5557"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_CONFIG_CONVERSION_STD_STRING_FREE_FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5558"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">sv_lite::to_string;</highlight></codeline>
<codeline lineno="5559"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">sv_lite::to_string_view;</highlight></codeline>
<codeline lineno="5560"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5561"><highlight class="normal"></highlight></codeline>
<codeline lineno="5562"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>nonstd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5563"><highlight class="normal"></highlight></codeline>
<codeline lineno="5564"><highlight class="normal"></highlight><highlight class="comment">//<sp/>24.4.5<sp/>Hash<sp/>support<sp/>(C++11):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5565"><highlight class="normal"></highlight></codeline>
<codeline lineno="5566"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>The<sp/>hash<sp/>value<sp/>of<sp/>a<sp/>string<sp/>view<sp/>object<sp/>is<sp/>equal<sp/>to<sp/>the<sp/>hash<sp/>value<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5567"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>corresponding<sp/>string<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5568"><highlight class="normal"></highlight></codeline>
<codeline lineno="5569"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>nssv_HAVE_STD_HASH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5570"><highlight class="normal"></highlight></codeline>
<codeline lineno="5571"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5572"><highlight class="normal"></highlight></codeline>
<codeline lineno="5573"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std<sp/>{</highlight></codeline>
<codeline lineno="5574"><highlight class="normal"></highlight></codeline>
<codeline lineno="5575"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="5576"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hash&lt;<sp/>nonstd::string_view<sp/>&gt;</highlight></codeline>
<codeline lineno="5577"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5578"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5579"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>operator()(<sp/>nonstd::string_view<sp/>v<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5580"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::hash&lt;std::string&gt;()(<sp/>std::string(<sp/>v.data(),<sp/>v.size()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5582"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5583"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5584"><highlight class="normal"></highlight></codeline>
<codeline lineno="5585"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="5586"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hash&lt;<sp/>nonstd::wstring_view<sp/>&gt;</highlight></codeline>
<codeline lineno="5587"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5588"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5589"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>operator()(<sp/>nonstd::wstring_view<sp/>v<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5590"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::hash&lt;std::wstring&gt;()(<sp/>std::wstring(<sp/>v.data(),<sp/>v.size()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5592"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5593"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5594"><highlight class="normal"></highlight></codeline>
<codeline lineno="5595"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="5596"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hash&lt;<sp/>nonstd::u16string_view<sp/>&gt;</highlight></codeline>
<codeline lineno="5597"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5598"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5599"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>operator()(<sp/>nonstd::u16string_view<sp/>v<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5600"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::hash&lt;std::u16string&gt;()(<sp/>std::u16string(<sp/>v.data(),<sp/>v.size()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5603"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5604"><highlight class="normal"></highlight></codeline>
<codeline lineno="5605"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="5606"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hash&lt;<sp/>nonstd::u32string_view<sp/>&gt;</highlight></codeline>
<codeline lineno="5607"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5608"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5609"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>operator()(<sp/>nonstd::u32string_view<sp/>v<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nssv_noexcept</highlight></codeline>
<codeline lineno="5610"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::hash&lt;std::u32string&gt;()(<sp/>std::u32string(<sp/>v.data(),<sp/>v.size()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5613"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5614"><highlight class="normal"></highlight></codeline>
<codeline lineno="5615"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5616"><highlight class="normal"></highlight></codeline>
<codeline lineno="5617"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>nssv_HAVE_STD_HASH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5618"><highlight class="normal"></highlight></codeline>
<codeline lineno="5619"><highlight class="normal">nssv_RESTORE_WARNINGS()</highlight></codeline>
<codeline lineno="5620"><highlight class="normal"></highlight></codeline>
<codeline lineno="5621"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>nssv_HAVE_STD_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5622"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NONSTD_SV_LITE_H_INCLUDED</highlight></codeline>
<codeline lineno="5633"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5634"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TERMCOLOR_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5635"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TERMCOLOR_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5636"><highlight class="normal"></highlight></codeline>
<codeline lineno="5637"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>following<sp/>snippet<sp/>of<sp/>code<sp/>detects<sp/>the<sp/>current<sp/>OS<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5638"><highlight class="normal"></highlight><highlight class="comment">//<sp/>defines<sp/>the<sp/>appropriate<sp/>macro<sp/>that<sp/>is<sp/>used<sp/>to<sp/>wrap<sp/>some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5639"><highlight class="normal"></highlight><highlight class="comment">//<sp/>platform<sp/>specific<sp/>things</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5640"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)<sp/>||<sp/>defined(_WIN64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5641"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TERMCOLOR_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5642"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__APPLE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5643"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TERMCOLOR_OS_MACOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5644"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__unix__)<sp/>||<sp/>defined(__unix)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5645"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TERMCOLOR_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5646"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5647"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>unsupported<sp/>platform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5648"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5649"><highlight class="normal"></highlight></codeline>
<codeline lineno="5650"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>headers<sp/>provides<sp/>the<sp/>`isatty()`/`fileno()`<sp/>functions,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5651"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>are<sp/>used<sp/>for<sp/>testing<sp/>whether<sp/>a<sp/>standart<sp/>stream<sp/>refers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5652"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>terminal.<sp/>As<sp/>for<sp/>Windows,<sp/>we<sp/>also<sp/>need<sp/>WinApi<sp/>funcs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5653"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>changing<sp/>colors<sp/>attributes<sp/>of<sp/>the<sp/>terminal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5654"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5655"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5656"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5657"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;io.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5658"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5659"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5660"><highlight class="normal"></highlight></codeline>
<codeline lineno="5661"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5662"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5663"><highlight class="normal"></highlight></codeline>
<codeline lineno="5664"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">termcolor<sp/>{</highlight></codeline>
<codeline lineno="5665"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Forward<sp/>declaration<sp/>of<sp/>the<sp/>`_internal`<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5666"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>comments<sp/>are<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5667"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">_internal<sp/>{</highlight></codeline>
<codeline lineno="5668"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>index<sp/>to<sp/>be<sp/>used<sp/>to<sp/>access<sp/>a<sp/>private<sp/>storage<sp/>of<sp/>I/O<sp/>streams.<sp/>See</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5669"><highlight class="normal"></highlight><highlight class="comment">//<sp/>colorize<sp/>/<sp/>nocolorize<sp/>I/O<sp/>manipulators<sp/>for<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5670"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>colorize_index<sp/>=<sp/>std::ios_base::xalloc();</highlight></codeline>
<codeline lineno="5671"><highlight class="normal"></highlight></codeline>
<codeline lineno="5672"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>FILE<sp/>*get_standard_stream(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;stream);</highlight></codeline>
<codeline lineno="5673"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_colorized(std::ostream<sp/>&amp;stream);</highlight></codeline>
<codeline lineno="5674"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_atty(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;stream);</highlight></codeline>
<codeline lineno="5675"><highlight class="normal"></highlight></codeline>
<codeline lineno="5676"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5677"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>win_change_attributes(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>foreground,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>background<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="5678"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5679"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>_internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5680"><highlight class="normal"></highlight></codeline>
<codeline lineno="5681"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;colorize(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5682"><highlight class="normal"><sp/><sp/>stream.iword(_internal::colorize_index)<sp/>=<sp/>1L;</highlight></codeline>
<codeline lineno="5683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5684"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5685"><highlight class="normal"></highlight></codeline>
<codeline lineno="5686"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;nocolorize(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5687"><highlight class="normal"><sp/><sp/>stream.iword(_internal::colorize_index)<sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="5688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5690"><highlight class="normal"></highlight></codeline>
<codeline lineno="5691"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;reset(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_internal::is_colorized(stream))<sp/>{</highlight></codeline>
<codeline lineno="5693"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5694"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[00m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5695"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5696"><highlight class="normal"><sp/><sp/><sp/><sp/>_internal::win_change_attributes(stream,<sp/>-1,<sp/>-1);</highlight></codeline>
<codeline lineno="5697"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5698"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5700"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5701"><highlight class="normal"></highlight></codeline>
<codeline lineno="5702"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;bold(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_internal::is_colorized(stream))<sp/>{</highlight></codeline>
<codeline lineno="5704"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5705"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[1m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5706"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5707"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5708"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5711"><highlight class="normal"></highlight></codeline>
<codeline lineno="5712"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;dark(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_internal::is_colorized(stream))<sp/>{</highlight></codeline>
<codeline lineno="5714"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5715"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[2m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5716"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5717"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5718"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5720"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5721"><highlight class="normal"></highlight></codeline>
<codeline lineno="5722"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;italic(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_internal::is_colorized(stream))<sp/>{</highlight></codeline>
<codeline lineno="5724"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5725"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[3m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5726"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5727"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5728"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5731"><highlight class="normal"></highlight></codeline>
<codeline lineno="5732"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;underline(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_internal::is_colorized(stream))<sp/>{</highlight></codeline>
<codeline lineno="5734"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5735"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[4m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5736"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5737"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5738"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5741"><highlight class="normal"></highlight></codeline>
<codeline lineno="5742"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;blink(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_internal::is_colorized(stream))<sp/>{</highlight></codeline>
<codeline lineno="5744"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5745"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[5m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5746"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5747"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5748"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5751"><highlight class="normal"></highlight></codeline>
<codeline lineno="5752"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;reverse(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_internal::is_colorized(stream))<sp/>{</highlight></codeline>
<codeline lineno="5754"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5755"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[7m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5756"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5757"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5758"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5761"><highlight class="normal"></highlight></codeline>
<codeline lineno="5762"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;concealed(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_internal::is_colorized(stream))<sp/>{</highlight></codeline>
<codeline lineno="5764"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5765"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[8m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5766"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5767"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5768"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5771"><highlight class="normal"></highlight></codeline>
<codeline lineno="5772"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;crossed(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_internal::is_colorized(stream))<sp/>{</highlight></codeline>
<codeline lineno="5774"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5775"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[9m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5776"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5777"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5778"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5781"><highlight class="normal"></highlight></codeline>
<codeline lineno="5782"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;grey(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_internal::is_colorized(stream))<sp/>{</highlight></codeline>
<codeline lineno="5784"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5785"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[30m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5786"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5787"><highlight class="normal"><sp/><sp/><sp/><sp/>_internal::win_change_attributes(stream,</highlight></codeline>
<codeline lineno="5788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/></highlight><highlight class="comment">//<sp/>grey<sp/>(black)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5789"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="5790"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5791"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5794"><highlight class="normal"></highlight></codeline>
<codeline lineno="5795"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;red(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_internal::is_colorized(stream))<sp/>{</highlight></codeline>
<codeline lineno="5797"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5798"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[31m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5799"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5800"><highlight class="normal"><sp/><sp/><sp/><sp/>_internal::win_change_attributes(stream,<sp/>FOREGROUND_RED);</highlight></codeline>
<codeline lineno="5801"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5802"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5804"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5805"><highlight class="normal"></highlight></codeline>
<codeline lineno="5806"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;green(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_internal::is_colorized(stream))<sp/>{</highlight></codeline>
<codeline lineno="5808"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5809"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[32m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5810"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5811"><highlight class="normal"><sp/><sp/><sp/><sp/>_internal::win_change_attributes(stream,<sp/>FOREGROUND_GREEN);</highlight></codeline>
<codeline lineno="5812"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5813"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5815"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5816"><highlight class="normal"></highlight></codeline>
<codeline lineno="5817"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;yellow(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_internal::is_colorized(stream))<sp/>{</highlight></codeline>
<codeline lineno="5819"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5820"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[33m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5821"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5822"><highlight class="normal"><sp/><sp/><sp/><sp/>_internal::win_change_attributes(stream,<sp/>FOREGROUND_GREEN<sp/>|<sp/>FOREGROUND_RED);</highlight></codeline>
<codeline lineno="5823"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5824"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5826"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5827"><highlight class="normal"></highlight></codeline>
<codeline lineno="5828"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;blue(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_internal::is_colorized(stream))<sp/>{</highlight></codeline>
<codeline lineno="5830"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5831"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[34m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5832"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5833"><highlight class="normal"><sp/><sp/><sp/><sp/>_internal::win_change_attributes(stream,<sp/>FOREGROUND_BLUE);</highlight></codeline>
<codeline lineno="5834"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5835"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5838"><highlight class="normal"></highlight></codeline>
<codeline lineno="5839"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;magenta(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_internal::is_colorized(stream))<sp/>{</highlight></codeline>
<codeline lineno="5841"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5842"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[35m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5843"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5844"><highlight class="normal"><sp/><sp/><sp/><sp/>_internal::win_change_attributes(stream,<sp/>FOREGROUND_BLUE<sp/>|<sp/>FOREGROUND_RED);</highlight></codeline>
<codeline lineno="5845"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5846"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5849"><highlight class="normal"></highlight></codeline>
<codeline lineno="5850"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;cyan(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_internal::is_colorized(stream))<sp/>{</highlight></codeline>
<codeline lineno="5852"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5853"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[36m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5854"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5855"><highlight class="normal"><sp/><sp/><sp/><sp/>_internal::win_change_attributes(stream,<sp/>FOREGROUND_BLUE<sp/>|<sp/>FOREGROUND_GREEN);</highlight></codeline>
<codeline lineno="5856"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5857"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5859"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5860"><highlight class="normal"></highlight></codeline>
<codeline lineno="5861"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;white(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_internal::is_colorized(stream))<sp/>{</highlight></codeline>
<codeline lineno="5863"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5864"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[37m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5865"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5866"><highlight class="normal"><sp/><sp/><sp/><sp/>_internal::win_change_attributes(stream,<sp/>FOREGROUND_BLUE<sp/>|<sp/>FOREGROUND_GREEN<sp/>|<sp/>FOREGROUND_RED);</highlight></codeline>
<codeline lineno="5867"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5868"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5871"><highlight class="normal"></highlight></codeline>
<codeline lineno="5872"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;on_grey(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_internal::is_colorized(stream))<sp/>{</highlight></codeline>
<codeline lineno="5874"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5875"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[40m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5876"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5877"><highlight class="normal"><sp/><sp/><sp/><sp/>_internal::win_change_attributes(stream,<sp/>-1,</highlight></codeline>
<codeline lineno="5878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/></highlight><highlight class="comment">//<sp/>grey<sp/>(black)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5879"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="5880"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5881"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5884"><highlight class="normal"></highlight></codeline>
<codeline lineno="5885"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;on_red(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_internal::is_colorized(stream))<sp/>{</highlight></codeline>
<codeline lineno="5887"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5888"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[41m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5889"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5890"><highlight class="normal"><sp/><sp/><sp/><sp/>_internal::win_change_attributes(stream,<sp/>-1,<sp/>BACKGROUND_RED);</highlight></codeline>
<codeline lineno="5891"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5892"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5894"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5895"><highlight class="normal"></highlight></codeline>
<codeline lineno="5896"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;on_green(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_internal::is_colorized(stream))<sp/>{</highlight></codeline>
<codeline lineno="5898"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5899"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[42m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5900"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5901"><highlight class="normal"><sp/><sp/><sp/><sp/>_internal::win_change_attributes(stream,<sp/>-1,<sp/>BACKGROUND_GREEN);</highlight></codeline>
<codeline lineno="5902"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5903"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5906"><highlight class="normal"></highlight></codeline>
<codeline lineno="5907"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;on_yellow(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_internal::is_colorized(stream))<sp/>{</highlight></codeline>
<codeline lineno="5909"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5910"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[43m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5911"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5912"><highlight class="normal"><sp/><sp/><sp/><sp/>_internal::win_change_attributes(stream,<sp/>-1,<sp/>BACKGROUND_GREEN<sp/>|<sp/>BACKGROUND_RED);</highlight></codeline>
<codeline lineno="5913"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5914"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5916"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5917"><highlight class="normal"></highlight></codeline>
<codeline lineno="5918"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;on_blue(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_internal::is_colorized(stream))<sp/>{</highlight></codeline>
<codeline lineno="5920"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5921"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[44m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5922"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5923"><highlight class="normal"><sp/><sp/><sp/><sp/>_internal::win_change_attributes(stream,<sp/>-1,<sp/>BACKGROUND_BLUE);</highlight></codeline>
<codeline lineno="5924"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5925"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5928"><highlight class="normal"></highlight></codeline>
<codeline lineno="5929"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;on_magenta(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_internal::is_colorized(stream))<sp/>{</highlight></codeline>
<codeline lineno="5931"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5932"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[45m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5933"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5934"><highlight class="normal"><sp/><sp/><sp/><sp/>_internal::win_change_attributes(stream,<sp/>-1,<sp/>BACKGROUND_BLUE<sp/>|<sp/>BACKGROUND_RED);</highlight></codeline>
<codeline lineno="5935"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5936"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5939"><highlight class="normal"></highlight></codeline>
<codeline lineno="5940"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;on_cyan(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_internal::is_colorized(stream))<sp/>{</highlight></codeline>
<codeline lineno="5942"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5943"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[46m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5944"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5945"><highlight class="normal"><sp/><sp/><sp/><sp/>_internal::win_change_attributes(stream,<sp/>-1,<sp/>BACKGROUND_GREEN<sp/>|<sp/>BACKGROUND_BLUE);</highlight></codeline>
<codeline lineno="5946"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5947"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5949"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5950"><highlight class="normal"></highlight></codeline>
<codeline lineno="5951"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;on_white(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_internal::is_colorized(stream))<sp/>{</highlight></codeline>
<codeline lineno="5953"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5954"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[47m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5955"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5956"><highlight class="normal"><sp/><sp/><sp/><sp/>_internal::win_change_attributes(stream,<sp/>-1,</highlight></codeline>
<codeline lineno="5957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BACKGROUND_GREEN<sp/>|<sp/>BACKGROUND_BLUE<sp/>|<sp/>BACKGROUND_RED);</highlight></codeline>
<codeline lineno="5958"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5959"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5960"><highlight class="normal"></highlight></codeline>
<codeline lineno="5961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="5962"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5963"><highlight class="normal"></highlight></codeline>
<codeline lineno="5968"><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">_internal<sp/>{</highlight></codeline>
<codeline lineno="5972"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>FILE<sp/>*get_standard_stream(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;stream<sp/>==<sp/>&amp;std::cout)</highlight></codeline>
<codeline lineno="5974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stdout;</highlight></codeline>
<codeline lineno="5975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((&amp;stream<sp/>==<sp/>&amp;std::cerr)<sp/>||<sp/>(&amp;stream<sp/>==<sp/>&amp;std::clog))</highlight></codeline>
<codeline lineno="5976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stderr;</highlight></codeline>
<codeline lineno="5977"><highlight class="normal"></highlight></codeline>
<codeline lineno="5978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5979"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5980"><highlight class="normal"></highlight></codeline>
<codeline lineno="5981"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Say<sp/>whether<sp/>a<sp/>given<sp/>stream<sp/>should<sp/>be<sp/>colorized<sp/>or<sp/>not.<sp/>It&apos;s<sp/>always</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5982"><highlight class="normal"></highlight><highlight class="comment">//<sp/>true<sp/>for<sp/>ATTY<sp/>streams<sp/>and<sp/>may<sp/>be<sp/>true<sp/>for<sp/>streams<sp/>marked<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5983"><highlight class="normal"></highlight><highlight class="comment">//<sp/>colorize<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5984"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_colorized(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_atty(stream)<sp/>||<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(stream.iword(colorize_index));</highlight></codeline>
<codeline lineno="5986"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5987"><highlight class="normal"></highlight></codeline>
<codeline lineno="5990"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_atty(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="5991"><highlight class="normal"><sp/><sp/>FILE<sp/>*std_stream<sp/>=<sp/>get_standard_stream(stream);</highlight></codeline>
<codeline lineno="5992"><highlight class="normal"></highlight></codeline>
<codeline lineno="5993"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unfortunately,<sp/>fileno()<sp/>ends<sp/>with<sp/>segmentation<sp/>fault</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5994"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>invalid<sp/>file<sp/>descriptor<sp/>is<sp/>passed.<sp/>So<sp/>we<sp/>need<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5995"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>this<sp/>case<sp/>gracefully<sp/>and<sp/>assume<sp/>it&apos;s<sp/>not<sp/>a<sp/>tty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5996"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>standard<sp/>stream<sp/>is<sp/>not<sp/>detected,<sp/>and<sp/>0<sp/>is<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!std_stream)</highlight></codeline>
<codeline lineno="5998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5999"><highlight class="normal"></highlight></codeline>
<codeline lineno="6000"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_MACOS)<sp/>||<sp/>defined(TERMCOLOR_OS_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6001"><highlight class="normal"><sp/><sp/>return<sp/>::isatty(fileno(std_stream));</highlight></codeline>
<codeline lineno="6002"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6003"><highlight class="normal"><sp/><sp/>return<sp/>::_isatty(_fileno(std_stream));</highlight></codeline>
<codeline lineno="6004"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6005"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6006"><highlight class="normal"></highlight></codeline>
<codeline lineno="6007"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TERMCOLOR_OS_WINDOWS)</highlight></codeline>
<codeline lineno="6010"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>win_change_attributes(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>foreground,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>background)<sp/>{</highlight></codeline>
<codeline lineno="6011"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>yeah,<sp/>i<sp/>know..<sp/>it&apos;s<sp/>ugly,<sp/>it&apos;s<sp/>windows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6012"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>WORD<sp/>defaultAttributes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6013"><highlight class="normal"></highlight></codeline>
<codeline lineno="6014"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Windows<sp/>doesn&apos;t<sp/>have<sp/>ANSI<sp/>escape<sp/>sequences<sp/>and<sp/>so<sp/>we<sp/>use<sp/>special</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6015"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>API<sp/>to<sp/>change<sp/>Terminal<sp/>output<sp/>color.<sp/>That<sp/>means<sp/>we<sp/>can&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6016"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>manipulate<sp/>colors<sp/>by<sp/>means<sp/>of<sp/>&quot;std::stringstream&quot;<sp/>and<sp/>hence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6017"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>do<sp/>nothing<sp/>in<sp/>this<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_internal::is_atty(stream))</highlight></codeline>
<codeline lineno="6019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6020"><highlight class="normal"></highlight></codeline>
<codeline lineno="6021"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>terminal<sp/>handle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6022"><highlight class="normal"><sp/><sp/>HANDLE<sp/>hTerminal<sp/>=<sp/>INVALID_HANDLE_VALUE;</highlight></codeline>
<codeline lineno="6023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;stream<sp/>==<sp/>&amp;std::cout)</highlight></codeline>
<codeline lineno="6024"><highlight class="normal"><sp/><sp/><sp/><sp/>hTerminal<sp/>=<sp/>GetStdHandle(STD_OUTPUT_HANDLE);</highlight></codeline>
<codeline lineno="6025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;stream<sp/>==<sp/>&amp;std::cerr)</highlight></codeline>
<codeline lineno="6026"><highlight class="normal"><sp/><sp/><sp/><sp/>hTerminal<sp/>=<sp/>GetStdHandle(STD_ERROR_HANDLE);</highlight></codeline>
<codeline lineno="6027"><highlight class="normal"></highlight></codeline>
<codeline lineno="6028"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>default<sp/>terminal<sp/>attributes<sp/>if<sp/>it<sp/>unsaved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!defaultAttributes)<sp/>{</highlight></codeline>
<codeline lineno="6030"><highlight class="normal"><sp/><sp/><sp/><sp/>CONSOLE_SCREEN_BUFFER_INFO<sp/>info;</highlight></codeline>
<codeline lineno="6031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!GetConsoleScreenBufferInfo(hTerminal,<sp/>&amp;info))</highlight></codeline>
<codeline lineno="6032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6033"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultAttributes<sp/>=<sp/>info.wAttributes;</highlight></codeline>
<codeline lineno="6034"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6035"><highlight class="normal"></highlight></codeline>
<codeline lineno="6036"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>all<sp/>default<sp/>settings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(foreground<sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>background<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="6038"><highlight class="normal"><sp/><sp/><sp/><sp/>SetConsoleTextAttribute(hTerminal,<sp/>defaultAttributes);</highlight></codeline>
<codeline lineno="6039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6040"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6041"><highlight class="normal"></highlight></codeline>
<codeline lineno="6042"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>current<sp/>settings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6043"><highlight class="normal"><sp/><sp/>CONSOLE_SCREEN_BUFFER_INFO<sp/>info;</highlight></codeline>
<codeline lineno="6044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!GetConsoleScreenBufferInfo(hTerminal,<sp/>&amp;info))</highlight></codeline>
<codeline lineno="6045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6046"><highlight class="normal"></highlight></codeline>
<codeline lineno="6047"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(foreground<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="6048"><highlight class="normal"><sp/><sp/><sp/><sp/>info.wAttributes<sp/>&amp;=<sp/>~(info.wAttributes<sp/>&amp;<sp/>0x0F);</highlight></codeline>
<codeline lineno="6049"><highlight class="normal"><sp/><sp/><sp/><sp/>info.wAttributes<sp/>|=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">WORD</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(foreground);</highlight></codeline>
<codeline lineno="6050"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6051"><highlight class="normal"></highlight></codeline>
<codeline lineno="6052"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(background<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="6053"><highlight class="normal"><sp/><sp/><sp/><sp/>info.wAttributes<sp/>&amp;=<sp/>~(info.wAttributes<sp/>&amp;<sp/>0xF0);</highlight></codeline>
<codeline lineno="6054"><highlight class="normal"><sp/><sp/><sp/><sp/>info.wAttributes<sp/>|=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">WORD</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(background);</highlight></codeline>
<codeline lineno="6055"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6056"><highlight class="normal"></highlight></codeline>
<codeline lineno="6057"><highlight class="normal"><sp/><sp/>SetConsoleTextAttribute(hTerminal,<sp/>info.wAttributes);</highlight></codeline>
<codeline lineno="6058"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6059"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>TERMCOLOR_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6060"><highlight class="normal"></highlight></codeline>
<codeline lineno="6061"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>_internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6062"><highlight class="normal"></highlight></codeline>
<codeline lineno="6063"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>termcolor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6064"><highlight class="normal"></highlight></codeline>
<codeline lineno="6065"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>TERMCOLOR_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6066"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>TERMCOLOR_OS_MACOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6067"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>TERMCOLOR_OS_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6068"><highlight class="normal"></highlight></codeline>
<codeline lineno="6069"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>TERMCOLOR_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6070"><highlight class="normal"></highlight></codeline>
<codeline lineno="6071"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6072"><highlight class="comment"><sp/><sp/>__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>___.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__</highlight></codeline>
<codeline lineno="6073"><highlight class="comment">_/<sp/><sp/>|______<sp/>\_<sp/>|__<sp/><sp/>__<sp/>__|<sp/><sp/>|<sp/>_____<sp/>_/<sp/><sp/>|_<sp/><sp/>____</highlight></codeline>
<codeline lineno="6074"><highlight class="comment">\<sp/><sp/><sp/>__\__<sp/><sp/>\<sp/>|<sp/>__<sp/>\|<sp/><sp/>|<sp/><sp/>\<sp/><sp/>|<sp/>\__<sp/><sp/>\\<sp/><sp/><sp/>__\/<sp/>__<sp/>\</highlight></codeline>
<codeline lineno="6075"><highlight class="comment"><sp/>|<sp/><sp/>|<sp/><sp/>/<sp/>__<sp/>\|<sp/>\_\<sp/>\<sp/><sp/>|<sp/><sp/>/<sp/><sp/>|__/<sp/>__<sp/>\|<sp/><sp/>|<sp/>\<sp/><sp/>___/</highlight></codeline>
<codeline lineno="6076"><highlight class="comment"><sp/>|__|<sp/>(____<sp/><sp/>/___<sp/><sp/>/____/|____(____<sp/><sp/>/__|<sp/><sp/>\___<sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="6077"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/</highlight></codeline>
<codeline lineno="6078"><highlight class="comment">Table<sp/>Maker<sp/>for<sp/>Modern<sp/>C++</highlight></codeline>
<codeline lineno="6079"><highlight class="comment">https://github.com/p-ranav/tabulate</highlight></codeline>
<codeline lineno="6080"><highlight class="comment"></highlight></codeline>
<codeline lineno="6081"><highlight class="comment">Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>&lt;http://opensource.org/licenses/MIT&gt;.</highlight></codeline>
<codeline lineno="6082"><highlight class="comment">SPDX-License-Identifier:<sp/>MIT</highlight></codeline>
<codeline lineno="6083"><highlight class="comment">Copyright<sp/>(c)<sp/>2019<sp/>Pranav<sp/>Srinivas<sp/>Kumar<sp/>&lt;pranav.srinivas.kumar@gmail.com&gt;.</highlight></codeline>
<codeline lineno="6084"><highlight class="comment"></highlight></codeline>
<codeline lineno="6085"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/><sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/><sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="6086"><highlight class="comment">of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/><sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="6087"><highlight class="comment">in<sp/>the<sp/>Software<sp/><sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/><sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="6088"><highlight class="comment">to<sp/><sp/>use,<sp/>copy,<sp/><sp/>modify,<sp/>merge,<sp/><sp/>publish,<sp/>distribute,<sp/><sp/>sublicense,<sp/>and/or<sp/><sp/>sell</highlight></codeline>
<codeline lineno="6089"><highlight class="comment">copies<sp/><sp/>of<sp/><sp/>the<sp/>Software,<sp/><sp/>and<sp/><sp/>to<sp/><sp/>permit<sp/>persons<sp/><sp/>to<sp/><sp/>whom<sp/><sp/>the<sp/>Software<sp/><sp/>is</highlight></codeline>
<codeline lineno="6090"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="6091"><highlight class="comment"></highlight></codeline>
<codeline lineno="6092"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="6093"><highlight class="comment">copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="6094"><highlight class="comment"></highlight></codeline>
<codeline lineno="6095"><highlight class="comment">THE<sp/>SOFTWARE<sp/><sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/><sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/><sp/>OF<sp/>ANY<sp/>KIND,<sp/><sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="6096"><highlight class="comment">IMPLIED,<sp/><sp/>INCLUDING<sp/>BUT<sp/><sp/>NOT<sp/><sp/>LIMITED<sp/>TO<sp/><sp/>THE<sp/><sp/>WARRANTIES<sp/>OF<sp/><sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="6097"><highlight class="comment">FITNESS<sp/>FOR<sp/><sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/><sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="6098"><highlight class="comment">AUTHORS<sp/><sp/>OR<sp/>COPYRIGHT<sp/><sp/>HOLDERS<sp/><sp/>BE<sp/><sp/>LIABLE<sp/>FOR<sp/><sp/>ANY<sp/><sp/>CLAIM,<sp/><sp/>DAMAGES<sp/>OR<sp/><sp/>OTHER</highlight></codeline>
<codeline lineno="6099"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/><sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="6100"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/><sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="6101"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="6102"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6103"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6104"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6105"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6106"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6107"><highlight class="normal"></highlight></codeline>
<codeline lineno="6108"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;clocale&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6109"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;locale&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6110"><highlight class="normal"></highlight></codeline>
<codeline lineno="6111"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/termcolor.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6113"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wchar.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6114"><highlight class="normal"></highlight></codeline>
<codeline lineno="6115"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tabulate<sp/>{</highlight></codeline>
<codeline lineno="6116"><highlight class="normal"></highlight></codeline>
<codeline lineno="6117"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__unix__)<sp/>||<sp/>defined(__unix)<sp/>||<sp/>defined(__APPLE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6118"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_wcswidth(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;locale,</highlight></codeline>
<codeline lineno="6119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_column_width)<sp/>{</highlight></codeline>
<codeline lineno="6120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="6121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="6122"><highlight class="normal"></highlight></codeline>
<codeline lineno="6123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>behavior<sp/>of<sp/>wcswidth()<sp/>depends<sp/>on<sp/>the<sp/>LC_CTYPE<sp/>category<sp/>of<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>locale.<sp/>Set<sp/>the<sp/>current<sp/>locale<sp/>based<sp/>on<sp/>cell<sp/>properties<sp/>before<sp/>computing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>old_locale<sp/>=<sp/>std::locale::global(std::locale(locale));</highlight></codeline>
<codeline lineno="6127"><highlight class="normal"></highlight></codeline>
<codeline lineno="6128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>from<sp/>narrow<sp/>std::string<sp/>to<sp/>wide<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*wide_string<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">[</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.size()];</highlight></codeline>
<codeline lineno="6130"><highlight class="normal"><sp/><sp/>std::mbstowcs(wide_string,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.c_str(),<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.size());</highlight></codeline>
<codeline lineno="6131"><highlight class="normal"></highlight></codeline>
<codeline lineno="6132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>display<sp/>width<sp/>of<sp/>wide<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>wcswidth(wide_string,<sp/>max_column_width);</highlight></codeline>
<codeline lineno="6134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>wide_string;</highlight></codeline>
<codeline lineno="6135"><highlight class="normal"></highlight></codeline>
<codeline lineno="6136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>old<sp/>locale</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6137"><highlight class="normal"><sp/><sp/>std::locale::global(old_locale);</highlight></codeline>
<codeline lineno="6138"><highlight class="normal"></highlight></codeline>
<codeline lineno="6139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6141"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6142"><highlight class="normal"></highlight></codeline>
<codeline lineno="6143"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>get_sequence_length(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;text,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;locale,</highlight></codeline>
<codeline lineno="6144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_multi_byte_character_support_enabled)<sp/>{</highlight></codeline>
<codeline lineno="6145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_multi_byte_character_support_enabled)</highlight></codeline>
<codeline lineno="6146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>text.length();</highlight></codeline>
<codeline lineno="6147"><highlight class="normal"></highlight></codeline>
<codeline lineno="6148"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)<sp/>||<sp/>defined(_WIN64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6149"><highlight class="normal"><sp/><sp/>(void)locale;<sp/></highlight><highlight class="comment">//<sp/>unused<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(text.length()<sp/>-<sp/>std::count_if(text.begin(),<sp/>text.end(),</highlight></codeline>
<codeline lineno="6151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/>return<sp/>(c<sp/>&amp;<sp/>0xC0)<sp/>==<sp/>0x80;<sp/>}));</highlight></codeline>
<codeline lineno="6152"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__unix__)<sp/>||<sp/>defined(__unix)<sp/>||<sp/>defined(__APPLE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>get_wcswidth(text,<sp/>locale,<sp/>text.size());</highlight></codeline>
<codeline lineno="6154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="6155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(text.length()<sp/>-<sp/>std::count_if(text.begin(),<sp/>text.end(),</highlight></codeline>
<codeline lineno="6158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/>return<sp/>(c<sp/>&amp;<sp/>0xC0)<sp/>==<sp/>0x80;<sp/>}));</highlight></codeline>
<codeline lineno="6159"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6161"><highlight class="normal"></highlight></codeline>
<codeline lineno="6162"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tabulate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6163"><highlight class="normal"></highlight></codeline>
<codeline lineno="6164"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6165"><highlight class="comment"><sp/><sp/>__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>___.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__</highlight></codeline>
<codeline lineno="6166"><highlight class="comment">_/<sp/><sp/>|______<sp/>\_<sp/>|__<sp/><sp/>__<sp/>__|<sp/><sp/>|<sp/>_____<sp/>_/<sp/><sp/>|_<sp/><sp/>____</highlight></codeline>
<codeline lineno="6167"><highlight class="comment">\<sp/><sp/><sp/>__\__<sp/><sp/>\<sp/>|<sp/>__<sp/>\|<sp/><sp/>|<sp/><sp/>\<sp/><sp/>|<sp/>\__<sp/><sp/>\\<sp/><sp/><sp/>__\/<sp/>__<sp/>\</highlight></codeline>
<codeline lineno="6168"><highlight class="comment"><sp/>|<sp/><sp/>|<sp/><sp/>/<sp/>__<sp/>\|<sp/>\_\<sp/>\<sp/><sp/>|<sp/><sp/>/<sp/><sp/>|__/<sp/>__<sp/>\|<sp/><sp/>|<sp/>\<sp/><sp/>___/</highlight></codeline>
<codeline lineno="6169"><highlight class="comment"><sp/>|__|<sp/>(____<sp/><sp/>/___<sp/><sp/>/____/|____(____<sp/><sp/>/__|<sp/><sp/>\___<sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="6170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/</highlight></codeline>
<codeline lineno="6171"><highlight class="comment">Table<sp/>Maker<sp/>for<sp/>Modern<sp/>C++</highlight></codeline>
<codeline lineno="6172"><highlight class="comment">https://github.com/p-ranav/tabulate</highlight></codeline>
<codeline lineno="6173"><highlight class="comment"></highlight></codeline>
<codeline lineno="6174"><highlight class="comment">Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>&lt;http://opensource.org/licenses/MIT&gt;.</highlight></codeline>
<codeline lineno="6175"><highlight class="comment">SPDX-License-Identifier:<sp/>MIT</highlight></codeline>
<codeline lineno="6176"><highlight class="comment">Copyright<sp/>(c)<sp/>2019<sp/>Pranav<sp/>Srinivas<sp/>Kumar<sp/>&lt;pranav.srinivas.kumar@gmail.com&gt;.</highlight></codeline>
<codeline lineno="6177"><highlight class="comment"></highlight></codeline>
<codeline lineno="6178"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/><sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/><sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="6179"><highlight class="comment">of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/><sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="6180"><highlight class="comment">in<sp/>the<sp/>Software<sp/><sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/><sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="6181"><highlight class="comment">to<sp/><sp/>use,<sp/>copy,<sp/><sp/>modify,<sp/>merge,<sp/><sp/>publish,<sp/>distribute,<sp/><sp/>sublicense,<sp/>and/or<sp/><sp/>sell</highlight></codeline>
<codeline lineno="6182"><highlight class="comment">copies<sp/><sp/>of<sp/><sp/>the<sp/>Software,<sp/><sp/>and<sp/><sp/>to<sp/><sp/>permit<sp/>persons<sp/><sp/>to<sp/><sp/>whom<sp/><sp/>the<sp/>Software<sp/><sp/>is</highlight></codeline>
<codeline lineno="6183"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="6184"><highlight class="comment"></highlight></codeline>
<codeline lineno="6185"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="6186"><highlight class="comment">copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="6187"><highlight class="comment"></highlight></codeline>
<codeline lineno="6188"><highlight class="comment">THE<sp/>SOFTWARE<sp/><sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/><sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/><sp/>OF<sp/>ANY<sp/>KIND,<sp/><sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="6189"><highlight class="comment">IMPLIED,<sp/><sp/>INCLUDING<sp/>BUT<sp/><sp/>NOT<sp/><sp/>LIMITED<sp/>TO<sp/><sp/>THE<sp/><sp/>WARRANTIES<sp/>OF<sp/><sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="6190"><highlight class="comment">FITNESS<sp/>FOR<sp/><sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/><sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="6191"><highlight class="comment">AUTHORS<sp/><sp/>OR<sp/>COPYRIGHT<sp/><sp/>HOLDERS<sp/><sp/>BE<sp/><sp/>LIABLE<sp/>FOR<sp/><sp/>ANY<sp/><sp/>CLAIM,<sp/><sp/>DAMAGES<sp/>OR<sp/><sp/>OTHER</highlight></codeline>
<codeline lineno="6192"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/><sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="6193"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/><sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="6194"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="6195"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6196"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/termcolor.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6198"><highlight class="normal"></highlight></codeline>
<codeline lineno="6199"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tabulate<sp/>{</highlight></codeline>
<codeline lineno="6200"><highlight class="normal"></highlight></codeline>
<codeline lineno="6201"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>Color<sp/>{<sp/>none,<sp/>grey,<sp/>red,<sp/>green,<sp/>yellow,<sp/>blue,<sp/>magenta,<sp/>cyan,<sp/>white<sp/>};</highlight></codeline>
<codeline lineno="6202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6203"><highlight class="normal"></highlight></codeline>
<codeline lineno="6204"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6205"><highlight class="comment"><sp/><sp/>__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>___.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__</highlight></codeline>
<codeline lineno="6206"><highlight class="comment">_/<sp/><sp/>|______<sp/>\_<sp/>|__<sp/><sp/>__<sp/>__|<sp/><sp/>|<sp/>_____<sp/>_/<sp/><sp/>|_<sp/><sp/>____</highlight></codeline>
<codeline lineno="6207"><highlight class="comment">\<sp/><sp/><sp/>__\__<sp/><sp/>\<sp/>|<sp/>__<sp/>\|<sp/><sp/>|<sp/><sp/>\<sp/><sp/>|<sp/>\__<sp/><sp/>\\<sp/><sp/><sp/>__\/<sp/>__<sp/>\</highlight></codeline>
<codeline lineno="6208"><highlight class="comment"><sp/>|<sp/><sp/>|<sp/><sp/>/<sp/>__<sp/>\|<sp/>\_\<sp/>\<sp/><sp/>|<sp/><sp/>/<sp/><sp/>|__/<sp/>__<sp/>\|<sp/><sp/>|<sp/>\<sp/><sp/>___/</highlight></codeline>
<codeline lineno="6209"><highlight class="comment"><sp/>|__|<sp/>(____<sp/><sp/>/___<sp/><sp/>/____/|____(____<sp/><sp/>/__|<sp/><sp/>\___<sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="6210"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/</highlight></codeline>
<codeline lineno="6211"><highlight class="comment">Table<sp/>Maker<sp/>for<sp/>Modern<sp/>C++</highlight></codeline>
<codeline lineno="6212"><highlight class="comment">https://github.com/p-ranav/tabulate</highlight></codeline>
<codeline lineno="6213"><highlight class="comment"></highlight></codeline>
<codeline lineno="6214"><highlight class="comment">Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>&lt;http://opensource.org/licenses/MIT&gt;.</highlight></codeline>
<codeline lineno="6215"><highlight class="comment">SPDX-License-Identifier:<sp/>MIT</highlight></codeline>
<codeline lineno="6216"><highlight class="comment">Copyright<sp/>(c)<sp/>2019<sp/>Pranav<sp/>Srinivas<sp/>Kumar<sp/>&lt;pranav.srinivas.kumar@gmail.com&gt;.</highlight></codeline>
<codeline lineno="6217"><highlight class="comment"></highlight></codeline>
<codeline lineno="6218"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/><sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/><sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="6219"><highlight class="comment">of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/><sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="6220"><highlight class="comment">in<sp/>the<sp/>Software<sp/><sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/><sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="6221"><highlight class="comment">to<sp/><sp/>use,<sp/>copy,<sp/><sp/>modify,<sp/>merge,<sp/><sp/>publish,<sp/>distribute,<sp/><sp/>sublicense,<sp/>and/or<sp/><sp/>sell</highlight></codeline>
<codeline lineno="6222"><highlight class="comment">copies<sp/><sp/>of<sp/><sp/>the<sp/>Software,<sp/><sp/>and<sp/><sp/>to<sp/><sp/>permit<sp/>persons<sp/><sp/>to<sp/><sp/>whom<sp/><sp/>the<sp/>Software<sp/><sp/>is</highlight></codeline>
<codeline lineno="6223"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="6224"><highlight class="comment"></highlight></codeline>
<codeline lineno="6225"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="6226"><highlight class="comment">copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="6227"><highlight class="comment"></highlight></codeline>
<codeline lineno="6228"><highlight class="comment">THE<sp/>SOFTWARE<sp/><sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/><sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/><sp/>OF<sp/>ANY<sp/>KIND,<sp/><sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="6229"><highlight class="comment">IMPLIED,<sp/><sp/>INCLUDING<sp/>BUT<sp/><sp/>NOT<sp/><sp/>LIMITED<sp/>TO<sp/><sp/>THE<sp/><sp/>WARRANTIES<sp/>OF<sp/><sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="6230"><highlight class="comment">FITNESS<sp/>FOR<sp/><sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/><sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="6231"><highlight class="comment">AUTHORS<sp/><sp/>OR<sp/>COPYRIGHT<sp/><sp/>HOLDERS<sp/><sp/>BE<sp/><sp/>LIABLE<sp/>FOR<sp/><sp/>ANY<sp/><sp/>CLAIM,<sp/><sp/>DAMAGES<sp/>OR<sp/><sp/>OTHER</highlight></codeline>
<codeline lineno="6232"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/><sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="6233"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/><sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="6234"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="6235"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6236"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6237"><highlight class="normal"></highlight></codeline>
<codeline lineno="6238"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tabulate<sp/>{</highlight></codeline>
<codeline lineno="6239"><highlight class="normal"></highlight></codeline>
<codeline lineno="6240"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>FontAlign<sp/>{<sp/>left,<sp/>right,<sp/>center<sp/>};</highlight></codeline>
<codeline lineno="6241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6242"><highlight class="normal"></highlight></codeline>
<codeline lineno="6243"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6244"><highlight class="comment"><sp/><sp/>__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>___.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__</highlight></codeline>
<codeline lineno="6245"><highlight class="comment">_/<sp/><sp/>|______<sp/>\_<sp/>|__<sp/><sp/>__<sp/>__|<sp/><sp/>|<sp/>_____<sp/>_/<sp/><sp/>|_<sp/><sp/>____</highlight></codeline>
<codeline lineno="6246"><highlight class="comment">\<sp/><sp/><sp/>__\__<sp/><sp/>\<sp/>|<sp/>__<sp/>\|<sp/><sp/>|<sp/><sp/>\<sp/><sp/>|<sp/>\__<sp/><sp/>\\<sp/><sp/><sp/>__\/<sp/>__<sp/>\</highlight></codeline>
<codeline lineno="6247"><highlight class="comment"><sp/>|<sp/><sp/>|<sp/><sp/>/<sp/>__<sp/>\|<sp/>\_\<sp/>\<sp/><sp/>|<sp/><sp/>/<sp/><sp/>|__/<sp/>__<sp/>\|<sp/><sp/>|<sp/>\<sp/><sp/>___/</highlight></codeline>
<codeline lineno="6248"><highlight class="comment"><sp/>|__|<sp/>(____<sp/><sp/>/___<sp/><sp/>/____/|____(____<sp/><sp/>/__|<sp/><sp/>\___<sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="6249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/</highlight></codeline>
<codeline lineno="6250"><highlight class="comment">Table<sp/>Maker<sp/>for<sp/>Modern<sp/>C++</highlight></codeline>
<codeline lineno="6251"><highlight class="comment">https://github.com/p-ranav/tabulate</highlight></codeline>
<codeline lineno="6252"><highlight class="comment"></highlight></codeline>
<codeline lineno="6253"><highlight class="comment">Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>&lt;http://opensource.org/licenses/MIT&gt;.</highlight></codeline>
<codeline lineno="6254"><highlight class="comment">SPDX-License-Identifier:<sp/>MIT</highlight></codeline>
<codeline lineno="6255"><highlight class="comment">Copyright<sp/>(c)<sp/>2019<sp/>Pranav<sp/>Srinivas<sp/>Kumar<sp/>&lt;pranav.srinivas.kumar@gmail.com&gt;.</highlight></codeline>
<codeline lineno="6256"><highlight class="comment"></highlight></codeline>
<codeline lineno="6257"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/><sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/><sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="6258"><highlight class="comment">of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/><sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="6259"><highlight class="comment">in<sp/>the<sp/>Software<sp/><sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/><sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="6260"><highlight class="comment">to<sp/><sp/>use,<sp/>copy,<sp/><sp/>modify,<sp/>merge,<sp/><sp/>publish,<sp/>distribute,<sp/><sp/>sublicense,<sp/>and/or<sp/><sp/>sell</highlight></codeline>
<codeline lineno="6261"><highlight class="comment">copies<sp/><sp/>of<sp/><sp/>the<sp/>Software,<sp/><sp/>and<sp/><sp/>to<sp/><sp/>permit<sp/>persons<sp/><sp/>to<sp/><sp/>whom<sp/><sp/>the<sp/>Software<sp/><sp/>is</highlight></codeline>
<codeline lineno="6262"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="6263"><highlight class="comment"></highlight></codeline>
<codeline lineno="6264"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="6265"><highlight class="comment">copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="6266"><highlight class="comment"></highlight></codeline>
<codeline lineno="6267"><highlight class="comment">THE<sp/>SOFTWARE<sp/><sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/><sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/><sp/>OF<sp/>ANY<sp/>KIND,<sp/><sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="6268"><highlight class="comment">IMPLIED,<sp/><sp/>INCLUDING<sp/>BUT<sp/><sp/>NOT<sp/><sp/>LIMITED<sp/>TO<sp/><sp/>THE<sp/><sp/>WARRANTIES<sp/>OF<sp/><sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="6269"><highlight class="comment">FITNESS<sp/>FOR<sp/><sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/><sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="6270"><highlight class="comment">AUTHORS<sp/><sp/>OR<sp/>COPYRIGHT<sp/><sp/>HOLDERS<sp/><sp/>BE<sp/><sp/>LIABLE<sp/>FOR<sp/><sp/>ANY<sp/><sp/>CLAIM,<sp/><sp/>DAMAGES<sp/>OR<sp/><sp/>OTHER</highlight></codeline>
<codeline lineno="6271"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/><sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="6272"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/><sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="6273"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="6274"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6275"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6276"><highlight class="normal"></highlight></codeline>
<codeline lineno="6277"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tabulate<sp/>{</highlight></codeline>
<codeline lineno="6278"><highlight class="normal"></highlight></codeline>
<codeline lineno="6279"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>FontStyle<sp/>{<sp/>bold,<sp/>dark,<sp/>italic,<sp/>underline,<sp/>blink,<sp/>reverse,<sp/>concealed,<sp/>crossed<sp/>};</highlight></codeline>
<codeline lineno="6280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6281"><highlight class="normal"></highlight></codeline>
<codeline lineno="6282"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6283"><highlight class="comment"><sp/><sp/>__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>___.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__</highlight></codeline>
<codeline lineno="6284"><highlight class="comment">_/<sp/><sp/>|______<sp/>\_<sp/>|__<sp/><sp/>__<sp/>__|<sp/><sp/>|<sp/>_____<sp/>_/<sp/><sp/>|_<sp/><sp/>____</highlight></codeline>
<codeline lineno="6285"><highlight class="comment">\<sp/><sp/><sp/>__\__<sp/><sp/>\<sp/>|<sp/>__<sp/>\|<sp/><sp/>|<sp/><sp/>\<sp/><sp/>|<sp/>\__<sp/><sp/>\\<sp/><sp/><sp/>__\/<sp/>__<sp/>\</highlight></codeline>
<codeline lineno="6286"><highlight class="comment"><sp/>|<sp/><sp/>|<sp/><sp/>/<sp/>__<sp/>\|<sp/>\_\<sp/>\<sp/><sp/>|<sp/><sp/>/<sp/><sp/>|__/<sp/>__<sp/>\|<sp/><sp/>|<sp/>\<sp/><sp/>___/</highlight></codeline>
<codeline lineno="6287"><highlight class="comment"><sp/>|__|<sp/>(____<sp/><sp/>/___<sp/><sp/>/____/|____(____<sp/><sp/>/__|<sp/><sp/>\___<sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="6288"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/</highlight></codeline>
<codeline lineno="6289"><highlight class="comment">Table<sp/>Maker<sp/>for<sp/>Modern<sp/>C++</highlight></codeline>
<codeline lineno="6290"><highlight class="comment">https://github.com/p-ranav/tabulate</highlight></codeline>
<codeline lineno="6291"><highlight class="comment"></highlight></codeline>
<codeline lineno="6292"><highlight class="comment">Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>&lt;http://opensource.org/licenses/MIT&gt;.</highlight></codeline>
<codeline lineno="6293"><highlight class="comment">SPDX-License-Identifier:<sp/>MIT</highlight></codeline>
<codeline lineno="6294"><highlight class="comment">Copyright<sp/>(c)<sp/>2019<sp/>Pranav<sp/>Srinivas<sp/>Kumar<sp/>&lt;pranav.srinivas.kumar@gmail.com&gt;.</highlight></codeline>
<codeline lineno="6295"><highlight class="comment"></highlight></codeline>
<codeline lineno="6296"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/><sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/><sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="6297"><highlight class="comment">of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/><sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="6298"><highlight class="comment">in<sp/>the<sp/>Software<sp/><sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/><sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="6299"><highlight class="comment">to<sp/><sp/>use,<sp/>copy,<sp/><sp/>modify,<sp/>merge,<sp/><sp/>publish,<sp/>distribute,<sp/><sp/>sublicense,<sp/>and/or<sp/><sp/>sell</highlight></codeline>
<codeline lineno="6300"><highlight class="comment">copies<sp/><sp/>of<sp/><sp/>the<sp/>Software,<sp/><sp/>and<sp/><sp/>to<sp/><sp/>permit<sp/>persons<sp/><sp/>to<sp/><sp/>whom<sp/><sp/>the<sp/>Software<sp/><sp/>is</highlight></codeline>
<codeline lineno="6301"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="6302"><highlight class="comment"></highlight></codeline>
<codeline lineno="6303"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="6304"><highlight class="comment">copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="6305"><highlight class="comment"></highlight></codeline>
<codeline lineno="6306"><highlight class="comment">THE<sp/>SOFTWARE<sp/><sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/><sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/><sp/>OF<sp/>ANY<sp/>KIND,<sp/><sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="6307"><highlight class="comment">IMPLIED,<sp/><sp/>INCLUDING<sp/>BUT<sp/><sp/>NOT<sp/><sp/>LIMITED<sp/>TO<sp/><sp/>THE<sp/><sp/>WARRANTIES<sp/>OF<sp/><sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="6308"><highlight class="comment">FITNESS<sp/>FOR<sp/><sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/><sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="6309"><highlight class="comment">AUTHORS<sp/><sp/>OR<sp/>COPYRIGHT<sp/><sp/>HOLDERS<sp/><sp/>BE<sp/><sp/>LIABLE<sp/>FOR<sp/><sp/>ANY<sp/><sp/>CLAIM,<sp/><sp/>DAMAGES<sp/>OR<sp/><sp/>OTHER</highlight></codeline>
<codeline lineno="6310"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/><sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="6311"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/><sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="6312"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="6313"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6314"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6315"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6316"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6317"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6318"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/format.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6319"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="6320"><highlight class="comment"><sp/><sp/>__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>___.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__</highlight></codeline>
<codeline lineno="6321"><highlight class="comment">_/<sp/><sp/>|______<sp/>\_<sp/>|__<sp/><sp/>__<sp/>__|<sp/><sp/>|<sp/>_____<sp/>_/<sp/><sp/>|_<sp/><sp/>____</highlight></codeline>
<codeline lineno="6322"><highlight class="comment">\<sp/><sp/><sp/>__\__<sp/><sp/>\<sp/>|<sp/>__<sp/>\|<sp/><sp/>|<sp/><sp/>\<sp/><sp/>|<sp/>\__<sp/><sp/>\\<sp/><sp/><sp/>__\/<sp/>__<sp/>\</highlight></codeline>
<codeline lineno="6323"><highlight class="comment"><sp/>|<sp/><sp/>|<sp/><sp/>/<sp/>__<sp/>\|<sp/>\_\<sp/>\<sp/><sp/>|<sp/><sp/>/<sp/><sp/>|__/<sp/>__<sp/>\|<sp/><sp/>|<sp/>\<sp/><sp/>___/</highlight></codeline>
<codeline lineno="6324"><highlight class="comment"><sp/>|__|<sp/>(____<sp/><sp/>/___<sp/><sp/>/____/|____(____<sp/><sp/>/__|<sp/><sp/>\___<sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="6325"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/</highlight></codeline>
<codeline lineno="6326"><highlight class="comment">Table<sp/>Maker<sp/>for<sp/>Modern<sp/>C++</highlight></codeline>
<codeline lineno="6327"><highlight class="comment">https://github.com/p-ranav/tabulate</highlight></codeline>
<codeline lineno="6328"><highlight class="comment"></highlight></codeline>
<codeline lineno="6329"><highlight class="comment">Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>&lt;http://opensource.org/licenses/MIT&gt;.</highlight></codeline>
<codeline lineno="6330"><highlight class="comment">SPDX-License-Identifier:<sp/>MIT</highlight></codeline>
<codeline lineno="6331"><highlight class="comment">Copyright<sp/>(c)<sp/>2019<sp/>Pranav<sp/>Srinivas<sp/>Kumar<sp/>&lt;pranav.srinivas.kumar@gmail.com&gt;.</highlight></codeline>
<codeline lineno="6332"><highlight class="comment"></highlight></codeline>
<codeline lineno="6333"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/><sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/><sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="6334"><highlight class="comment">of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/><sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="6335"><highlight class="comment">in<sp/>the<sp/>Software<sp/><sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/><sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="6336"><highlight class="comment">to<sp/><sp/>use,<sp/>copy,<sp/><sp/>modify,<sp/>merge,<sp/><sp/>publish,<sp/>distribute,<sp/><sp/>sublicense,<sp/>and/or<sp/><sp/>sell</highlight></codeline>
<codeline lineno="6337"><highlight class="comment">copies<sp/><sp/>of<sp/><sp/>the<sp/>Software,<sp/><sp/>and<sp/><sp/>to<sp/><sp/>permit<sp/>persons<sp/><sp/>to<sp/><sp/>whom<sp/><sp/>the<sp/>Software<sp/><sp/>is</highlight></codeline>
<codeline lineno="6338"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="6339"><highlight class="comment"></highlight></codeline>
<codeline lineno="6340"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="6341"><highlight class="comment">copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="6342"><highlight class="comment"></highlight></codeline>
<codeline lineno="6343"><highlight class="comment">THE<sp/>SOFTWARE<sp/><sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/><sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/><sp/>OF<sp/>ANY<sp/>KIND,<sp/><sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="6344"><highlight class="comment">IMPLIED,<sp/><sp/>INCLUDING<sp/>BUT<sp/><sp/>NOT<sp/><sp/>LIMITED<sp/>TO<sp/><sp/>THE<sp/><sp/>WARRANTIES<sp/>OF<sp/><sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="6345"><highlight class="comment">FITNESS<sp/>FOR<sp/><sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/><sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="6346"><highlight class="comment">AUTHORS<sp/><sp/>OR<sp/>COPYRIGHT<sp/><sp/>HOLDERS<sp/><sp/>BE<sp/><sp/>LIABLE<sp/>FOR<sp/><sp/>ANY<sp/><sp/>CLAIM,<sp/><sp/>DAMAGES<sp/>OR<sp/><sp/>OTHER</highlight></codeline>
<codeline lineno="6347"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/><sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="6348"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/><sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="6349"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="6350"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6351"><highlight class="normal"></highlight></codeline>
<codeline lineno="6352"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6353"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cctype&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6354"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6355"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6356"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6357"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/color.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6358"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/font_align.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6359"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/font_style.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6360"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/utf8.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6361"><highlight class="normal"></highlight></codeline>
<codeline lineno="6362"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;=<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6363"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;optional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6364"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::optional;</highlight></codeline>
<codeline lineno="6365"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6366"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/optional_lite.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6367"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">nonstd::optional</ref>;</highlight></codeline>
<codeline lineno="6368"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6369"><highlight class="normal"></highlight></codeline>
<codeline lineno="6370"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6371"><highlight class="normal"></highlight></codeline>
<codeline lineno="6372"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tabulate<sp/>{</highlight></codeline>
<codeline lineno="6373"><highlight class="normal"></highlight></codeline>
<codeline lineno="6374"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Format<sp/>{</highlight></codeline>
<codeline lineno="6375"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6376"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;width(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6377"><highlight class="normal"><sp/><sp/><sp/><sp/>width_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6379"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6380"><highlight class="normal"></highlight></codeline>
<codeline lineno="6381"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;height(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6382"><highlight class="normal"><sp/><sp/><sp/><sp/>height_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6384"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6385"><highlight class="normal"></highlight></codeline>
<codeline lineno="6386"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;padding(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6387"><highlight class="normal"><sp/><sp/><sp/><sp/>padding_left_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6388"><highlight class="normal"><sp/><sp/><sp/><sp/>padding_right_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6389"><highlight class="normal"><sp/><sp/><sp/><sp/>padding_top_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6390"><highlight class="normal"><sp/><sp/><sp/><sp/>padding_bottom_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6392"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6393"><highlight class="normal"></highlight></codeline>
<codeline lineno="6394"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;padding_left(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6395"><highlight class="normal"><sp/><sp/><sp/><sp/>padding_left_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6397"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6398"><highlight class="normal"></highlight></codeline>
<codeline lineno="6399"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;padding_right(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6400"><highlight class="normal"><sp/><sp/><sp/><sp/>padding_right_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6402"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6403"><highlight class="normal"></highlight></codeline>
<codeline lineno="6404"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;padding_top(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6405"><highlight class="normal"><sp/><sp/><sp/><sp/>padding_top_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6407"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6408"><highlight class="normal"></highlight></codeline>
<codeline lineno="6409"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;padding_bottom(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6410"><highlight class="normal"><sp/><sp/><sp/><sp/>padding_bottom_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6412"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6413"><highlight class="normal"></highlight></codeline>
<codeline lineno="6414"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;border(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="6415"><highlight class="normal"><sp/><sp/><sp/><sp/>border_left_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6416"><highlight class="normal"><sp/><sp/><sp/><sp/>border_right_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6417"><highlight class="normal"><sp/><sp/><sp/><sp/>border_top_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6418"><highlight class="normal"><sp/><sp/><sp/><sp/>border_bottom_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6420"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6421"><highlight class="normal"></highlight></codeline>
<codeline lineno="6422"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;border_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6423"><highlight class="normal"><sp/><sp/><sp/><sp/>border_left_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6424"><highlight class="normal"><sp/><sp/><sp/><sp/>border_right_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6425"><highlight class="normal"><sp/><sp/><sp/><sp/>border_top_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6426"><highlight class="normal"><sp/><sp/><sp/><sp/>border_bottom_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6428"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6429"><highlight class="normal"></highlight></codeline>
<codeline lineno="6430"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;border_background_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6431"><highlight class="normal"><sp/><sp/><sp/><sp/>border_left_background_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6432"><highlight class="normal"><sp/><sp/><sp/><sp/>border_right_background_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6433"><highlight class="normal"><sp/><sp/><sp/><sp/>border_top_background_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6434"><highlight class="normal"><sp/><sp/><sp/><sp/>border_bottom_background_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6436"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6437"><highlight class="normal"></highlight></codeline>
<codeline lineno="6438"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;border_left(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="6439"><highlight class="normal"><sp/><sp/><sp/><sp/>border_left_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6442"><highlight class="normal"></highlight></codeline>
<codeline lineno="6443"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;border_left_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6444"><highlight class="normal"><sp/><sp/><sp/><sp/>border_left_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6446"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6447"><highlight class="normal"></highlight></codeline>
<codeline lineno="6448"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;border_left_background_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6449"><highlight class="normal"><sp/><sp/><sp/><sp/>border_left_background_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6451"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6452"><highlight class="normal"></highlight></codeline>
<codeline lineno="6453"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;border_right(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="6454"><highlight class="normal"><sp/><sp/><sp/><sp/>border_right_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6456"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6457"><highlight class="normal"></highlight></codeline>
<codeline lineno="6458"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;border_right_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6459"><highlight class="normal"><sp/><sp/><sp/><sp/>border_right_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6461"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6462"><highlight class="normal"></highlight></codeline>
<codeline lineno="6463"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;border_right_background_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6464"><highlight class="normal"><sp/><sp/><sp/><sp/>border_right_background_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6466"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6467"><highlight class="normal"></highlight></codeline>
<codeline lineno="6468"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;border_top(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="6469"><highlight class="normal"><sp/><sp/><sp/><sp/>border_top_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6471"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6472"><highlight class="normal"></highlight></codeline>
<codeline lineno="6473"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;border_top_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6474"><highlight class="normal"><sp/><sp/><sp/><sp/>border_top_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6476"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6477"><highlight class="normal"></highlight></codeline>
<codeline lineno="6478"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;border_top_background_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6479"><highlight class="normal"><sp/><sp/><sp/><sp/>border_top_background_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6481"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6482"><highlight class="normal"></highlight></codeline>
<codeline lineno="6483"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;border_bottom(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="6484"><highlight class="normal"><sp/><sp/><sp/><sp/>border_bottom_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6487"><highlight class="normal"></highlight></codeline>
<codeline lineno="6488"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;border_bottom_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6489"><highlight class="normal"><sp/><sp/><sp/><sp/>border_bottom_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6491"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6492"><highlight class="normal"></highlight></codeline>
<codeline lineno="6493"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;border_bottom_background_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6494"><highlight class="normal"><sp/><sp/><sp/><sp/>border_bottom_background_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6496"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6497"><highlight class="normal"></highlight></codeline>
<codeline lineno="6498"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;show_border()<sp/>{</highlight></codeline>
<codeline lineno="6499"><highlight class="normal"><sp/><sp/><sp/><sp/>show_border_top_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6500"><highlight class="normal"><sp/><sp/><sp/><sp/>show_border_bottom_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6501"><highlight class="normal"><sp/><sp/><sp/><sp/>show_border_left_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6502"><highlight class="normal"><sp/><sp/><sp/><sp/>show_border_right_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6504"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6505"><highlight class="normal"></highlight></codeline>
<codeline lineno="6506"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;hide_border()<sp/>{</highlight></codeline>
<codeline lineno="6507"><highlight class="normal"><sp/><sp/><sp/><sp/>show_border_top_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6508"><highlight class="normal"><sp/><sp/><sp/><sp/>show_border_bottom_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6509"><highlight class="normal"><sp/><sp/><sp/><sp/>show_border_left_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6510"><highlight class="normal"><sp/><sp/><sp/><sp/>show_border_right_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6512"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6513"><highlight class="normal"></highlight></codeline>
<codeline lineno="6514"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;show_border_top()<sp/>{</highlight></codeline>
<codeline lineno="6515"><highlight class="normal"><sp/><sp/><sp/><sp/>show_border_top_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6517"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6518"><highlight class="normal"></highlight></codeline>
<codeline lineno="6519"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;hide_border_top()<sp/>{</highlight></codeline>
<codeline lineno="6520"><highlight class="normal"><sp/><sp/><sp/><sp/>show_border_top_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6522"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6523"><highlight class="normal"></highlight></codeline>
<codeline lineno="6524"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;show_border_bottom()<sp/>{</highlight></codeline>
<codeline lineno="6525"><highlight class="normal"><sp/><sp/><sp/><sp/>show_border_bottom_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6527"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6528"><highlight class="normal"></highlight></codeline>
<codeline lineno="6529"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;hide_border_bottom()<sp/>{</highlight></codeline>
<codeline lineno="6530"><highlight class="normal"><sp/><sp/><sp/><sp/>show_border_bottom_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6532"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6533"><highlight class="normal"></highlight></codeline>
<codeline lineno="6534"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;show_border_left()<sp/>{</highlight></codeline>
<codeline lineno="6535"><highlight class="normal"><sp/><sp/><sp/><sp/>show_border_left_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6537"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6538"><highlight class="normal"></highlight></codeline>
<codeline lineno="6539"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;hide_border_left()<sp/>{</highlight></codeline>
<codeline lineno="6540"><highlight class="normal"><sp/><sp/><sp/><sp/>show_border_left_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6542"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6543"><highlight class="normal"></highlight></codeline>
<codeline lineno="6544"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;show_border_right()<sp/>{</highlight></codeline>
<codeline lineno="6545"><highlight class="normal"><sp/><sp/><sp/><sp/>show_border_right_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6547"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6548"><highlight class="normal"></highlight></codeline>
<codeline lineno="6549"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;hide_border_right()<sp/>{</highlight></codeline>
<codeline lineno="6550"><highlight class="normal"><sp/><sp/><sp/><sp/>show_border_right_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6552"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6553"><highlight class="normal"></highlight></codeline>
<codeline lineno="6554"><highlight class="normal"><sp/><sp/>Format&amp;<sp/>show_row_separator()<sp/>{</highlight></codeline>
<codeline lineno="6555"><highlight class="normal"><sp/><sp/><sp/><sp/>show_border_top_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6556"><highlight class="normal"><sp/><sp/><sp/><sp/>show_row_separator_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6558"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6559"><highlight class="normal"></highlight></codeline>
<codeline lineno="6560"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;corner(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="6561"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_top_left_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6562"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_top_right_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6563"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_bottom_left_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6564"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_bottom_right_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6566"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6567"><highlight class="normal"></highlight></codeline>
<codeline lineno="6568"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;corner_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6569"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_top_left_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6570"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_top_right_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6571"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_bottom_left_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6572"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_bottom_right_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6574"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6575"><highlight class="normal"></highlight></codeline>
<codeline lineno="6576"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;corner_background_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6577"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_top_left_background_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6578"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_top_right_background_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6579"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_bottom_left_background_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6580"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_bottom_right_background_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6582"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6583"><highlight class="normal"></highlight></codeline>
<codeline lineno="6584"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;corner_top_left(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="6585"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_top_left_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6587"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6588"><highlight class="normal"></highlight></codeline>
<codeline lineno="6589"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;corner_top_left_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6590"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_top_left_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6592"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6593"><highlight class="normal"></highlight></codeline>
<codeline lineno="6594"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;corner_top_left_background_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6595"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_top_left_background_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6597"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6598"><highlight class="normal"></highlight></codeline>
<codeline lineno="6599"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;corner_top_right(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="6600"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_top_right_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6602"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6603"><highlight class="normal"></highlight></codeline>
<codeline lineno="6604"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;corner_top_right_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6605"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_top_right_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6607"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6608"><highlight class="normal"></highlight></codeline>
<codeline lineno="6609"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;corner_top_right_background_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6610"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_top_right_background_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6612"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6613"><highlight class="normal"></highlight></codeline>
<codeline lineno="6614"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;corner_bottom_left(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="6615"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_bottom_left_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6617"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6618"><highlight class="normal"></highlight></codeline>
<codeline lineno="6619"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;corner_bottom_left_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6620"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_bottom_left_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6622"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6623"><highlight class="normal"></highlight></codeline>
<codeline lineno="6624"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;corner_bottom_left_background_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6625"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_bottom_left_background_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6627"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6628"><highlight class="normal"></highlight></codeline>
<codeline lineno="6629"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;corner_bottom_right(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="6630"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_bottom_right_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6632"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6633"><highlight class="normal"></highlight></codeline>
<codeline lineno="6634"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;corner_bottom_right_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6635"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_bottom_right_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6637"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6638"><highlight class="normal"></highlight></codeline>
<codeline lineno="6639"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;corner_bottom_right_background_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6640"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_bottom_right_background_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6642"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6643"><highlight class="normal"></highlight></codeline>
<codeline lineno="6644"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;column_separator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="6645"><highlight class="normal"><sp/><sp/><sp/><sp/>column_separator_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6647"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6648"><highlight class="normal"></highlight></codeline>
<codeline lineno="6649"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;column_separator_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6650"><highlight class="normal"><sp/><sp/><sp/><sp/>column_separator_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6652"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6653"><highlight class="normal"></highlight></codeline>
<codeline lineno="6654"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;column_separator_background_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6655"><highlight class="normal"><sp/><sp/><sp/><sp/>column_separator_background_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6657"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6658"><highlight class="normal"></highlight></codeline>
<codeline lineno="6659"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;font_align(FontAlign<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6660"><highlight class="normal"><sp/><sp/><sp/><sp/>font_align_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6662"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6663"><highlight class="normal"></highlight></codeline>
<codeline lineno="6664"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;font_style(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;FontStyle&gt;<sp/>&amp;style)<sp/>{</highlight></codeline>
<codeline lineno="6665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(font_style_.has_value())<sp/>{</highlight></codeline>
<codeline lineno="6666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;s<sp/>:<sp/>style)</highlight></codeline>
<codeline lineno="6667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>font_style_-&gt;push_back(s);</highlight></codeline>
<codeline lineno="6668"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>font_style_<sp/>=<sp/>style;</highlight></codeline>
<codeline lineno="6670"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6672"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6673"><highlight class="normal"></highlight></codeline>
<codeline lineno="6674"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;font_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6675"><highlight class="normal"><sp/><sp/><sp/><sp/>font_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6677"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6678"><highlight class="normal"></highlight></codeline>
<codeline lineno="6679"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;font_background_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6680"><highlight class="normal"><sp/><sp/><sp/><sp/>font_background_color_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6683"><highlight class="normal"></highlight></codeline>
<codeline lineno="6684"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6685"><highlight class="normal"><sp/><sp/><sp/><sp/>font_color(value);</highlight></codeline>
<codeline lineno="6686"><highlight class="normal"><sp/><sp/><sp/><sp/>border_color(value);</highlight></codeline>
<codeline lineno="6687"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_color(value);</highlight></codeline>
<codeline lineno="6688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6689"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6690"><highlight class="normal"></highlight></codeline>
<codeline lineno="6691"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;background_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6692"><highlight class="normal"><sp/><sp/><sp/><sp/>font_background_color(value);</highlight></codeline>
<codeline lineno="6693"><highlight class="normal"><sp/><sp/><sp/><sp/>border_background_color(value);</highlight></codeline>
<codeline lineno="6694"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_background_color(value);</highlight></codeline>
<codeline lineno="6695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6696"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6697"><highlight class="normal"></highlight></codeline>
<codeline lineno="6698"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;multi_byte_characters(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="6699"><highlight class="normal"><sp/><sp/><sp/><sp/>multi_byte_characters_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6701"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6702"><highlight class="normal"></highlight></codeline>
<codeline lineno="6703"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;locale(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="6704"><highlight class="normal"><sp/><sp/><sp/><sp/>locale_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="6705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6706"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6707"><highlight class="normal"></highlight></codeline>
<codeline lineno="6708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>TrimMode<sp/>{</highlight></codeline>
<codeline lineno="6709"><highlight class="normal"><sp/><sp/><sp/><sp/>kNone<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="6710"><highlight class="normal"><sp/><sp/><sp/><sp/>kLeft<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>0,</highlight></codeline>
<codeline lineno="6711"><highlight class="normal"><sp/><sp/><sp/><sp/>kRight<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>1,</highlight></codeline>
<codeline lineno="6712"><highlight class="normal"><sp/><sp/><sp/><sp/>kBoth<sp/>=<sp/>kLeft<sp/>|<sp/>kRight,</highlight></codeline>
<codeline lineno="6713"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="6714"><highlight class="normal"></highlight></codeline>
<codeline lineno="6715"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;trim_mode(TrimMode<sp/>trim_mode)<sp/>{</highlight></codeline>
<codeline lineno="6716"><highlight class="normal"><sp/><sp/><sp/><sp/>trim_mode_<sp/>=<sp/>trim_mode;</highlight></codeline>
<codeline lineno="6717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6718"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6719"><highlight class="normal"></highlight></codeline>
<codeline lineno="6720"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>word<sp/>wrap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6721"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Given<sp/>an<sp/>input<sp/>string<sp/>and<sp/>a<sp/>line<sp/>length,<sp/>this<sp/>will<sp/>insert<sp/>\n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6722"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>strategic<sp/>places<sp/>in<sp/>input<sp/>string<sp/>and<sp/>apply<sp/>word<sp/>wrapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>word_wrap(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;locale,</highlight></codeline>
<codeline lineno="6724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_multi_byte_character_support_enabled)<sp/>{</highlight></codeline>
<codeline lineno="6725"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>words<sp/>=<sp/>explode_string(str,<sp/>{</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="6726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>current_line_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6727"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result;</highlight></codeline>
<codeline lineno="6728"><highlight class="normal"></highlight></codeline>
<codeline lineno="6729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>words.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>word<sp/>=<sp/>words[i];</highlight></codeline>
<codeline lineno="6731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>adding<sp/>the<sp/>new<sp/>word<sp/>to<sp/>the<sp/>current<sp/>line<sp/>would<sp/>be<sp/>too<sp/>long,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>put<sp/>it<sp/>on<sp/>a<sp/>new<sp/>line<sp/>(and<sp/>split<sp/>it<sp/>up<sp/>if<sp/>it&apos;s<sp/>too<sp/>long).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_line_length<sp/>+</highlight></codeline>
<codeline lineno="6734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_sequence_length(word,<sp/>locale,<sp/>is_multi_byte_character_support_enabled)<sp/>&gt;</highlight></codeline>
<codeline lineno="6735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width)<sp/>{</highlight></codeline>
<codeline lineno="6736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>move<sp/>down<sp/>to<sp/>a<sp/>new<sp/>line<sp/>if<sp/>we<sp/>have<sp/>text<sp/>on<sp/>the<sp/>current<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoids<sp/>situation<sp/>where<sp/>wrapped<sp/>whitespace<sp/>causes<sp/>emptylines<sp/>in<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_line_length<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_line_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6742"><highlight class="normal"></highlight></codeline>
<codeline lineno="6743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>current<sp/>word<sp/>is<sp/>too<sp/>long<sp/>to<sp/>fit<sp/>on<sp/>a<sp/>line<sp/>even<sp/>on<sp/>it&apos;s<sp/>own</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>split<sp/>the<sp/>word<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(get_sequence_length(word,<sp/>locale,<sp/>is_multi_byte_character_support_enabled)<sp/>&gt;<sp/>width)<sp/>{</highlight></codeline>
<codeline lineno="6746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>word.substr(0,<sp/>width<sp/>-<sp/>1)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word<sp/>=<sp/>word.substr(width<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="6748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6750"><highlight class="normal"></highlight></codeline>
<codeline lineno="6751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>leading<sp/>whitespace<sp/>from<sp/>the<sp/>word<sp/>so<sp/>the<sp/>new<sp/>line<sp/>starts<sp/>flush</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>left.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word<sp/>=<sp/>trim_left(word);</highlight></codeline>
<codeline lineno="6754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>word;</highlight></codeline>
<codeline lineno="6756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_line_length<sp/>+=</highlight></codeline>
<codeline lineno="6757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_sequence_length(word,<sp/>locale,<sp/>is_multi_byte_character_support_enabled);</highlight></codeline>
<codeline lineno="6758"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6760"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6761"><highlight class="normal"></highlight></codeline>
<codeline lineno="6762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>split_lines(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;text,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;delimiter,</highlight></codeline>
<codeline lineno="6763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;locale,</highlight></codeline>
<codeline lineno="6764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_multi_byte_character_support_enabled)<sp/>{</highlight></codeline>
<codeline lineno="6765"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>result{};</highlight></codeline>
<codeline lineno="6766"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>input<sp/>=<sp/>text;</highlight></codeline>
<codeline lineno="6767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6768"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>token;</highlight></codeline>
<codeline lineno="6769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((pos<sp/>=<sp/>input.find(delimiter))<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="6770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>token<sp/>=<sp/>input.substr(0,<sp/>pos);</highlight></codeline>
<codeline lineno="6771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(token);</highlight></codeline>
<codeline lineno="6772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>input.erase(0,<sp/>pos<sp/>+<sp/>delimiter.length());</highlight></codeline>
<codeline lineno="6773"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get_sequence_length(input,<sp/>locale,<sp/>is_multi_byte_character_support_enabled))</highlight></codeline>
<codeline lineno="6775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(input);</highlight></codeline>
<codeline lineno="6776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="6777"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="6778"><highlight class="normal"></highlight></codeline>
<codeline lineno="6779"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Merge<sp/>two<sp/>formats</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6780"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>has<sp/>higher<sp/>precedence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6781"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>e.g.,<sp/>first<sp/>=<sp/>cell-level<sp/>formatting<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6782"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>second<sp/>=<sp/>row-level<sp/>formatting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6783"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Result<sp/>has<sp/>attributes<sp/>of<sp/>both<sp/>with<sp/>cell-level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6784"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>formatting<sp/>taking<sp/>precedence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Format<sp/>merge(Format<sp/>first,<sp/>Format<sp/>second)<sp/>{</highlight></codeline>
<codeline lineno="6786"><highlight class="normal"><sp/><sp/><sp/><sp/>Format<sp/>result;</highlight></codeline>
<codeline lineno="6787"><highlight class="normal"></highlight></codeline>
<codeline lineno="6788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Width<sp/>and<sp/>height</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.width_.has_value())</highlight></codeline>
<codeline lineno="6790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.width_<sp/>=<sp/>first.width_;</highlight></codeline>
<codeline lineno="6791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.width_<sp/>=<sp/>second.width_;</highlight></codeline>
<codeline lineno="6793"><highlight class="normal"></highlight></codeline>
<codeline lineno="6794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.height_.has_value())</highlight></codeline>
<codeline lineno="6795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.height_<sp/>=<sp/>first.height_;</highlight></codeline>
<codeline lineno="6796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.height_<sp/>=<sp/>second.height_;</highlight></codeline>
<codeline lineno="6798"><highlight class="normal"></highlight></codeline>
<codeline lineno="6799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Font<sp/>styling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.font_align_.has_value())</highlight></codeline>
<codeline lineno="6801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.font_align_<sp/>=<sp/>first.font_align_;</highlight></codeline>
<codeline lineno="6802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.font_align_<sp/>=<sp/>second.font_align_;</highlight></codeline>
<codeline lineno="6804"><highlight class="normal"></highlight></codeline>
<codeline lineno="6805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.font_style_.has_value())<sp/>{</highlight></codeline>
<codeline lineno="6806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Merge<sp/>font<sp/>styles<sp/>using<sp/>std::set_union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;FontStyle&gt;<sp/>merged_font_style(first.font_style_-&gt;size()<sp/>+</highlight></codeline>
<codeline lineno="6808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>second.font_style_-&gt;size());</highlight></codeline>
<codeline lineno="6809"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)<sp/>||<sp/>defined(_WIN64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fixes<sp/>error<sp/>in<sp/>Windows<sp/>-<sp/>Sequence<sp/>not<sp/>ordered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(first.font_style_-&gt;begin(),<sp/>first.font_style_-&gt;end());</highlight></codeline>
<codeline lineno="6812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(second.font_style_-&gt;begin(),<sp/>second.font_style_-&gt;end());</highlight></codeline>
<codeline lineno="6813"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::set_union(first.font_style_-&gt;begin(),<sp/>first.font_style_-&gt;end(),</highlight></codeline>
<codeline lineno="6815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>second.font_style_-&gt;begin(),<sp/>second.font_style_-&gt;end(),</highlight></codeline>
<codeline lineno="6816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>merged_font_style.begin());</highlight></codeline>
<codeline lineno="6817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.font_style_<sp/>=<sp/>merged_font_style;</highlight></codeline>
<codeline lineno="6818"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.font_style_<sp/>=<sp/>second.font_style_;</highlight></codeline>
<codeline lineno="6820"><highlight class="normal"></highlight></codeline>
<codeline lineno="6821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.font_color_.has_value())</highlight></codeline>
<codeline lineno="6822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.font_color_<sp/>=<sp/>first.font_color_;</highlight></codeline>
<codeline lineno="6823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.font_color_<sp/>=<sp/>second.font_color_;</highlight></codeline>
<codeline lineno="6825"><highlight class="normal"></highlight></codeline>
<codeline lineno="6826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.font_background_color_.has_value())</highlight></codeline>
<codeline lineno="6827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.font_background_color_<sp/>=<sp/>first.font_background_color_;</highlight></codeline>
<codeline lineno="6828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.font_background_color_<sp/>=<sp/>second.font_background_color_;</highlight></codeline>
<codeline lineno="6830"><highlight class="normal"></highlight></codeline>
<codeline lineno="6831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Padding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.padding_left_.has_value())</highlight></codeline>
<codeline lineno="6833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.padding_left_<sp/>=<sp/>first.padding_left_;</highlight></codeline>
<codeline lineno="6834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.padding_left_<sp/>=<sp/>second.padding_left_;</highlight></codeline>
<codeline lineno="6836"><highlight class="normal"></highlight></codeline>
<codeline lineno="6837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.padding_top_.has_value())</highlight></codeline>
<codeline lineno="6838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.padding_top_<sp/>=<sp/>first.padding_top_;</highlight></codeline>
<codeline lineno="6839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.padding_top_<sp/>=<sp/>second.padding_top_;</highlight></codeline>
<codeline lineno="6841"><highlight class="normal"></highlight></codeline>
<codeline lineno="6842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.padding_right_.has_value())</highlight></codeline>
<codeline lineno="6843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.padding_right_<sp/>=<sp/>first.padding_right_;</highlight></codeline>
<codeline lineno="6844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.padding_right_<sp/>=<sp/>second.padding_right_;</highlight></codeline>
<codeline lineno="6846"><highlight class="normal"></highlight></codeline>
<codeline lineno="6847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.padding_bottom_.has_value())</highlight></codeline>
<codeline lineno="6848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.padding_bottom_<sp/>=<sp/>first.padding_bottom_;</highlight></codeline>
<codeline lineno="6849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.padding_bottom_<sp/>=<sp/>second.padding_bottom_;</highlight></codeline>
<codeline lineno="6851"><highlight class="normal"></highlight></codeline>
<codeline lineno="6852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Border</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.border_left_.has_value())</highlight></codeline>
<codeline lineno="6854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.border_left_<sp/>=<sp/>first.border_left_;</highlight></codeline>
<codeline lineno="6855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.border_left_<sp/>=<sp/>second.border_left_;</highlight></codeline>
<codeline lineno="6857"><highlight class="normal"></highlight></codeline>
<codeline lineno="6858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.border_left_color_.has_value())</highlight></codeline>
<codeline lineno="6859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.border_left_color_<sp/>=<sp/>first.border_left_color_;</highlight></codeline>
<codeline lineno="6860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.border_left_color_<sp/>=<sp/>second.border_left_color_;</highlight></codeline>
<codeline lineno="6862"><highlight class="normal"></highlight></codeline>
<codeline lineno="6863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.border_left_background_color_.has_value())</highlight></codeline>
<codeline lineno="6864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.border_left_background_color_<sp/>=<sp/>first.border_left_background_color_;</highlight></codeline>
<codeline lineno="6865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.border_left_background_color_<sp/>=<sp/>second.border_left_background_color_;</highlight></codeline>
<codeline lineno="6867"><highlight class="normal"></highlight></codeline>
<codeline lineno="6868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.border_top_.has_value())</highlight></codeline>
<codeline lineno="6869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.border_top_<sp/>=<sp/>first.border_top_;</highlight></codeline>
<codeline lineno="6870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.border_top_<sp/>=<sp/>second.border_top_;</highlight></codeline>
<codeline lineno="6872"><highlight class="normal"></highlight></codeline>
<codeline lineno="6873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.border_top_color_.has_value())</highlight></codeline>
<codeline lineno="6874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.border_top_color_<sp/>=<sp/>first.border_top_color_;</highlight></codeline>
<codeline lineno="6875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.border_top_color_<sp/>=<sp/>second.border_top_color_;</highlight></codeline>
<codeline lineno="6877"><highlight class="normal"></highlight></codeline>
<codeline lineno="6878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.border_top_background_color_.has_value())</highlight></codeline>
<codeline lineno="6879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.border_top_background_color_<sp/>=<sp/>first.border_top_background_color_;</highlight></codeline>
<codeline lineno="6880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.border_top_background_color_<sp/>=<sp/>second.border_top_background_color_;</highlight></codeline>
<codeline lineno="6882"><highlight class="normal"></highlight></codeline>
<codeline lineno="6883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.border_bottom_.has_value())</highlight></codeline>
<codeline lineno="6884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.border_bottom_<sp/>=<sp/>first.border_bottom_;</highlight></codeline>
<codeline lineno="6885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.border_bottom_<sp/>=<sp/>second.border_bottom_;</highlight></codeline>
<codeline lineno="6887"><highlight class="normal"></highlight></codeline>
<codeline lineno="6888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.border_bottom_color_.has_value())</highlight></codeline>
<codeline lineno="6889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.border_bottom_color_<sp/>=<sp/>first.border_bottom_color_;</highlight></codeline>
<codeline lineno="6890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.border_bottom_color_<sp/>=<sp/>second.border_bottom_color_;</highlight></codeline>
<codeline lineno="6892"><highlight class="normal"></highlight></codeline>
<codeline lineno="6893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.border_bottom_background_color_.has_value())</highlight></codeline>
<codeline lineno="6894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.border_bottom_background_color_<sp/>=<sp/>first.border_bottom_background_color_;</highlight></codeline>
<codeline lineno="6895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.border_bottom_background_color_<sp/>=<sp/>second.border_bottom_background_color_;</highlight></codeline>
<codeline lineno="6897"><highlight class="normal"></highlight></codeline>
<codeline lineno="6898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.border_right_.has_value())</highlight></codeline>
<codeline lineno="6899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.border_right_<sp/>=<sp/>first.border_right_;</highlight></codeline>
<codeline lineno="6900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.border_right_<sp/>=<sp/>second.border_right_;</highlight></codeline>
<codeline lineno="6902"><highlight class="normal"></highlight></codeline>
<codeline lineno="6903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.border_right_color_.has_value())</highlight></codeline>
<codeline lineno="6904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.border_right_color_<sp/>=<sp/>first.border_right_color_;</highlight></codeline>
<codeline lineno="6905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.border_right_color_<sp/>=<sp/>second.border_right_color_;</highlight></codeline>
<codeline lineno="6907"><highlight class="normal"></highlight></codeline>
<codeline lineno="6908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.border_right_background_color_.has_value())</highlight></codeline>
<codeline lineno="6909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.border_right_background_color_<sp/>=<sp/>first.border_right_background_color_;</highlight></codeline>
<codeline lineno="6910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.border_right_background_color_<sp/>=<sp/>second.border_right_background_color_;</highlight></codeline>
<codeline lineno="6912"><highlight class="normal"></highlight></codeline>
<codeline lineno="6913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.show_border_top_.has_value())</highlight></codeline>
<codeline lineno="6914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.show_border_top_<sp/>=<sp/>first.show_border_top_;</highlight></codeline>
<codeline lineno="6915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.show_border_top_<sp/>=<sp/>second.show_border_top_;</highlight></codeline>
<codeline lineno="6917"><highlight class="normal"></highlight></codeline>
<codeline lineno="6918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.show_border_bottom_.has_value())</highlight></codeline>
<codeline lineno="6919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.show_border_bottom_<sp/>=<sp/>first.show_border_bottom_;</highlight></codeline>
<codeline lineno="6920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.show_border_bottom_<sp/>=<sp/>second.show_border_bottom_;</highlight></codeline>
<codeline lineno="6922"><highlight class="normal"></highlight></codeline>
<codeline lineno="6923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.show_border_left_.has_value())</highlight></codeline>
<codeline lineno="6924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.show_border_left_<sp/>=<sp/>first.show_border_left_;</highlight></codeline>
<codeline lineno="6925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.show_border_left_<sp/>=<sp/>second.show_border_left_;</highlight></codeline>
<codeline lineno="6927"><highlight class="normal"></highlight></codeline>
<codeline lineno="6928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.show_border_right_.has_value())</highlight></codeline>
<codeline lineno="6929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.show_border_right_<sp/>=<sp/>first.show_border_right_;</highlight></codeline>
<codeline lineno="6930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.show_border_right_<sp/>=<sp/>second.show_border_right_;</highlight></codeline>
<codeline lineno="6932"><highlight class="normal"></highlight></codeline>
<codeline lineno="6933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Corner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.corner_top_left_.has_value())</highlight></codeline>
<codeline lineno="6935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.corner_top_left_<sp/>=<sp/>first.corner_top_left_;</highlight></codeline>
<codeline lineno="6936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.corner_top_left_<sp/>=<sp/>second.corner_top_left_;</highlight></codeline>
<codeline lineno="6938"><highlight class="normal"></highlight></codeline>
<codeline lineno="6939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.corner_top_left_color_.has_value())</highlight></codeline>
<codeline lineno="6940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.corner_top_left_color_<sp/>=<sp/>first.corner_top_left_color_;</highlight></codeline>
<codeline lineno="6941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.corner_top_left_color_<sp/>=<sp/>second.corner_top_left_color_;</highlight></codeline>
<codeline lineno="6943"><highlight class="normal"></highlight></codeline>
<codeline lineno="6944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.corner_top_left_background_color_.has_value())</highlight></codeline>
<codeline lineno="6945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.corner_top_left_background_color_<sp/>=<sp/>first.corner_top_left_background_color_;</highlight></codeline>
<codeline lineno="6946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.corner_top_left_background_color_<sp/>=<sp/>second.corner_top_left_background_color_;</highlight></codeline>
<codeline lineno="6948"><highlight class="normal"></highlight></codeline>
<codeline lineno="6949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.corner_top_right_.has_value())</highlight></codeline>
<codeline lineno="6950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.corner_top_right_<sp/>=<sp/>first.corner_top_right_;</highlight></codeline>
<codeline lineno="6951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.corner_top_right_<sp/>=<sp/>second.corner_top_right_;</highlight></codeline>
<codeline lineno="6953"><highlight class="normal"></highlight></codeline>
<codeline lineno="6954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.corner_top_right_color_.has_value())</highlight></codeline>
<codeline lineno="6955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.corner_top_right_color_<sp/>=<sp/>first.corner_top_right_color_;</highlight></codeline>
<codeline lineno="6956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.corner_top_right_color_<sp/>=<sp/>second.corner_top_right_color_;</highlight></codeline>
<codeline lineno="6958"><highlight class="normal"></highlight></codeline>
<codeline lineno="6959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.corner_top_right_background_color_.has_value())</highlight></codeline>
<codeline lineno="6960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.corner_top_right_background_color_<sp/>=<sp/>first.corner_top_right_background_color_;</highlight></codeline>
<codeline lineno="6961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.corner_top_right_background_color_<sp/>=<sp/>second.corner_top_right_background_color_;</highlight></codeline>
<codeline lineno="6963"><highlight class="normal"></highlight></codeline>
<codeline lineno="6964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.corner_bottom_left_.has_value())</highlight></codeline>
<codeline lineno="6965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.corner_bottom_left_<sp/>=<sp/>first.corner_bottom_left_;</highlight></codeline>
<codeline lineno="6966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.corner_bottom_left_<sp/>=<sp/>second.corner_bottom_left_;</highlight></codeline>
<codeline lineno="6968"><highlight class="normal"></highlight></codeline>
<codeline lineno="6969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.corner_bottom_left_color_.has_value())</highlight></codeline>
<codeline lineno="6970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.corner_bottom_left_color_<sp/>=<sp/>first.corner_bottom_left_color_;</highlight></codeline>
<codeline lineno="6971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.corner_bottom_left_color_<sp/>=<sp/>second.corner_bottom_left_color_;</highlight></codeline>
<codeline lineno="6973"><highlight class="normal"></highlight></codeline>
<codeline lineno="6974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.corner_bottom_left_background_color_.has_value())</highlight></codeline>
<codeline lineno="6975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.corner_bottom_left_background_color_<sp/>=<sp/>first.corner_bottom_left_background_color_;</highlight></codeline>
<codeline lineno="6976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.corner_bottom_left_background_color_<sp/>=<sp/>second.corner_bottom_left_background_color_;</highlight></codeline>
<codeline lineno="6978"><highlight class="normal"></highlight></codeline>
<codeline lineno="6979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.corner_bottom_right_.has_value())</highlight></codeline>
<codeline lineno="6980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.corner_bottom_right_<sp/>=<sp/>first.corner_bottom_right_;</highlight></codeline>
<codeline lineno="6981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.corner_bottom_right_<sp/>=<sp/>second.corner_bottom_right_;</highlight></codeline>
<codeline lineno="6983"><highlight class="normal"></highlight></codeline>
<codeline lineno="6984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.corner_bottom_right_color_.has_value())</highlight></codeline>
<codeline lineno="6985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.corner_bottom_right_color_<sp/>=<sp/>first.corner_bottom_right_color_;</highlight></codeline>
<codeline lineno="6986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.corner_bottom_right_color_<sp/>=<sp/>second.corner_bottom_right_color_;</highlight></codeline>
<codeline lineno="6988"><highlight class="normal"></highlight></codeline>
<codeline lineno="6989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.corner_bottom_right_background_color_.has_value())</highlight></codeline>
<codeline lineno="6990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.corner_bottom_right_background_color_<sp/>=<sp/>first.corner_bottom_right_background_color_;</highlight></codeline>
<codeline lineno="6991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.corner_bottom_right_background_color_<sp/>=<sp/>second.corner_bottom_right_background_color_;</highlight></codeline>
<codeline lineno="6993"><highlight class="normal"></highlight></codeline>
<codeline lineno="6994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.column_separator_.has_value())</highlight></codeline>
<codeline lineno="6995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.column_separator_<sp/>=<sp/>first.column_separator_;</highlight></codeline>
<codeline lineno="6996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.column_separator_<sp/>=<sp/>second.column_separator_;</highlight></codeline>
<codeline lineno="6998"><highlight class="normal"></highlight></codeline>
<codeline lineno="6999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.column_separator_color_.has_value())</highlight></codeline>
<codeline lineno="7000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.column_separator_color_<sp/>=<sp/>first.column_separator_color_;</highlight></codeline>
<codeline lineno="7001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.column_separator_color_<sp/>=<sp/>second.column_separator_color_;</highlight></codeline>
<codeline lineno="7003"><highlight class="normal"></highlight></codeline>
<codeline lineno="7004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.column_separator_background_color_.has_value())</highlight></codeline>
<codeline lineno="7005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.column_separator_background_color_<sp/>=<sp/>first.column_separator_background_color_;</highlight></codeline>
<codeline lineno="7006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.column_separator_background_color_<sp/>=<sp/>second.column_separator_background_color_;</highlight></codeline>
<codeline lineno="7008"><highlight class="normal"></highlight></codeline>
<codeline lineno="7009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Internationlization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.multi_byte_characters_.has_value())</highlight></codeline>
<codeline lineno="7011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.multi_byte_characters_<sp/>=<sp/>first.multi_byte_characters_;</highlight></codeline>
<codeline lineno="7012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.multi_byte_characters_<sp/>=<sp/>second.multi_byte_characters_;</highlight></codeline>
<codeline lineno="7014"><highlight class="normal"></highlight></codeline>
<codeline lineno="7015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.locale_.has_value())</highlight></codeline>
<codeline lineno="7016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.locale_<sp/>=<sp/>first.locale_;</highlight></codeline>
<codeline lineno="7017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.locale_<sp/>=<sp/>second.locale_;</highlight></codeline>
<codeline lineno="7019"><highlight class="normal"></highlight></codeline>
<codeline lineno="7020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.trim_mode_.has_value())</highlight></codeline>
<codeline lineno="7021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.trim_mode_<sp/>=<sp/>first.trim_mode_;</highlight></codeline>
<codeline lineno="7022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.trim_mode_<sp/>=<sp/>second.trim_mode_;</highlight></codeline>
<codeline lineno="7024"><highlight class="normal"></highlight></codeline>
<codeline lineno="7025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first.show_row_separator_.has_value())</highlight></codeline>
<codeline lineno="7026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.show_row_separator_<sp/>=<sp/>first.show_row_separator_;</highlight></codeline>
<codeline lineno="7027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.show_row_separator_<sp/>=<sp/>second.show_row_separator_;</highlight></codeline>
<codeline lineno="7029"><highlight class="normal"></highlight></codeline>
<codeline lineno="7030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7031"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7032"><highlight class="normal"></highlight></codeline>
<codeline lineno="7033"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Cell;</highlight></codeline>
<codeline lineno="7035"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Row;</highlight></codeline>
<codeline lineno="7036"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Column;</highlight></codeline>
<codeline lineno="7037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TableInternal;</highlight></codeline>
<codeline lineno="7038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Printer;</highlight></codeline>
<codeline lineno="7039"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MarkdownExporter;</highlight></codeline>
<codeline lineno="7040"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">LatexExporter;</highlight></codeline>
<codeline lineno="7041"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AsciiDocExporter;</highlight></codeline>
<codeline lineno="7042"><highlight class="normal"></highlight></codeline>
<codeline lineno="7043"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_defaults()<sp/>{</highlight></codeline>
<codeline lineno="7044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>width<sp/>and<sp/>height<sp/>are<sp/>not<sp/>set<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7045"><highlight class="normal"><sp/><sp/><sp/><sp/>font_align_<sp/>=<sp/>FontAlign::left;</highlight></codeline>
<codeline lineno="7046"><highlight class="normal"><sp/><sp/><sp/><sp/>font_style_<sp/>=<sp/>std::vector&lt;FontStyle&gt;{};</highlight></codeline>
<codeline lineno="7047"><highlight class="normal"><sp/><sp/><sp/><sp/>font_color_<sp/>=<sp/>font_background_color_<sp/>=<sp/>Color::none;</highlight></codeline>
<codeline lineno="7048"><highlight class="normal"><sp/><sp/><sp/><sp/>padding_left_<sp/>=<sp/>padding_right_<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="7049"><highlight class="normal"><sp/><sp/><sp/><sp/>padding_top_<sp/>=<sp/>padding_bottom_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7050"><highlight class="normal"><sp/><sp/><sp/><sp/>border_top_<sp/>=<sp/>border_bottom_<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7051"><highlight class="normal"><sp/><sp/><sp/><sp/>border_left_<sp/>=<sp/>border_right_<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7052"><highlight class="normal"><sp/><sp/><sp/><sp/>show_border_left_<sp/>=<sp/>show_border_right_<sp/>=<sp/>show_border_top_<sp/>=<sp/>show_border_bottom_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7053"><highlight class="normal"><sp/><sp/><sp/><sp/>border_top_color_<sp/>=<sp/>border_top_background_color_<sp/>=<sp/>border_bottom_color_<sp/>=</highlight></codeline>
<codeline lineno="7054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>border_bottom_background_color_<sp/>=<sp/>border_left_color_<sp/>=<sp/>border_left_background_color_<sp/>=</highlight></codeline>
<codeline lineno="7055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>border_right_color_<sp/>=<sp/>border_right_background_color_<sp/>=<sp/>Color::none;</highlight></codeline>
<codeline lineno="7056"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_top_left_<sp/>=<sp/>corner_top_right_<sp/>=<sp/>corner_bottom_left_<sp/>=<sp/>corner_bottom_right_<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7057"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_top_left_color_<sp/>=<sp/>corner_top_left_background_color_<sp/>=<sp/>corner_top_right_color_<sp/>=</highlight></codeline>
<codeline lineno="7058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>corner_top_right_background_color_<sp/>=<sp/>corner_bottom_left_color_<sp/>=</highlight></codeline>
<codeline lineno="7059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>corner_bottom_left_background_color_<sp/>=<sp/>corner_bottom_right_color_<sp/>=</highlight></codeline>
<codeline lineno="7060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>corner_bottom_right_background_color_<sp/>=<sp/>Color::none;</highlight></codeline>
<codeline lineno="7061"><highlight class="normal"><sp/><sp/><sp/><sp/>column_separator_<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7062"><highlight class="normal"><sp/><sp/><sp/><sp/>column_separator_color_<sp/>=<sp/>column_separator_background_color_<sp/>=<sp/>Color::none;</highlight></codeline>
<codeline lineno="7063"><highlight class="normal"><sp/><sp/><sp/><sp/>multi_byte_characters_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7064"><highlight class="normal"><sp/><sp/><sp/><sp/>locale_<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7065"><highlight class="normal"><sp/><sp/><sp/><sp/>trim_mode_<sp/>=<sp/>TrimMode::kBoth;</highlight></codeline>
<codeline lineno="7066"><highlight class="normal"><sp/><sp/><sp/><sp/>show_row_separator_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7067"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7068"><highlight class="normal"></highlight></codeline>
<codeline lineno="7069"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Helper<sp/>methods<sp/>for<sp/>word<sp/>wrapping:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7070"><highlight class="normal"></highlight></codeline>
<codeline lineno="7071"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>trim<sp/>white<sp/>spaces<sp/>from<sp/>the<sp/>left<sp/>end<sp/>of<sp/>an<sp/>input<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7072"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>trim_left(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input_string)<sp/>{</highlight></codeline>
<codeline lineno="7073"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result<sp/>=<sp/>input_string;</highlight></codeline>
<codeline lineno="7074"><highlight class="normal"><sp/><sp/><sp/><sp/>result.erase(result.begin(),<sp/>std::find_if(result.begin(),<sp/>result.end(),</highlight></codeline>
<codeline lineno="7075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch)<sp/>{<sp/>return<sp/>!std::isspace(ch);<sp/>}));</highlight></codeline>
<codeline lineno="7076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7077"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7078"><highlight class="normal"></highlight></codeline>
<codeline lineno="7079"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>trim<sp/>white<sp/>spaces<sp/>from<sp/>right<sp/>end<sp/>of<sp/>an<sp/>input<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7080"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>trim_right(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input_string)<sp/>{</highlight></codeline>
<codeline lineno="7081"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result<sp/>=<sp/>input_string;</highlight></codeline>
<codeline lineno="7082"><highlight class="normal"><sp/><sp/><sp/><sp/>result.erase(</highlight></codeline>
<codeline lineno="7083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::find_if(result.rbegin(),<sp/>result.rend(),<sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch)<sp/>{<sp/>return<sp/>!std::isspace(ch);<sp/>})</highlight></codeline>
<codeline lineno="7084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.base(),</highlight></codeline>
<codeline lineno="7085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.end());</highlight></codeline>
<codeline lineno="7086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7087"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7088"><highlight class="normal"></highlight></codeline>
<codeline lineno="7089"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>trim<sp/>white<sp/>spaces<sp/>from<sp/>either<sp/>end<sp/>of<sp/>an<sp/>input<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7090"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>trim(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input_string)<sp/>{</highlight></codeline>
<codeline lineno="7091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>trim_left(trim_right(input_string));</highlight></codeline>
<codeline lineno="7092"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7093"><highlight class="normal"></highlight></codeline>
<codeline lineno="7094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index_of_any(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start_index,</highlight></codeline>
<codeline lineno="7095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;split_characters)<sp/>{</highlight></codeline>
<codeline lineno="7096"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;<sp/>indices{};</highlight></codeline>
<codeline lineno="7097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;c<sp/>:<sp/>split_characters)<sp/>{</highlight></codeline>
<codeline lineno="7098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>input.find(c,<sp/>start_index);</highlight></codeline>
<codeline lineno="7099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>!=<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="7100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices.push_back(index);</highlight></codeline>
<codeline lineno="7101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indices.size()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="7103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*std::min_element(indices.begin(),<sp/>indices.end());</highlight></codeline>
<codeline lineno="7104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string::npos;</highlight></codeline>
<codeline lineno="7106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7107"><highlight class="normal"></highlight></codeline>
<codeline lineno="7108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>explode_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input,</highlight></codeline>
<codeline lineno="7109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;split_characters)<sp/>{</highlight></codeline>
<codeline lineno="7110"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>result{};</highlight></codeline>
<codeline lineno="7111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start_index{0};</highlight></codeline>
<codeline lineno="7112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="7113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>index_of_any(input,<sp/>start_index,<sp/>split_characters);</highlight></codeline>
<codeline lineno="7114"><highlight class="normal"></highlight></codeline>
<codeline lineno="7115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>==<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="7116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(input.substr(start_index));</highlight></codeline>
<codeline lineno="7117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7119"><highlight class="normal"></highlight></codeline>
<codeline lineno="7120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>word<sp/>=<sp/>input.substr(start_index,<sp/>index<sp/>-<sp/>start_index);</highlight></codeline>
<codeline lineno="7121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>next_character<sp/>=<sp/>input.substr(index,<sp/>1)[0];</highlight></codeline>
<codeline lineno="7122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unlike<sp/>whitespace,<sp/>dashes<sp/>and<sp/>the<sp/>like<sp/>should<sp/>stick<sp/>to<sp/>the<sp/>word</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>occurring<sp/>before<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isspace(next_character))<sp/>{</highlight></codeline>
<codeline lineno="7125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(word);</highlight></codeline>
<codeline lineno="7126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(std::string(1,<sp/>next_character));</highlight></codeline>
<codeline lineno="7127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(word<sp/>+<sp/>next_character);</highlight></codeline>
<codeline lineno="7129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start_index<sp/>=<sp/>index<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="7131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7132"><highlight class="normal"></highlight></codeline>
<codeline lineno="7133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7135"><highlight class="normal"></highlight></codeline>
<codeline lineno="7136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Element<sp/>width<sp/>and<sp/>height</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7137"><highlight class="normal"><sp/><sp/>optional&lt;size_t&gt;<sp/>width_{};</highlight></codeline>
<codeline lineno="7138"><highlight class="normal"><sp/><sp/>optional&lt;size_t&gt;<sp/>height_{};</highlight></codeline>
<codeline lineno="7139"><highlight class="normal"></highlight></codeline>
<codeline lineno="7140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Font<sp/>styling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7141"><highlight class="normal"><sp/><sp/>optional&lt;FontAlign&gt;<sp/>font_align_{};</highlight></codeline>
<codeline lineno="7142"><highlight class="normal"><sp/><sp/>optional&lt;std::vector&lt;FontStyle&gt;&gt;<sp/>font_style_{};</highlight></codeline>
<codeline lineno="7143"><highlight class="normal"><sp/><sp/>optional&lt;Color&gt;<sp/>font_color_{};</highlight></codeline>
<codeline lineno="7144"><highlight class="normal"><sp/><sp/>optional&lt;Color&gt;<sp/>font_background_color_{};</highlight></codeline>
<codeline lineno="7145"><highlight class="normal"></highlight></codeline>
<codeline lineno="7146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Element<sp/>padding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7147"><highlight class="normal"><sp/><sp/>optional&lt;size_t&gt;<sp/>padding_left_{};</highlight></codeline>
<codeline lineno="7148"><highlight class="normal"><sp/><sp/>optional&lt;size_t&gt;<sp/>padding_top_{};</highlight></codeline>
<codeline lineno="7149"><highlight class="normal"><sp/><sp/>optional&lt;size_t&gt;<sp/>padding_right_{};</highlight></codeline>
<codeline lineno="7150"><highlight class="normal"><sp/><sp/>optional&lt;size_t&gt;<sp/>padding_bottom_{};</highlight></codeline>
<codeline lineno="7151"><highlight class="normal"></highlight></codeline>
<codeline lineno="7152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Element<sp/>border</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7153"><highlight class="normal"><sp/><sp/>optional&lt;bool&gt;<sp/>show_border_top_{};</highlight></codeline>
<codeline lineno="7154"><highlight class="normal"><sp/><sp/>optional&lt;std::string&gt;<sp/>border_top_{};</highlight></codeline>
<codeline lineno="7155"><highlight class="normal"><sp/><sp/>optional&lt;Color&gt;<sp/>border_top_color_{};</highlight></codeline>
<codeline lineno="7156"><highlight class="normal"><sp/><sp/>optional&lt;Color&gt;<sp/>border_top_background_color_{};</highlight></codeline>
<codeline lineno="7157"><highlight class="normal"></highlight></codeline>
<codeline lineno="7158"><highlight class="normal"><sp/><sp/>optional&lt;bool&gt;<sp/>show_border_bottom_{};</highlight></codeline>
<codeline lineno="7159"><highlight class="normal"><sp/><sp/>optional&lt;std::string&gt;<sp/>border_bottom_{};</highlight></codeline>
<codeline lineno="7160"><highlight class="normal"><sp/><sp/>optional&lt;Color&gt;<sp/>border_bottom_color_{};</highlight></codeline>
<codeline lineno="7161"><highlight class="normal"><sp/><sp/>optional&lt;Color&gt;<sp/>border_bottom_background_color_{};</highlight></codeline>
<codeline lineno="7162"><highlight class="normal"></highlight></codeline>
<codeline lineno="7163"><highlight class="normal"><sp/><sp/>optional&lt;bool&gt;<sp/>show_border_left_{};</highlight></codeline>
<codeline lineno="7164"><highlight class="normal"><sp/><sp/>optional&lt;std::string&gt;<sp/>border_left_{};</highlight></codeline>
<codeline lineno="7165"><highlight class="normal"><sp/><sp/>optional&lt;Color&gt;<sp/>border_left_color_{};</highlight></codeline>
<codeline lineno="7166"><highlight class="normal"><sp/><sp/>optional&lt;Color&gt;<sp/>border_left_background_color_{};</highlight></codeline>
<codeline lineno="7167"><highlight class="normal"></highlight></codeline>
<codeline lineno="7168"><highlight class="normal"><sp/><sp/>optional&lt;bool&gt;<sp/>show_border_right_{};</highlight></codeline>
<codeline lineno="7169"><highlight class="normal"><sp/><sp/>optional&lt;std::string&gt;<sp/>border_right_{};</highlight></codeline>
<codeline lineno="7170"><highlight class="normal"><sp/><sp/>optional&lt;Color&gt;<sp/>border_right_color_{};</highlight></codeline>
<codeline lineno="7171"><highlight class="normal"><sp/><sp/>optional&lt;Color&gt;<sp/>border_right_background_color_{};</highlight></codeline>
<codeline lineno="7172"><highlight class="normal"></highlight></codeline>
<codeline lineno="7173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Element<sp/>corner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7174"><highlight class="normal"><sp/><sp/>optional&lt;std::string&gt;<sp/>corner_top_left_{};</highlight></codeline>
<codeline lineno="7175"><highlight class="normal"><sp/><sp/>optional&lt;Color&gt;<sp/>corner_top_left_color_{};</highlight></codeline>
<codeline lineno="7176"><highlight class="normal"><sp/><sp/>optional&lt;Color&gt;<sp/>corner_top_left_background_color_{};</highlight></codeline>
<codeline lineno="7177"><highlight class="normal"></highlight></codeline>
<codeline lineno="7178"><highlight class="normal"><sp/><sp/>optional&lt;std::string&gt;<sp/>corner_top_right_{};</highlight></codeline>
<codeline lineno="7179"><highlight class="normal"><sp/><sp/>optional&lt;Color&gt;<sp/>corner_top_right_color_{};</highlight></codeline>
<codeline lineno="7180"><highlight class="normal"><sp/><sp/>optional&lt;Color&gt;<sp/>corner_top_right_background_color_{};</highlight></codeline>
<codeline lineno="7181"><highlight class="normal"></highlight></codeline>
<codeline lineno="7182"><highlight class="normal"><sp/><sp/>optional&lt;std::string&gt;<sp/>corner_bottom_left_{};</highlight></codeline>
<codeline lineno="7183"><highlight class="normal"><sp/><sp/>optional&lt;Color&gt;<sp/>corner_bottom_left_color_{};</highlight></codeline>
<codeline lineno="7184"><highlight class="normal"><sp/><sp/>optional&lt;Color&gt;<sp/>corner_bottom_left_background_color_{};</highlight></codeline>
<codeline lineno="7185"><highlight class="normal"></highlight></codeline>
<codeline lineno="7186"><highlight class="normal"><sp/><sp/>optional&lt;std::string&gt;<sp/>corner_bottom_right_{};</highlight></codeline>
<codeline lineno="7187"><highlight class="normal"><sp/><sp/>optional&lt;Color&gt;<sp/>corner_bottom_right_color_{};</highlight></codeline>
<codeline lineno="7188"><highlight class="normal"><sp/><sp/>optional&lt;Color&gt;<sp/>corner_bottom_right_background_color_{};</highlight></codeline>
<codeline lineno="7189"><highlight class="normal"></highlight></codeline>
<codeline lineno="7190"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Element<sp/>column<sp/>separator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7191"><highlight class="normal"><sp/><sp/>optional&lt;std::string&gt;<sp/>column_separator_{};</highlight></codeline>
<codeline lineno="7192"><highlight class="normal"><sp/><sp/>optional&lt;Color&gt;<sp/>column_separator_color_{};</highlight></codeline>
<codeline lineno="7193"><highlight class="normal"><sp/><sp/>optional&lt;Color&gt;<sp/>column_separator_background_color_{};</highlight></codeline>
<codeline lineno="7194"><highlight class="normal"></highlight></codeline>
<codeline lineno="7195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Internationalization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7196"><highlight class="normal"><sp/><sp/>optional&lt;bool&gt;<sp/>multi_byte_characters_{};</highlight></codeline>
<codeline lineno="7197"><highlight class="normal"><sp/><sp/>optional&lt;std::string&gt;<sp/>locale_{};</highlight></codeline>
<codeline lineno="7198"><highlight class="normal"></highlight></codeline>
<codeline lineno="7199"><highlight class="normal"><sp/><sp/>optional&lt;TrimMode&gt;<sp/>trim_mode_{};</highlight></codeline>
<codeline lineno="7200"><highlight class="normal"></highlight></codeline>
<codeline lineno="7201"><highlight class="normal"><sp/><sp/>optional&lt;bool&gt;<sp/>show_row_separator_{};</highlight></codeline>
<codeline lineno="7202"><highlight class="normal">};</highlight></codeline>
<codeline lineno="7203"><highlight class="normal"></highlight></codeline>
<codeline lineno="7204"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tabulate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7205"><highlight class="normal"></highlight></codeline>
<codeline lineno="7206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/utf8.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7207"><highlight class="normal"></highlight></codeline>
<codeline lineno="7208"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;=<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7209"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;optional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7210"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::optional;</highlight></codeline>
<codeline lineno="7211"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/optional_lite.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7213"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">nonstd::optional</ref>;</highlight></codeline>
<codeline lineno="7214"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7215"><highlight class="normal"></highlight></codeline>
<codeline lineno="7216"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7217"><highlight class="normal"></highlight></codeline>
<codeline lineno="7218"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tabulate<sp/>{</highlight></codeline>
<codeline lineno="7219"><highlight class="normal"></highlight></codeline>
<codeline lineno="7220"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Cell<sp/>{</highlight></codeline>
<codeline lineno="7221"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Cell(std::shared_ptr&lt;class<sp/>Row&gt;<sp/>parent)<sp/>:<sp/>parent_(parent)<sp/>{}</highlight></codeline>
<codeline lineno="7223"><highlight class="normal"></highlight></codeline>
<codeline lineno="7224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_text(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;text)<sp/>{<sp/>data_<sp/>=<sp/>text;<sp/>}</highlight></codeline>
<codeline lineno="7225"><highlight class="normal"></highlight></codeline>
<codeline lineno="7226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;get_text()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_;<sp/>}</highlight></codeline>
<codeline lineno="7227"><highlight class="normal"></highlight></codeline>
<codeline lineno="7228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size()<sp/>{</highlight></codeline>
<codeline lineno="7229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_sequence_length(data_,<sp/>locale(),<sp/>is_multi_byte_character_support_enabled());</highlight></codeline>
<codeline lineno="7230"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7231"><highlight class="normal"></highlight></codeline>
<codeline lineno="7232"><highlight class="normal"><sp/><sp/>std::string<sp/>locale()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*format().locale_;<sp/>}</highlight></codeline>
<codeline lineno="7233"><highlight class="normal"></highlight></codeline>
<codeline lineno="7234"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;format();</highlight></codeline>
<codeline lineno="7235"><highlight class="normal"></highlight></codeline>
<codeline lineno="7236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_multi_byte_character_support_enabled();</highlight></codeline>
<codeline lineno="7237"><highlight class="normal"></highlight></codeline>
<codeline lineno="7238"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7239"><highlight class="normal"><sp/><sp/>std::string<sp/>data_;</highlight></codeline>
<codeline lineno="7240"><highlight class="normal"><sp/><sp/>std::weak_ptr&lt;class<sp/>Row&gt;<sp/>parent_;</highlight></codeline>
<codeline lineno="7241"><highlight class="normal"><sp/><sp/>optional&lt;Format&gt;<sp/>format_;</highlight></codeline>
<codeline lineno="7242"><highlight class="normal">};</highlight></codeline>
<codeline lineno="7243"><highlight class="normal"></highlight></codeline>
<codeline lineno="7244"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tabulate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7245"><highlight class="normal"></highlight></codeline>
<codeline lineno="7246"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7247"><highlight class="comment"><sp/><sp/>__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>___.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__</highlight></codeline>
<codeline lineno="7248"><highlight class="comment">_/<sp/><sp/>|______<sp/>\_<sp/>|__<sp/><sp/>__<sp/>__|<sp/><sp/>|<sp/>_____<sp/>_/<sp/><sp/>|_<sp/><sp/>____</highlight></codeline>
<codeline lineno="7249"><highlight class="comment">\<sp/><sp/><sp/>__\__<sp/><sp/>\<sp/>|<sp/>__<sp/>\|<sp/><sp/>|<sp/><sp/>\<sp/><sp/>|<sp/>\__<sp/><sp/>\\<sp/><sp/><sp/>__\/<sp/>__<sp/>\</highlight></codeline>
<codeline lineno="7250"><highlight class="comment"><sp/>|<sp/><sp/>|<sp/><sp/>/<sp/>__<sp/>\|<sp/>\_\<sp/>\<sp/><sp/>|<sp/><sp/>/<sp/><sp/>|__/<sp/>__<sp/>\|<sp/><sp/>|<sp/>\<sp/><sp/>___/</highlight></codeline>
<codeline lineno="7251"><highlight class="comment"><sp/>|__|<sp/>(____<sp/><sp/>/___<sp/><sp/>/____/|____(____<sp/><sp/>/__|<sp/><sp/>\___<sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="7252"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/</highlight></codeline>
<codeline lineno="7253"><highlight class="comment">Table<sp/>Maker<sp/>for<sp/>Modern<sp/>C++</highlight></codeline>
<codeline lineno="7254"><highlight class="comment">https://github.com/p-ranav/tabulate</highlight></codeline>
<codeline lineno="7255"><highlight class="comment"></highlight></codeline>
<codeline lineno="7256"><highlight class="comment">Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>&lt;http://opensource.org/licenses/MIT&gt;.</highlight></codeline>
<codeline lineno="7257"><highlight class="comment">SPDX-License-Identifier:<sp/>MIT</highlight></codeline>
<codeline lineno="7258"><highlight class="comment">Copyright<sp/>(c)<sp/>2019<sp/>Pranav<sp/>Srinivas<sp/>Kumar<sp/>&lt;pranav.srinivas.kumar@gmail.com&gt;.</highlight></codeline>
<codeline lineno="7259"><highlight class="comment"></highlight></codeline>
<codeline lineno="7260"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/><sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/><sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="7261"><highlight class="comment">of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/><sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="7262"><highlight class="comment">in<sp/>the<sp/>Software<sp/><sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/><sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="7263"><highlight class="comment">to<sp/><sp/>use,<sp/>copy,<sp/><sp/>modify,<sp/>merge,<sp/><sp/>publish,<sp/>distribute,<sp/><sp/>sublicense,<sp/>and/or<sp/><sp/>sell</highlight></codeline>
<codeline lineno="7264"><highlight class="comment">copies<sp/><sp/>of<sp/><sp/>the<sp/>Software,<sp/><sp/>and<sp/><sp/>to<sp/><sp/>permit<sp/>persons<sp/><sp/>to<sp/><sp/>whom<sp/><sp/>the<sp/>Software<sp/><sp/>is</highlight></codeline>
<codeline lineno="7265"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="7266"><highlight class="comment"></highlight></codeline>
<codeline lineno="7267"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="7268"><highlight class="comment">copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="7269"><highlight class="comment"></highlight></codeline>
<codeline lineno="7270"><highlight class="comment">THE<sp/>SOFTWARE<sp/><sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/><sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/><sp/>OF<sp/>ANY<sp/>KIND,<sp/><sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="7271"><highlight class="comment">IMPLIED,<sp/><sp/>INCLUDING<sp/>BUT<sp/><sp/>NOT<sp/><sp/>LIMITED<sp/>TO<sp/><sp/>THE<sp/><sp/>WARRANTIES<sp/>OF<sp/><sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="7272"><highlight class="comment">FITNESS<sp/>FOR<sp/><sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/><sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="7273"><highlight class="comment">AUTHORS<sp/><sp/>OR<sp/>COPYRIGHT<sp/><sp/>HOLDERS<sp/><sp/>BE<sp/><sp/>LIABLE<sp/>FOR<sp/><sp/>ANY<sp/><sp/>CLAIM,<sp/><sp/>DAMAGES<sp/>OR<sp/><sp/>OTHER</highlight></codeline>
<codeline lineno="7274"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/><sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="7275"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/><sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="7276"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="7277"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7278"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7279"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7280"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7281"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7282"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/cell.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7283"><highlight class="normal"></highlight></codeline>
<codeline lineno="7284"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;=<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7285"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;optional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7286"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::optional;</highlight></codeline>
<codeline lineno="7287"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7288"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/optional_lite.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7289"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">nonstd::optional</ref>;</highlight></codeline>
<codeline lineno="7290"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7291"><highlight class="normal"></highlight></codeline>
<codeline lineno="7292"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7293"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7294"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7295"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7296"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7297"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7298"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7299"><highlight class="normal"></highlight></codeline>
<codeline lineno="7300"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tabulate<sp/>{</highlight></codeline>
<codeline lineno="7301"><highlight class="normal"></highlight></codeline>
<codeline lineno="7302"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Row<sp/>{</highlight></codeline>
<codeline lineno="7303"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Row(std::shared_ptr&lt;class<sp/>TableInternal&gt;<sp/>parent)<sp/>:<sp/>parent_(parent)<sp/>{}</highlight></codeline>
<codeline lineno="7305"><highlight class="normal"></highlight></codeline>
<codeline lineno="7306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_cell(std::shared_ptr&lt;Cell&gt;<sp/>cell)<sp/>{<sp/>cells_.push_back(cell);<sp/>}</highlight></codeline>
<codeline lineno="7307"><highlight class="normal"></highlight></codeline>
<codeline lineno="7308"><highlight class="normal"><sp/><sp/>Cell<sp/>&amp;operator[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cell(index);<sp/>}</highlight></codeline>
<codeline lineno="7309"><highlight class="normal"></highlight></codeline>
<codeline lineno="7310"><highlight class="normal"><sp/><sp/>Cell<sp/>&amp;cell(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(cells_[index]);<sp/>}</highlight></codeline>
<codeline lineno="7311"><highlight class="normal"></highlight></codeline>
<codeline lineno="7312"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Cell&gt;&gt;<sp/>cells()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cells_;<sp/>}</highlight></codeline>
<codeline lineno="7313"><highlight class="normal"></highlight></codeline>
<codeline lineno="7314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cells_.size();<sp/>}</highlight></codeline>
<codeline lineno="7315"><highlight class="normal"></highlight></codeline>
<codeline lineno="7316"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;format();</highlight></codeline>
<codeline lineno="7317"><highlight class="normal"></highlight></codeline>
<codeline lineno="7318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">CellIterator<sp/>{</highlight></codeline>
<codeline lineno="7319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>CellIterator(std::vector&lt;std::shared_ptr&lt;Cell&gt;&gt;::iterator<sp/>ptr)<sp/>:<sp/>ptr(ptr)<sp/>{}</highlight></codeline>
<codeline lineno="7321"><highlight class="normal"></highlight></codeline>
<codeline lineno="7322"><highlight class="normal"><sp/><sp/><sp/><sp/>CellIterator<sp/>operator++()<sp/>{</highlight></codeline>
<codeline lineno="7323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++ptr;</highlight></codeline>
<codeline lineno="7324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CellIterator<sp/>&amp;other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr<sp/>!=<sp/>other.ptr;<sp/>}</highlight></codeline>
<codeline lineno="7327"><highlight class="normal"><sp/><sp/><sp/><sp/>Cell<sp/>&amp;operator*()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>**ptr;<sp/>}</highlight></codeline>
<codeline lineno="7328"><highlight class="normal"></highlight></codeline>
<codeline lineno="7329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7330"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Cell&gt;&gt;::iterator<sp/>ptr;</highlight></codeline>
<codeline lineno="7331"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="7332"><highlight class="normal"></highlight></codeline>
<codeline lineno="7333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin()<sp/>-&gt;<sp/>CellIterator<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CellIterator(cells_.begin());<sp/>}</highlight></codeline>
<codeline lineno="7334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end()<sp/>-&gt;<sp/>CellIterator<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CellIterator(cells_.end());<sp/>}</highlight></codeline>
<codeline lineno="7335"><highlight class="normal"></highlight></codeline>
<codeline lineno="7336"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Printer;</highlight></codeline>
<codeline lineno="7338"><highlight class="normal"></highlight></codeline>
<codeline lineno="7339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>row<sp/>height<sp/>as<sp/>configured</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>each<sp/>cell<sp/>in<sp/>the<sp/>row,<sp/>check<sp/>the<sp/>cell.format.height</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7341"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>property<sp/>and<sp/>return<sp/>the<sp/>largest<sp/>configured<sp/>row<sp/>height</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>used<sp/>to<sp/>ensure<sp/>that<sp/>all<sp/>cells<sp/>in<sp/>a<sp/>row<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>aligned<sp/>when<sp/>printing<sp/>the<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>get_configured_height()<sp/>{</highlight></codeline>
<codeline lineno="7345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>result{0};</highlight></codeline>
<codeline lineno="7346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>cells_[i];</highlight></codeline>
<codeline lineno="7348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format<sp/>=<sp/>cell-&gt;format();</highlight></codeline>
<codeline lineno="7349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format.height_.has_value())</highlight></codeline>
<codeline lineno="7350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>std::max(result,<sp/>*format.height_);</highlight></codeline>
<codeline lineno="7351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7354"><highlight class="normal"></highlight></codeline>
<codeline lineno="7355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Computes<sp/>the<sp/>height<sp/>of<sp/>the<sp/>row<sp/>based<sp/>on<sp/>cell<sp/>contents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7356"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>configured<sp/>cell<sp/>padding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>each<sp/>cell,<sp/>compute:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7358"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>padding_top<sp/>+<sp/>(cell_contents<sp/>/<sp/>column<sp/>height)<sp/>+<sp/>padding_bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7359"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>return<sp/>the<sp/>largest<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7360"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7361"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>useful<sp/>when<sp/>no<sp/>cell.format.height<sp/>is<sp/>configured</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7362"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>get_configured_height()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7363"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>If<sp/>this<sp/>returns<sp/>0,<sp/>then<sp/>use<sp/>get_computed_height()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>get_computed_height(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;size_t&gt;<sp/>&amp;column_widths)<sp/>{</highlight></codeline>
<codeline lineno="7365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>result{0};</highlight></codeline>
<codeline lineno="7366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>std::max(result,<sp/>get_cell_height(i,<sp/>column_widths[i]));</highlight></codeline>
<codeline lineno="7368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7370"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7371"><highlight class="normal"></highlight></codeline>
<codeline lineno="7372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>padding_top<sp/>+<sp/>cell_contents<sp/>/<sp/>column_height<sp/>+<sp/>padding_bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>a<sp/>given<sp/>cell<sp/>in<sp/>the<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7374"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>e.g.,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>column<sp/>width<sp/>=<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cell_contents<sp/>=<sp/>&quot;I<sp/>love<sp/>tabulate&quot;<sp/>(size/length<sp/>=<sp/>15)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7377"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>padding<sp/>top<sp/>and<sp/>padding<sp/>bottom<sp/>are<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7378"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>then,<sp/>cell<sp/>height<sp/>=<sp/>1<sp/>+<sp/>(15<sp/>/<sp/>5)<sp/>+<sp/>1<sp/>=<sp/>1<sp/>+<sp/>3<sp/>+<sp/>1<sp/>=<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7379"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>cell<sp/>will<sp/>look<sp/>like<sp/>this:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7380"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7381"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>.....</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7382"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>I<sp/>lov</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7383"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>e<sp/>tab</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7384"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ulate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7385"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>.....</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>get_cell_height(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cell_index,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>column_width)<sp/>{</highlight></codeline>
<codeline lineno="7387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>result{0};</highlight></codeline>
<codeline lineno="7388"><highlight class="normal"><sp/><sp/><sp/><sp/>Cell<sp/>&amp;cell<sp/>=<sp/>*(cells_[cell_index]);</highlight></codeline>
<codeline lineno="7389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format<sp/>=<sp/>cell.format();</highlight></codeline>
<codeline lineno="7390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>text<sp/>=<sp/>cell.get_text();</highlight></codeline>
<codeline lineno="7391"><highlight class="normal"></highlight></codeline>
<codeline lineno="7392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding_left<sp/>=<sp/>*format.padding_left_;</highlight></codeline>
<codeline lineno="7393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding_right<sp/>=<sp/>*format.padding_right_;</highlight></codeline>
<codeline lineno="7394"><highlight class="normal"></highlight></codeline>
<codeline lineno="7395"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>*format.padding_top_;</highlight></codeline>
<codeline lineno="7396"><highlight class="normal"></highlight></codeline>
<codeline lineno="7397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(column_width<sp/>&gt;<sp/>(padding_left<sp/>+<sp/>padding_right))<sp/>{</highlight></codeline>
<codeline lineno="7398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>column_width<sp/>-=<sp/>(padding_left<sp/>+<sp/>padding_right);</highlight></codeline>
<codeline lineno="7399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7400"><highlight class="normal"></highlight></codeline>
<codeline lineno="7401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>input<sp/>text<sp/>has<sp/>embedded<sp/>newline<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>newlines_in_text<sp/>=<sp/>std::count(text.begin(),<sp/>text.end(),<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7403"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>word_wrapped_text;</highlight></codeline>
<codeline lineno="7404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newlines_in_text<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="7405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>new<sp/>lines<sp/>in<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>automatic<sp/>word<sp/>wrapping<sp/>and<sp/>compute<sp/>row<sp/>height</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word_wrapped_text<sp/>=<sp/>Format::word_wrap(text,<sp/>column_width,<sp/>cell.locale(),</highlight></codeline>
<codeline lineno="7408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.is_multi_byte_character_support_enabled());</highlight></codeline>
<codeline lineno="7409"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>embedded<sp/>&apos;\n&apos;<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Respect<sp/>these<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>word_wrapped_text<sp/>=<sp/>text;</highlight></codeline>
<codeline lineno="7413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7414"><highlight class="normal"></highlight></codeline>
<codeline lineno="7415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>newlines_in_wrapped_text<sp/>=</highlight></codeline>
<codeline lineno="7416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::count(word_wrapped_text.begin(),<sp/>word_wrapped_text.end(),<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>estimated_row_height<sp/>=<sp/>newlines_in_wrapped_text;</highlight></codeline>
<codeline lineno="7418"><highlight class="normal"></highlight></codeline>
<codeline lineno="7419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!word_wrapped_text.empty()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="7420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word_wrapped_text[word_wrapped_text.size()<sp/>-<sp/>1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>text<sp/>doesn&apos;t<sp/>end<sp/>with<sp/>a<sp/>newline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>estimated_row_height<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="7422"><highlight class="normal"></highlight></codeline>
<codeline lineno="7423"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>estimated_row_height;</highlight></codeline>
<codeline lineno="7424"><highlight class="normal"></highlight></codeline>
<codeline lineno="7425"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>*format.padding_bottom_;</highlight></codeline>
<codeline lineno="7426"><highlight class="normal"></highlight></codeline>
<codeline lineno="7427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7428"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7429"><highlight class="normal"></highlight></codeline>
<codeline lineno="7430"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Cell&gt;&gt;<sp/>cells_;</highlight></codeline>
<codeline lineno="7431"><highlight class="normal"><sp/><sp/>std::weak_ptr&lt;class<sp/>TableInternal&gt;<sp/>parent_;</highlight></codeline>
<codeline lineno="7432"><highlight class="normal"><sp/><sp/>optional&lt;Format&gt;<sp/>format_;</highlight></codeline>
<codeline lineno="7433"><highlight class="normal">};</highlight></codeline>
<codeline lineno="7434"><highlight class="normal"></highlight></codeline>
<codeline lineno="7435"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tabulate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7436"><highlight class="normal"></highlight></codeline>
<codeline lineno="7437"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7438"><highlight class="comment"><sp/><sp/>__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>___.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__</highlight></codeline>
<codeline lineno="7439"><highlight class="comment">_/<sp/><sp/>|______<sp/>\_<sp/>|__<sp/><sp/>__<sp/>__|<sp/><sp/>|<sp/>_____<sp/>_/<sp/><sp/>|_<sp/><sp/>____</highlight></codeline>
<codeline lineno="7440"><highlight class="comment">\<sp/><sp/><sp/>__\__<sp/><sp/>\<sp/>|<sp/>__<sp/>\|<sp/><sp/>|<sp/><sp/>\<sp/><sp/>|<sp/>\__<sp/><sp/>\\<sp/><sp/><sp/>__\/<sp/>__<sp/>\</highlight></codeline>
<codeline lineno="7441"><highlight class="comment"><sp/>|<sp/><sp/>|<sp/><sp/>/<sp/>__<sp/>\|<sp/>\_\<sp/>\<sp/><sp/>|<sp/><sp/>/<sp/><sp/>|__/<sp/>__<sp/>\|<sp/><sp/>|<sp/>\<sp/><sp/>___/</highlight></codeline>
<codeline lineno="7442"><highlight class="comment"><sp/>|__|<sp/>(____<sp/><sp/>/___<sp/><sp/>/____/|____(____<sp/><sp/>/__|<sp/><sp/>\___<sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="7443"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/</highlight></codeline>
<codeline lineno="7444"><highlight class="comment">Table<sp/>Maker<sp/>for<sp/>Modern<sp/>C++</highlight></codeline>
<codeline lineno="7445"><highlight class="comment">https://github.com/p-ranav/tabulate</highlight></codeline>
<codeline lineno="7446"><highlight class="comment"></highlight></codeline>
<codeline lineno="7447"><highlight class="comment">Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>&lt;http://opensource.org/licenses/MIT&gt;.</highlight></codeline>
<codeline lineno="7448"><highlight class="comment">SPDX-License-Identifier:<sp/>MIT</highlight></codeline>
<codeline lineno="7449"><highlight class="comment">Copyright<sp/>(c)<sp/>2019<sp/>Pranav<sp/>Srinivas<sp/>Kumar<sp/>&lt;pranav.srinivas.kumar@gmail.com&gt;.</highlight></codeline>
<codeline lineno="7450"><highlight class="comment"></highlight></codeline>
<codeline lineno="7451"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/><sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/><sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="7452"><highlight class="comment">of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/><sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="7453"><highlight class="comment">in<sp/>the<sp/>Software<sp/><sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/><sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="7454"><highlight class="comment">to<sp/><sp/>use,<sp/>copy,<sp/><sp/>modify,<sp/>merge,<sp/><sp/>publish,<sp/>distribute,<sp/><sp/>sublicense,<sp/>and/or<sp/><sp/>sell</highlight></codeline>
<codeline lineno="7455"><highlight class="comment">copies<sp/><sp/>of<sp/><sp/>the<sp/>Software,<sp/><sp/>and<sp/><sp/>to<sp/><sp/>permit<sp/>persons<sp/><sp/>to<sp/><sp/>whom<sp/><sp/>the<sp/>Software<sp/><sp/>is</highlight></codeline>
<codeline lineno="7456"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="7457"><highlight class="comment"></highlight></codeline>
<codeline lineno="7458"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="7459"><highlight class="comment">copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="7460"><highlight class="comment"></highlight></codeline>
<codeline lineno="7461"><highlight class="comment">THE<sp/>SOFTWARE<sp/><sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/><sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/><sp/>OF<sp/>ANY<sp/>KIND,<sp/><sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="7462"><highlight class="comment">IMPLIED,<sp/><sp/>INCLUDING<sp/>BUT<sp/><sp/>NOT<sp/><sp/>LIMITED<sp/>TO<sp/><sp/>THE<sp/><sp/>WARRANTIES<sp/>OF<sp/><sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="7463"><highlight class="comment">FITNESS<sp/>FOR<sp/><sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/><sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="7464"><highlight class="comment">AUTHORS<sp/><sp/>OR<sp/>COPYRIGHT<sp/><sp/>HOLDERS<sp/><sp/>BE<sp/><sp/>LIABLE<sp/>FOR<sp/><sp/>ANY<sp/><sp/>CLAIM,<sp/><sp/>DAMAGES<sp/>OR<sp/><sp/>OTHER</highlight></codeline>
<codeline lineno="7465"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/><sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="7466"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/><sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="7467"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="7468"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7469"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7470"><highlight class="normal"></highlight></codeline>
<codeline lineno="7471"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tabulate<sp/>{</highlight></codeline>
<codeline lineno="7472"><highlight class="normal"></highlight></codeline>
<codeline lineno="7473"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ColumnFormat<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Format<sp/>{</highlight></codeline>
<codeline lineno="7474"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ColumnFormat(</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Column<sp/>&amp;column)<sp/>:<sp/>column_(column)<sp/>{}</highlight></codeline>
<codeline lineno="7476"><highlight class="normal"></highlight></codeline>
<codeline lineno="7477"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;width(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="7478"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;height(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="7479"><highlight class="normal"></highlight></codeline>
<codeline lineno="7480"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Padding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7481"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;padding(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="7482"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;padding_left(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="7483"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;padding_right(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="7484"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;padding_top(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="7485"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;padding_bottom(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="7486"><highlight class="normal"></highlight></codeline>
<codeline lineno="7487"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Border</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7488"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;border(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value);</highlight></codeline>
<codeline lineno="7489"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;border_color(Color<sp/>value);</highlight></codeline>
<codeline lineno="7490"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;border_background_color(Color<sp/>value);</highlight></codeline>
<codeline lineno="7491"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;border_left(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value);</highlight></codeline>
<codeline lineno="7492"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;border_left_color(Color<sp/>value);</highlight></codeline>
<codeline lineno="7493"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;border_left_background_color(Color<sp/>value);</highlight></codeline>
<codeline lineno="7494"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;border_right(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value);</highlight></codeline>
<codeline lineno="7495"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;border_right_color(Color<sp/>value);</highlight></codeline>
<codeline lineno="7496"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;border_right_background_color(Color<sp/>value);</highlight></codeline>
<codeline lineno="7497"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;border_top(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value);</highlight></codeline>
<codeline lineno="7498"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;border_top_color(Color<sp/>value);</highlight></codeline>
<codeline lineno="7499"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;border_top_background_color(Color<sp/>value);</highlight></codeline>
<codeline lineno="7500"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;border_bottom(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value);</highlight></codeline>
<codeline lineno="7501"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;border_bottom_color(Color<sp/>value);</highlight></codeline>
<codeline lineno="7502"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;border_bottom_background_color(Color<sp/>value);</highlight></codeline>
<codeline lineno="7503"><highlight class="normal"></highlight></codeline>
<codeline lineno="7504"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Corner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7505"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;corner(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value);</highlight></codeline>
<codeline lineno="7506"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;corner_color(Color<sp/>value);</highlight></codeline>
<codeline lineno="7507"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;corner_background_color(Color<sp/>value);</highlight></codeline>
<codeline lineno="7508"><highlight class="normal"></highlight></codeline>
<codeline lineno="7509"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Column<sp/>separator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7510"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;column_separator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value);</highlight></codeline>
<codeline lineno="7511"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;column_separator_color(Color<sp/>value);</highlight></codeline>
<codeline lineno="7512"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;column_separator_background_color(Color<sp/>value);</highlight></codeline>
<codeline lineno="7513"><highlight class="normal"></highlight></codeline>
<codeline lineno="7514"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Font<sp/>styling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7515"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;font_align(FontAlign<sp/>value);</highlight></codeline>
<codeline lineno="7516"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;font_style(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;FontStyle&gt;<sp/>&amp;style);</highlight></codeline>
<codeline lineno="7517"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;font_color(Color<sp/>value);</highlight></codeline>
<codeline lineno="7518"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;font_background_color(Color<sp/>value);</highlight></codeline>
<codeline lineno="7519"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;color(Color<sp/>value);</highlight></codeline>
<codeline lineno="7520"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;background_color(Color<sp/>value);</highlight></codeline>
<codeline lineno="7521"><highlight class="normal"></highlight></codeline>
<codeline lineno="7522"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Locale</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7523"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;multi_byte_characters(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="7524"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>&amp;locale(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value);</highlight></codeline>
<codeline lineno="7525"><highlight class="normal"></highlight></codeline>
<codeline lineno="7526"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7527"><highlight class="normal"><sp/><sp/>std::reference_wrapper&lt;class<sp/>Column&gt;<sp/>column_;</highlight></codeline>
<codeline lineno="7528"><highlight class="normal">};</highlight></codeline>
<codeline lineno="7529"><highlight class="normal"></highlight></codeline>
<codeline lineno="7530"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tabulate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7531"><highlight class="normal"></highlight></codeline>
<codeline lineno="7532"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7533"><highlight class="comment"><sp/><sp/>__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>___.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__</highlight></codeline>
<codeline lineno="7534"><highlight class="comment">_/<sp/><sp/>|______<sp/>\_<sp/>|__<sp/><sp/>__<sp/>__|<sp/><sp/>|<sp/>_____<sp/>_/<sp/><sp/>|_<sp/><sp/>____</highlight></codeline>
<codeline lineno="7535"><highlight class="comment">\<sp/><sp/><sp/>__\__<sp/><sp/>\<sp/>|<sp/>__<sp/>\|<sp/><sp/>|<sp/><sp/>\<sp/><sp/>|<sp/>\__<sp/><sp/>\\<sp/><sp/><sp/>__\/<sp/>__<sp/>\</highlight></codeline>
<codeline lineno="7536"><highlight class="comment"><sp/>|<sp/><sp/>|<sp/><sp/>/<sp/>__<sp/>\|<sp/>\_\<sp/>\<sp/><sp/>|<sp/><sp/>/<sp/><sp/>|__/<sp/>__<sp/>\|<sp/><sp/>|<sp/>\<sp/><sp/>___/</highlight></codeline>
<codeline lineno="7537"><highlight class="comment"><sp/>|__|<sp/>(____<sp/><sp/>/___<sp/><sp/>/____/|____(____<sp/><sp/>/__|<sp/><sp/>\___<sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="7538"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/</highlight></codeline>
<codeline lineno="7539"><highlight class="comment">Table<sp/>Maker<sp/>for<sp/>Modern<sp/>C++</highlight></codeline>
<codeline lineno="7540"><highlight class="comment">https://github.com/p-ranav/tabulate</highlight></codeline>
<codeline lineno="7541"><highlight class="comment"></highlight></codeline>
<codeline lineno="7542"><highlight class="comment">Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>&lt;http://opensource.org/licenses/MIT&gt;.</highlight></codeline>
<codeline lineno="7543"><highlight class="comment">SPDX-License-Identifier:<sp/>MIT</highlight></codeline>
<codeline lineno="7544"><highlight class="comment">Copyright<sp/>(c)<sp/>2019<sp/>Pranav<sp/>Srinivas<sp/>Kumar<sp/>&lt;pranav.srinivas.kumar@gmail.com&gt;.</highlight></codeline>
<codeline lineno="7545"><highlight class="comment"></highlight></codeline>
<codeline lineno="7546"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/><sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/><sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="7547"><highlight class="comment">of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/><sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="7548"><highlight class="comment">in<sp/>the<sp/>Software<sp/><sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/><sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="7549"><highlight class="comment">to<sp/><sp/>use,<sp/>copy,<sp/><sp/>modify,<sp/>merge,<sp/><sp/>publish,<sp/>distribute,<sp/><sp/>sublicense,<sp/>and/or<sp/><sp/>sell</highlight></codeline>
<codeline lineno="7550"><highlight class="comment">copies<sp/><sp/>of<sp/><sp/>the<sp/>Software,<sp/><sp/>and<sp/><sp/>to<sp/><sp/>permit<sp/>persons<sp/><sp/>to<sp/><sp/>whom<sp/><sp/>the<sp/>Software<sp/><sp/>is</highlight></codeline>
<codeline lineno="7551"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="7552"><highlight class="comment"></highlight></codeline>
<codeline lineno="7553"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="7554"><highlight class="comment">copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="7555"><highlight class="comment"></highlight></codeline>
<codeline lineno="7556"><highlight class="comment">THE<sp/>SOFTWARE<sp/><sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/><sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/><sp/>OF<sp/>ANY<sp/>KIND,<sp/><sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="7557"><highlight class="comment">IMPLIED,<sp/><sp/>INCLUDING<sp/>BUT<sp/><sp/>NOT<sp/><sp/>LIMITED<sp/>TO<sp/><sp/>THE<sp/><sp/>WARRANTIES<sp/>OF<sp/><sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="7558"><highlight class="comment">FITNESS<sp/>FOR<sp/><sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/><sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="7559"><highlight class="comment">AUTHORS<sp/><sp/>OR<sp/>COPYRIGHT<sp/><sp/>HOLDERS<sp/><sp/>BE<sp/><sp/>LIABLE<sp/>FOR<sp/><sp/>ANY<sp/><sp/>CLAIM,<sp/><sp/>DAMAGES<sp/>OR<sp/><sp/>OTHER</highlight></codeline>
<codeline lineno="7560"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/><sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="7561"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/><sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="7562"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="7563"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7564"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7565"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7566"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7567"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7568"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7569"><highlight class="normal"></highlight></codeline>
<codeline lineno="7570"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;=<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7571"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;optional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7572"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::optional;</highlight></codeline>
<codeline lineno="7573"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7574"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/optional_lite.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7575"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">nonstd::optional</ref>;</highlight></codeline>
<codeline lineno="7576"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7577"><highlight class="normal"></highlight></codeline>
<codeline lineno="7578"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7579"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/cell.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7580"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/column_format.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7581"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7582"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7583"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7584"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7585"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7586"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7587"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7588"><highlight class="normal"></highlight></codeline>
<codeline lineno="7589"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tabulate<sp/>{</highlight></codeline>
<codeline lineno="7590"><highlight class="normal"></highlight></codeline>
<codeline lineno="7591"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Column<sp/>{</highlight></codeline>
<codeline lineno="7592"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Column(std::shared_ptr&lt;class<sp/>TableInternal&gt;<sp/>parent)<sp/>:<sp/>parent_(parent)<sp/>{}</highlight></codeline>
<codeline lineno="7594"><highlight class="normal"></highlight></codeline>
<codeline lineno="7595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_cell(Cell<sp/>&amp;cell)<sp/>{<sp/>cells_.push_back(cell);<sp/>}</highlight></codeline>
<codeline lineno="7596"><highlight class="normal"></highlight></codeline>
<codeline lineno="7597"><highlight class="normal"><sp/><sp/>Cell<sp/>&amp;operator[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cells_[index];<sp/>}</highlight></codeline>
<codeline lineno="7598"><highlight class="normal"></highlight></codeline>
<codeline lineno="7599"><highlight class="normal"><sp/><sp/>std::vector&lt;std::reference_wrapper&lt;Cell&gt;&gt;<sp/>cells()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cells_;<sp/>}</highlight></codeline>
<codeline lineno="7600"><highlight class="normal"></highlight></codeline>
<codeline lineno="7601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cells_.size();<sp/>}</highlight></codeline>
<codeline lineno="7602"><highlight class="normal"></highlight></codeline>
<codeline lineno="7603"><highlight class="normal"><sp/><sp/>ColumnFormat<sp/>format()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ColumnFormat(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="7604"><highlight class="normal"></highlight></codeline>
<codeline lineno="7605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">CellIterator<sp/>{</highlight></codeline>
<codeline lineno="7606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>CellIterator(std::vector&lt;std::reference_wrapper&lt;Cell&gt;&gt;::iterator<sp/>ptr)<sp/>:<sp/>ptr(ptr)<sp/>{}</highlight></codeline>
<codeline lineno="7608"><highlight class="normal"></highlight></codeline>
<codeline lineno="7609"><highlight class="normal"><sp/><sp/><sp/><sp/>CellIterator<sp/>operator++()<sp/>{</highlight></codeline>
<codeline lineno="7610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++ptr;</highlight></codeline>
<codeline lineno="7611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CellIterator<sp/>&amp;other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr<sp/>!=<sp/>other.ptr;<sp/>}</highlight></codeline>
<codeline lineno="7614"><highlight class="normal"><sp/><sp/><sp/><sp/>Cell<sp/>&amp;operator*()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*ptr;<sp/>}</highlight></codeline>
<codeline lineno="7615"><highlight class="normal"></highlight></codeline>
<codeline lineno="7616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7617"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::reference_wrapper&lt;Cell&gt;&gt;::iterator<sp/>ptr;</highlight></codeline>
<codeline lineno="7618"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="7619"><highlight class="normal"></highlight></codeline>
<codeline lineno="7620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin()<sp/>-&gt;<sp/>CellIterator<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CellIterator(cells_.begin());<sp/>}</highlight></codeline>
<codeline lineno="7621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end()<sp/>-&gt;<sp/>CellIterator<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CellIterator(cells_.end());<sp/>}</highlight></codeline>
<codeline lineno="7622"><highlight class="normal"></highlight></codeline>
<codeline lineno="7623"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ColumnFormat;</highlight></codeline>
<codeline lineno="7625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Printer;</highlight></codeline>
<codeline lineno="7626"><highlight class="normal"></highlight></codeline>
<codeline lineno="7627"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>column<sp/>width<sp/>as<sp/>configured</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7628"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>each<sp/>cell<sp/>in<sp/>the<sp/>column,<sp/>check<sp/>the<sp/>cell.format.width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7629"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>property<sp/>and<sp/>return<sp/>the<sp/>largest<sp/>configured<sp/>column<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7630"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>used<sp/>to<sp/>ensure<sp/>that<sp/>all<sp/>cells<sp/>in<sp/>a<sp/>column<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7631"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>aligned<sp/>when<sp/>printing<sp/>the<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>get_configured_width()<sp/>{</highlight></codeline>
<codeline lineno="7633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>result{0};</highlight></codeline>
<codeline lineno="7634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>cells_[i];</highlight></codeline>
<codeline lineno="7636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format<sp/>=<sp/>cell.get().format();</highlight></codeline>
<codeline lineno="7637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format.width_.has_value())</highlight></codeline>
<codeline lineno="7638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>std::max(result,<sp/>*format.width_);</highlight></codeline>
<codeline lineno="7639"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7641"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7642"><highlight class="normal"></highlight></codeline>
<codeline lineno="7643"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Computes<sp/>the<sp/>width<sp/>of<sp/>the<sp/>column<sp/>based<sp/>on<sp/>cell<sp/>contents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7644"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>configured<sp/>cell<sp/>padding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7645"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>each<sp/>cell,<sp/>compute<sp/>padding_left<sp/>+<sp/>cell_contents<sp/>+<sp/>padding_right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7646"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>return<sp/>the<sp/>largest<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7647"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7648"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>useful<sp/>when<sp/>no<sp/>cell.format.width<sp/>is<sp/>configured</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7649"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>get_configured_width()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7650"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>If<sp/>this<sp/>returns<sp/>0,<sp/>then<sp/>use<sp/>get_computed_width()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>get_computed_width()<sp/>{</highlight></codeline>
<codeline lineno="7652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>result{0};</highlight></codeline>
<codeline lineno="7653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>std::max(result,<sp/>get_cell_width(i));</highlight></codeline>
<codeline lineno="7655"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7657"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7658"><highlight class="normal"></highlight></codeline>
<codeline lineno="7659"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>padding_left<sp/>+<sp/>cell_contents.size()<sp/>+<sp/>padding_right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7660"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>a<sp/>given<sp/>cell<sp/>in<sp/>the<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>get_cell_width(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cell_index)<sp/>{</highlight></codeline>
<codeline lineno="7662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>result{0};</highlight></codeline>
<codeline lineno="7663"><highlight class="normal"><sp/><sp/><sp/><sp/>Cell<sp/>&amp;cell<sp/>=<sp/>cells_[cell_index].get();</highlight></codeline>
<codeline lineno="7664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format<sp/>=<sp/>cell.format();</highlight></codeline>
<codeline lineno="7665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format.padding_left_.has_value())</highlight></codeline>
<codeline lineno="7666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>*format.padding_left_;</highlight></codeline>
<codeline lineno="7667"><highlight class="normal"></highlight></codeline>
<codeline lineno="7668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>input<sp/>text<sp/>has<sp/>newlines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>text<sp/>=<sp/>cell.get_text();</highlight></codeline>
<codeline lineno="7670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>split_lines<sp/>=<sp/>Format::split_lines(text,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/>cell.locale(),</highlight></codeline>
<codeline lineno="7671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.is_multi_byte_character_support_enabled());</highlight></codeline>
<codeline lineno="7672"><highlight class="normal"></highlight></codeline>
<codeline lineno="7673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>are<sp/>no<sp/>newlines<sp/>in<sp/>input,<sp/>set<sp/>column_width<sp/>=<sp/>text.size()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(split_lines.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="7675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>cell.size();</highlight></codeline>
<codeline lineno="7676"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>newlines<sp/>in<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>widest<sp/>substring<sp/>in<sp/>input<sp/>and<sp/>use<sp/>this<sp/>as<sp/>column_width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>widest_sub_string_size{0};</highlight></codeline>
<codeline lineno="7680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;line<sp/>:<sp/>split_lines)</highlight></codeline>
<codeline lineno="7681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get_sequence_length(line,<sp/>cell.locale(),</highlight></codeline>
<codeline lineno="7682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.is_multi_byte_character_support_enabled())<sp/>&gt;</highlight></codeline>
<codeline lineno="7683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>widest_sub_string_size)</highlight></codeline>
<codeline lineno="7684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>widest_sub_string_size<sp/>=<sp/>get_sequence_length(</highlight></codeline>
<codeline lineno="7685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line,<sp/>cell.locale(),<sp/>cell.is_multi_byte_character_support_enabled());</highlight></codeline>
<codeline lineno="7686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>widest_sub_string_size;</highlight></codeline>
<codeline lineno="7687"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7688"><highlight class="normal"></highlight></codeline>
<codeline lineno="7689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format.padding_right_.has_value())</highlight></codeline>
<codeline lineno="7690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>*format.padding_right_;</highlight></codeline>
<codeline lineno="7691"><highlight class="normal"></highlight></codeline>
<codeline lineno="7692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="7693"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7694"><highlight class="normal"></highlight></codeline>
<codeline lineno="7695"><highlight class="normal"><sp/><sp/>std::vector&lt;std::reference_wrapper&lt;Cell&gt;&gt;<sp/>cells_;</highlight></codeline>
<codeline lineno="7696"><highlight class="normal"><sp/><sp/>std::weak_ptr&lt;class<sp/>TableInternal&gt;<sp/>parent_;</highlight></codeline>
<codeline lineno="7697"><highlight class="normal">};</highlight></codeline>
<codeline lineno="7698"><highlight class="normal"></highlight></codeline>
<codeline lineno="7699"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::width(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7701"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().width(value);</highlight></codeline>
<codeline lineno="7702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7703"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7704"><highlight class="normal"></highlight></codeline>
<codeline lineno="7705"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::height(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7707"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().height(value);</highlight></codeline>
<codeline lineno="7708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7710"><highlight class="normal"></highlight></codeline>
<codeline lineno="7711"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::padding(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7713"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().padding(value);</highlight></codeline>
<codeline lineno="7714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7716"><highlight class="normal"></highlight></codeline>
<codeline lineno="7717"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::padding_left(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7719"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().padding_left(value);</highlight></codeline>
<codeline lineno="7720"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7722"><highlight class="normal"></highlight></codeline>
<codeline lineno="7723"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::padding_right(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7725"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().padding_right(value);</highlight></codeline>
<codeline lineno="7726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7728"><highlight class="normal"></highlight></codeline>
<codeline lineno="7729"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::padding_top(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7731"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().padding_top(value);</highlight></codeline>
<codeline lineno="7732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7733"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7734"><highlight class="normal"></highlight></codeline>
<codeline lineno="7735"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::padding_bottom(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7737"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().padding_bottom(value);</highlight></codeline>
<codeline lineno="7738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7739"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7740"><highlight class="normal"></highlight></codeline>
<codeline lineno="7741"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::border(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="7742"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7743"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().border(value);</highlight></codeline>
<codeline lineno="7744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7746"><highlight class="normal"></highlight></codeline>
<codeline lineno="7747"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::border_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7749"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().border_color(value);</highlight></codeline>
<codeline lineno="7750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7752"><highlight class="normal"></highlight></codeline>
<codeline lineno="7753"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::border_background_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7755"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().border_background_color(value);</highlight></codeline>
<codeline lineno="7756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7758"><highlight class="normal"></highlight></codeline>
<codeline lineno="7759"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::border_left(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="7760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7761"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().border_left(value);</highlight></codeline>
<codeline lineno="7762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7764"><highlight class="normal"></highlight></codeline>
<codeline lineno="7765"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::border_left_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7767"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().border_left_color(value);</highlight></codeline>
<codeline lineno="7768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7770"><highlight class="normal"></highlight></codeline>
<codeline lineno="7771"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::border_left_background_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7773"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().border_left_background_color(value);</highlight></codeline>
<codeline lineno="7774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7775"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7776"><highlight class="normal"></highlight></codeline>
<codeline lineno="7777"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::border_right(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="7778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7779"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().border_right(value);</highlight></codeline>
<codeline lineno="7780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7782"><highlight class="normal"></highlight></codeline>
<codeline lineno="7783"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::border_right_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7785"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().border_right_color(value);</highlight></codeline>
<codeline lineno="7786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7787"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7788"><highlight class="normal"></highlight></codeline>
<codeline lineno="7789"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::border_right_background_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7791"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().border_right_background_color(value);</highlight></codeline>
<codeline lineno="7792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7794"><highlight class="normal"></highlight></codeline>
<codeline lineno="7795"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::border_top(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="7796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7797"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().border_top(value);</highlight></codeline>
<codeline lineno="7798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7800"><highlight class="normal"></highlight></codeline>
<codeline lineno="7801"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::border_top_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7803"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().border_top_color(value);</highlight></codeline>
<codeline lineno="7804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7806"><highlight class="normal"></highlight></codeline>
<codeline lineno="7807"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::border_top_background_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7809"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().border_top_background_color(value);</highlight></codeline>
<codeline lineno="7810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7811"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7812"><highlight class="normal"></highlight></codeline>
<codeline lineno="7813"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::border_bottom(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="7814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7815"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().border_bottom(value);</highlight></codeline>
<codeline lineno="7816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7818"><highlight class="normal"></highlight></codeline>
<codeline lineno="7819"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::border_bottom_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7821"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().border_bottom_color(value);</highlight></codeline>
<codeline lineno="7822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7824"><highlight class="normal"></highlight></codeline>
<codeline lineno="7825"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::border_bottom_background_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7827"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().border_bottom_background_color(value);</highlight></codeline>
<codeline lineno="7828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7830"><highlight class="normal"></highlight></codeline>
<codeline lineno="7831"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::corner(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="7832"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7833"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().corner(value);</highlight></codeline>
<codeline lineno="7834"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7835"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7836"><highlight class="normal"></highlight></codeline>
<codeline lineno="7837"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::corner_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7838"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7839"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().corner_color(value);</highlight></codeline>
<codeline lineno="7840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7842"><highlight class="normal"></highlight></codeline>
<codeline lineno="7843"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::corner_background_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7844"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7845"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().corner_background_color(value);</highlight></codeline>
<codeline lineno="7846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7847"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7848"><highlight class="normal"></highlight></codeline>
<codeline lineno="7849"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::column_separator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="7850"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7851"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().column_separator(value);</highlight></codeline>
<codeline lineno="7852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7853"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7854"><highlight class="normal"></highlight></codeline>
<codeline lineno="7855"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::column_separator_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7857"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().column_separator_color(value);</highlight></codeline>
<codeline lineno="7858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7859"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7860"><highlight class="normal"></highlight></codeline>
<codeline lineno="7861"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::column_separator_background_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7863"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().column_separator_background_color(value);</highlight></codeline>
<codeline lineno="7864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7866"><highlight class="normal"></highlight></codeline>
<codeline lineno="7867"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::font_align(FontAlign<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7869"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().font_align(value);</highlight></codeline>
<codeline lineno="7870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7872"><highlight class="normal"></highlight></codeline>
<codeline lineno="7873"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::font_style(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;FontStyle&gt;<sp/>&amp;style)<sp/>{</highlight></codeline>
<codeline lineno="7874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7875"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().font_style(style);</highlight></codeline>
<codeline lineno="7876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7878"><highlight class="normal"></highlight></codeline>
<codeline lineno="7879"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::font_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7881"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().font_color(value);</highlight></codeline>
<codeline lineno="7882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7884"><highlight class="normal"></highlight></codeline>
<codeline lineno="7885"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::font_background_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7887"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().font_background_color(value);</highlight></codeline>
<codeline lineno="7888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7890"><highlight class="normal"></highlight></codeline>
<codeline lineno="7891"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7893"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().color(value);</highlight></codeline>
<codeline lineno="7894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7895"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7896"><highlight class="normal"></highlight></codeline>
<codeline lineno="7897"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::background_color(Color<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7899"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().background_color(value);</highlight></codeline>
<codeline lineno="7900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7901"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7902"><highlight class="normal"></highlight></codeline>
<codeline lineno="7903"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::multi_byte_characters(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="7904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7905"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().multi_byte_characters(value);</highlight></codeline>
<codeline lineno="7906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7908"><highlight class="normal"></highlight></codeline>
<codeline lineno="7909"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ColumnFormat<sp/>&amp;ColumnFormat::locale(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="7910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>column_.get().cells_)</highlight></codeline>
<codeline lineno="7911"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.get().format().locale(value);</highlight></codeline>
<codeline lineno="7912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7913"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7914"><highlight class="normal"></highlight></codeline>
<codeline lineno="7915"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tabulate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7916"><highlight class="normal"></highlight></codeline>
<codeline lineno="7917"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7918"><highlight class="comment"><sp/><sp/>__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>___.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__</highlight></codeline>
<codeline lineno="7919"><highlight class="comment">_/<sp/><sp/>|______<sp/>\_<sp/>|__<sp/><sp/>__<sp/>__|<sp/><sp/>|<sp/>_____<sp/>_/<sp/><sp/>|_<sp/><sp/>____</highlight></codeline>
<codeline lineno="7920"><highlight class="comment">\<sp/><sp/><sp/>__\__<sp/><sp/>\<sp/>|<sp/>__<sp/>\|<sp/><sp/>|<sp/><sp/>\<sp/><sp/>|<sp/>\__<sp/><sp/>\\<sp/><sp/><sp/>__\/<sp/>__<sp/>\</highlight></codeline>
<codeline lineno="7921"><highlight class="comment"><sp/>|<sp/><sp/>|<sp/><sp/>/<sp/>__<sp/>\|<sp/>\_\<sp/>\<sp/><sp/>|<sp/><sp/>/<sp/><sp/>|__/<sp/>__<sp/>\|<sp/><sp/>|<sp/>\<sp/><sp/>___/</highlight></codeline>
<codeline lineno="7922"><highlight class="comment"><sp/>|__|<sp/>(____<sp/><sp/>/___<sp/><sp/>/____/|____(____<sp/><sp/>/__|<sp/><sp/>\___<sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="7923"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/</highlight></codeline>
<codeline lineno="7924"><highlight class="comment">Table<sp/>Maker<sp/>for<sp/>Modern<sp/>C++</highlight></codeline>
<codeline lineno="7925"><highlight class="comment">https://github.com/p-ranav/tabulate</highlight></codeline>
<codeline lineno="7926"><highlight class="comment"></highlight></codeline>
<codeline lineno="7927"><highlight class="comment">Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>&lt;http://opensource.org/licenses/MIT&gt;.</highlight></codeline>
<codeline lineno="7928"><highlight class="comment">SPDX-License-Identifier:<sp/>MIT</highlight></codeline>
<codeline lineno="7929"><highlight class="comment">Copyright<sp/>(c)<sp/>2019<sp/>Pranav<sp/>Srinivas<sp/>Kumar<sp/>&lt;pranav.srinivas.kumar@gmail.com&gt;.</highlight></codeline>
<codeline lineno="7930"><highlight class="comment"></highlight></codeline>
<codeline lineno="7931"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/><sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/><sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="7932"><highlight class="comment">of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/><sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="7933"><highlight class="comment">in<sp/>the<sp/>Software<sp/><sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/><sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="7934"><highlight class="comment">to<sp/><sp/>use,<sp/>copy,<sp/><sp/>modify,<sp/>merge,<sp/><sp/>publish,<sp/>distribute,<sp/><sp/>sublicense,<sp/>and/or<sp/><sp/>sell</highlight></codeline>
<codeline lineno="7935"><highlight class="comment">copies<sp/><sp/>of<sp/><sp/>the<sp/>Software,<sp/><sp/>and<sp/><sp/>to<sp/><sp/>permit<sp/>persons<sp/><sp/>to<sp/><sp/>whom<sp/><sp/>the<sp/>Software<sp/><sp/>is</highlight></codeline>
<codeline lineno="7936"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="7937"><highlight class="comment"></highlight></codeline>
<codeline lineno="7938"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="7939"><highlight class="comment">copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="7940"><highlight class="comment"></highlight></codeline>
<codeline lineno="7941"><highlight class="comment">THE<sp/>SOFTWARE<sp/><sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/><sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/><sp/>OF<sp/>ANY<sp/>KIND,<sp/><sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="7942"><highlight class="comment">IMPLIED,<sp/><sp/>INCLUDING<sp/>BUT<sp/><sp/>NOT<sp/><sp/>LIMITED<sp/>TO<sp/><sp/>THE<sp/><sp/>WARRANTIES<sp/>OF<sp/><sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="7943"><highlight class="comment">FITNESS<sp/>FOR<sp/><sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/><sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="7944"><highlight class="comment">AUTHORS<sp/><sp/>OR<sp/>COPYRIGHT<sp/><sp/>HOLDERS<sp/><sp/>BE<sp/><sp/>LIABLE<sp/>FOR<sp/><sp/>ANY<sp/><sp/>CLAIM,<sp/><sp/>DAMAGES<sp/>OR<sp/><sp/>OTHER</highlight></codeline>
<codeline lineno="7945"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/><sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="7946"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/><sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="7947"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="7948"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7949"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7950"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/color.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7951"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/font_style.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7952"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7953"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7954"><highlight class="normal"></highlight></codeline>
<codeline lineno="7955"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tabulate<sp/>{</highlight></codeline>
<codeline lineno="7956"><highlight class="normal"></highlight></codeline>
<codeline lineno="7957"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Printer<sp/>{</highlight></codeline>
<codeline lineno="7958"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::pair&lt;std::vector&lt;size_t&gt;,<sp/>std::vector&lt;size_t&gt;&gt;</highlight></codeline>
<codeline lineno="7960"><highlight class="normal"><sp/><sp/>compute_cell_dimensions(TableInternal<sp/>&amp;table);</highlight></codeline>
<codeline lineno="7961"><highlight class="normal"></highlight></codeline>
<codeline lineno="7962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_table(std::ostream<sp/>&amp;stream,<sp/>TableInternal<sp/>&amp;table);</highlight></codeline>
<codeline lineno="7963"><highlight class="normal"></highlight></codeline>
<codeline lineno="7964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_row_in_cell(std::ostream<sp/>&amp;stream,<sp/>TableInternal<sp/>&amp;table,</highlight></codeline>
<codeline lineno="7965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;size_t,<sp/>size_t&gt;<sp/>&amp;index,</highlight></codeline>
<codeline lineno="7966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;size_t,<sp/>size_t&gt;<sp/>&amp;dimension,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_columns,</highlight></codeline>
<codeline lineno="7967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row_index,</highlight></codeline>
<codeline lineno="7968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;splitted_cell_text);</highlight></codeline>
<codeline lineno="7969"><highlight class="normal"></highlight></codeline>
<codeline lineno="7970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>print_cell_border_top(std::ostream<sp/>&amp;stream,<sp/>TableInternal<sp/>&amp;table,</highlight></codeline>
<codeline lineno="7971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;size_t,<sp/>size_t&gt;<sp/>&amp;index,</highlight></codeline>
<codeline lineno="7972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;size_t,<sp/>size_t&gt;<sp/>&amp;dimension,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_columns);</highlight></codeline>
<codeline lineno="7973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>print_cell_border_bottom(std::ostream<sp/>&amp;stream,<sp/>TableInternal<sp/>&amp;table,</highlight></codeline>
<codeline lineno="7974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;size_t,<sp/>size_t&gt;<sp/>&amp;index,</highlight></codeline>
<codeline lineno="7975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;size_t,<sp/>size_t&gt;<sp/>&amp;dimension,</highlight></codeline>
<codeline lineno="7976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_columns);</highlight></codeline>
<codeline lineno="7977"><highlight class="normal"></highlight></codeline>
<codeline lineno="7978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply_element_style(std::ostream<sp/>&amp;stream,<sp/>Color<sp/>foreground_color,</highlight></codeline>
<codeline lineno="7979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Color<sp/>background_color,</highlight></codeline>
<codeline lineno="7980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;FontStyle&gt;<sp/>&amp;font_style)<sp/>{</highlight></codeline>
<codeline lineno="7981"><highlight class="normal"><sp/><sp/><sp/><sp/>apply_foreground_color(stream,<sp/>foreground_color);</highlight></codeline>
<codeline lineno="7982"><highlight class="normal"><sp/><sp/><sp/><sp/>apply_background_color(stream,<sp/>background_color);</highlight></codeline>
<codeline lineno="7983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;style<sp/>:<sp/>font_style)</highlight></codeline>
<codeline lineno="7984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apply_font_style(stream,<sp/>style);</highlight></codeline>
<codeline lineno="7985"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="7986"><highlight class="normal"></highlight></codeline>
<codeline lineno="7987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset_element_style(std::ostream<sp/>&amp;stream)<sp/>{<sp/>stream<sp/>&lt;&lt;<sp/>termcolor::reset;<sp/>}</highlight></codeline>
<codeline lineno="7988"><highlight class="normal"></highlight></codeline>
<codeline lineno="7989"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_content_left_aligned(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;cell_content,</highlight></codeline>
<codeline lineno="7991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Format<sp/>&amp;format,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>text_with_padding_size,</highlight></codeline>
<codeline lineno="7992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>column_width)<sp/>{</highlight></codeline>
<codeline lineno="7993"><highlight class="normal"></highlight></codeline>
<codeline lineno="7994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>font<sp/>style</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7995"><highlight class="normal"><sp/><sp/><sp/><sp/>apply_element_style(stream,<sp/>*format.font_color_,<sp/>*format.font_background_color_,</highlight></codeline>
<codeline lineno="7996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*format.font_style_);</highlight></codeline>
<codeline lineno="7997"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>cell_content;</highlight></codeline>
<codeline lineno="7998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>apply<sp/>font_style<sp/>to<sp/>the<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>the<sp/>padding.<sp/>So<sp/>calling<sp/>apply_element_style<sp/>with<sp/>font_style<sp/>=<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8000"><highlight class="normal"><sp/><sp/><sp/><sp/>reset_element_style(stream);</highlight></codeline>
<codeline lineno="8001"><highlight class="normal"><sp/><sp/><sp/><sp/>apply_element_style(stream,<sp/>*format.font_color_,<sp/>*format.font_background_color_,<sp/>{});</highlight></codeline>
<codeline lineno="8002"><highlight class="normal"></highlight></codeline>
<codeline lineno="8003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(text_with_padding_size<sp/>&lt;<sp/>column_width)<sp/>{</highlight></codeline>
<codeline lineno="8004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>(column_width<sp/>-<sp/>text_with_padding_size);<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="8005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8007"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8008"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8009"><highlight class="normal"></highlight></codeline>
<codeline lineno="8010"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_content_center_aligned(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;cell_content,</highlight></codeline>
<codeline lineno="8011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Format<sp/>&amp;format,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>text_with_padding_size,</highlight></codeline>
<codeline lineno="8012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>column_width)<sp/>{</highlight></codeline>
<codeline lineno="8013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>num_spaces<sp/>=<sp/>column_width<sp/>-<sp/>text_with_padding_size;</highlight></codeline>
<codeline lineno="8014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_spaces<sp/>%<sp/>2<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="8015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Even<sp/>spacing<sp/>on<sp/>either<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>num_spaces<sp/>/<sp/>2;<sp/>++j)</highlight></codeline>
<codeline lineno="8017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8018"><highlight class="normal"></highlight></codeline>
<codeline lineno="8019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>font<sp/>style</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apply_element_style(stream,<sp/>*format.font_color_,<sp/>*format.font_background_color_,</highlight></codeline>
<codeline lineno="8021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*format.font_style_);</highlight></codeline>
<codeline lineno="8022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>cell_content;</highlight></codeline>
<codeline lineno="8023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>apply<sp/>font_style<sp/>to<sp/>the<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>the<sp/>padding.<sp/>So<sp/>calling<sp/>apply_element_style<sp/>with<sp/>font_style<sp/>=<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reset_element_style(stream);</highlight></codeline>
<codeline lineno="8026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apply_element_style(stream,<sp/>*format.font_color_,<sp/>*format.font_background_color_,<sp/>{});</highlight></codeline>
<codeline lineno="8027"><highlight class="normal"></highlight></codeline>
<codeline lineno="8028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>num_spaces<sp/>/<sp/>2;<sp/>++j)</highlight></codeline>
<codeline lineno="8029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8030"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>num_spaces_before<sp/>=<sp/>num_spaces<sp/>/<sp/>2<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="8032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>num_spaces_before;<sp/>++j)</highlight></codeline>
<codeline lineno="8033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8034"><highlight class="normal"></highlight></codeline>
<codeline lineno="8035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>font<sp/>style</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apply_element_style(stream,<sp/>*format.font_color_,<sp/>*format.font_background_color_,</highlight></codeline>
<codeline lineno="8037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*format.font_style_);</highlight></codeline>
<codeline lineno="8038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>cell_content;</highlight></codeline>
<codeline lineno="8039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>apply<sp/>font_style<sp/>to<sp/>the<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>the<sp/>padding.<sp/>So<sp/>calling<sp/>apply_element_style<sp/>with<sp/>font_style<sp/>=<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reset_element_style(stream);</highlight></codeline>
<codeline lineno="8042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apply_element_style(stream,<sp/>*format.font_color_,<sp/>*format.font_background_color_,<sp/>{});</highlight></codeline>
<codeline lineno="8043"><highlight class="normal"></highlight></codeline>
<codeline lineno="8044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>num_spaces<sp/>-<sp/>num_spaces_before;<sp/>++j)</highlight></codeline>
<codeline lineno="8045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8046"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8047"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8048"><highlight class="normal"></highlight></codeline>
<codeline lineno="8049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_content_right_aligned(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;cell_content,</highlight></codeline>
<codeline lineno="8050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Format<sp/>&amp;format,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>text_with_padding_size,</highlight></codeline>
<codeline lineno="8051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>column_width)<sp/>{</highlight></codeline>
<codeline lineno="8052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(text_with_padding_size<sp/>&lt;<sp/>column_width)<sp/>{</highlight></codeline>
<codeline lineno="8053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>(column_width<sp/>-<sp/>text_with_padding_size);<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="8054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8056"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8057"><highlight class="normal"></highlight></codeline>
<codeline lineno="8058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>font<sp/>style</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8059"><highlight class="normal"><sp/><sp/><sp/><sp/>apply_element_style(stream,<sp/>*format.font_color_,<sp/>*format.font_background_color_,</highlight></codeline>
<codeline lineno="8060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*format.font_style_);</highlight></codeline>
<codeline lineno="8061"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>cell_content;</highlight></codeline>
<codeline lineno="8062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>apply<sp/>font_style<sp/>to<sp/>the<sp/>font</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>the<sp/>padding.<sp/>So<sp/>calling<sp/>apply_element_style<sp/>with<sp/>font_style<sp/>=<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8064"><highlight class="normal"><sp/><sp/><sp/><sp/>reset_element_style(stream);</highlight></codeline>
<codeline lineno="8065"><highlight class="normal"><sp/><sp/><sp/><sp/>apply_element_style(stream,<sp/>*format.font_color_,<sp/>*format.font_background_color_,<sp/>{});</highlight></codeline>
<codeline lineno="8066"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8067"><highlight class="normal"></highlight></codeline>
<codeline lineno="8068"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply_font_style(std::ostream<sp/>&amp;stream,<sp/>FontStyle<sp/>style)<sp/>{</highlight></codeline>
<codeline lineno="8069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(style)<sp/>{</highlight></codeline>
<codeline lineno="8070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FontStyle::bold:</highlight></codeline>
<codeline lineno="8071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::bold;</highlight></codeline>
<codeline lineno="8072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FontStyle::dark:</highlight></codeline>
<codeline lineno="8074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::dark;</highlight></codeline>
<codeline lineno="8075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FontStyle::italic:</highlight></codeline>
<codeline lineno="8077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::italic;</highlight></codeline>
<codeline lineno="8078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FontStyle::underline:</highlight></codeline>
<codeline lineno="8080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::underline;</highlight></codeline>
<codeline lineno="8081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FontStyle::blink:</highlight></codeline>
<codeline lineno="8083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::blink;</highlight></codeline>
<codeline lineno="8084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FontStyle::reverse:</highlight></codeline>
<codeline lineno="8086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::reverse;</highlight></codeline>
<codeline lineno="8087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FontStyle::concealed:</highlight></codeline>
<codeline lineno="8089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::concealed;</highlight></codeline>
<codeline lineno="8090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FontStyle::crossed:</highlight></codeline>
<codeline lineno="8092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::crossed;</highlight></codeline>
<codeline lineno="8093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8096"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8097"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8098"><highlight class="normal"></highlight></codeline>
<codeline lineno="8099"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply_foreground_color(std::ostream<sp/>&amp;stream,<sp/>Color<sp/>foreground_color)<sp/>{</highlight></codeline>
<codeline lineno="8100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(foreground_color)<sp/>{</highlight></codeline>
<codeline lineno="8101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::grey:</highlight></codeline>
<codeline lineno="8102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::grey;</highlight></codeline>
<codeline lineno="8103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::red:</highlight></codeline>
<codeline lineno="8105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::red;</highlight></codeline>
<codeline lineno="8106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::green:</highlight></codeline>
<codeline lineno="8108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::green;</highlight></codeline>
<codeline lineno="8109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::yellow:</highlight></codeline>
<codeline lineno="8111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::yellow;</highlight></codeline>
<codeline lineno="8112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::blue:</highlight></codeline>
<codeline lineno="8114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::blue;</highlight></codeline>
<codeline lineno="8115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::magenta:</highlight></codeline>
<codeline lineno="8117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::magenta;</highlight></codeline>
<codeline lineno="8118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::cyan:</highlight></codeline>
<codeline lineno="8120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::cyan;</highlight></codeline>
<codeline lineno="8121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::white:</highlight></codeline>
<codeline lineno="8123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::white;</highlight></codeline>
<codeline lineno="8124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::none:</highlight></codeline>
<codeline lineno="8126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8130"><highlight class="normal"></highlight></codeline>
<codeline lineno="8131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply_background_color(std::ostream<sp/>&amp;stream,<sp/>Color<sp/>background_color)<sp/>{</highlight></codeline>
<codeline lineno="8132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(background_color)<sp/>{</highlight></codeline>
<codeline lineno="8133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::grey:</highlight></codeline>
<codeline lineno="8134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::on_grey;</highlight></codeline>
<codeline lineno="8135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::red:</highlight></codeline>
<codeline lineno="8137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::on_red;</highlight></codeline>
<codeline lineno="8138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::green:</highlight></codeline>
<codeline lineno="8140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::on_green;</highlight></codeline>
<codeline lineno="8141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::yellow:</highlight></codeline>
<codeline lineno="8143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::on_yellow;</highlight></codeline>
<codeline lineno="8144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::blue:</highlight></codeline>
<codeline lineno="8146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::on_blue;</highlight></codeline>
<codeline lineno="8147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::magenta:</highlight></codeline>
<codeline lineno="8149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::on_magenta;</highlight></codeline>
<codeline lineno="8150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::cyan:</highlight></codeline>
<codeline lineno="8152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::on_cyan;</highlight></codeline>
<codeline lineno="8153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::white:</highlight></codeline>
<codeline lineno="8155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::on_white;</highlight></codeline>
<codeline lineno="8156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Color::none:</highlight></codeline>
<codeline lineno="8158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8162"><highlight class="normal">};</highlight></codeline>
<codeline lineno="8163"><highlight class="normal"></highlight></codeline>
<codeline lineno="8164"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tabulate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8165"><highlight class="normal"></highlight></codeline>
<codeline lineno="8166"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="8167"><highlight class="comment"><sp/><sp/>__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>___.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__</highlight></codeline>
<codeline lineno="8168"><highlight class="comment">_/<sp/><sp/>|______<sp/>\_<sp/>|__<sp/><sp/>__<sp/>__|<sp/><sp/>|<sp/>_____<sp/>_/<sp/><sp/>|_<sp/><sp/>____</highlight></codeline>
<codeline lineno="8169"><highlight class="comment">\<sp/><sp/><sp/>__\__<sp/><sp/>\<sp/>|<sp/>__<sp/>\|<sp/><sp/>|<sp/><sp/>\<sp/><sp/>|<sp/>\__<sp/><sp/>\\<sp/><sp/><sp/>__\/<sp/>__<sp/>\</highlight></codeline>
<codeline lineno="8170"><highlight class="comment"><sp/>|<sp/><sp/>|<sp/><sp/>/<sp/>__<sp/>\|<sp/>\_\<sp/>\<sp/><sp/>|<sp/><sp/>/<sp/><sp/>|__/<sp/>__<sp/>\|<sp/><sp/>|<sp/>\<sp/><sp/>___/</highlight></codeline>
<codeline lineno="8171"><highlight class="comment"><sp/>|__|<sp/>(____<sp/><sp/>/___<sp/><sp/>/____/|____(____<sp/><sp/>/__|<sp/><sp/>\___<sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="8172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/</highlight></codeline>
<codeline lineno="8173"><highlight class="comment">Table<sp/>Maker<sp/>for<sp/>Modern<sp/>C++</highlight></codeline>
<codeline lineno="8174"><highlight class="comment">https://github.com/p-ranav/tabulate</highlight></codeline>
<codeline lineno="8175"><highlight class="comment"></highlight></codeline>
<codeline lineno="8176"><highlight class="comment">Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>&lt;http://opensource.org/licenses/MIT&gt;.</highlight></codeline>
<codeline lineno="8177"><highlight class="comment">SPDX-License-Identifier:<sp/>MIT</highlight></codeline>
<codeline lineno="8178"><highlight class="comment">Copyright<sp/>(c)<sp/>2019<sp/>Pranav<sp/>Srinivas<sp/>Kumar<sp/>&lt;pranav.srinivas.kumar@gmail.com&gt;.</highlight></codeline>
<codeline lineno="8179"><highlight class="comment"></highlight></codeline>
<codeline lineno="8180"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/><sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/><sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="8181"><highlight class="comment">of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/><sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="8182"><highlight class="comment">in<sp/>the<sp/>Software<sp/><sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/><sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="8183"><highlight class="comment">to<sp/><sp/>use,<sp/>copy,<sp/><sp/>modify,<sp/>merge,<sp/><sp/>publish,<sp/>distribute,<sp/><sp/>sublicense,<sp/>and/or<sp/><sp/>sell</highlight></codeline>
<codeline lineno="8184"><highlight class="comment">copies<sp/><sp/>of<sp/><sp/>the<sp/>Software,<sp/><sp/>and<sp/><sp/>to<sp/><sp/>permit<sp/>persons<sp/><sp/>to<sp/><sp/>whom<sp/><sp/>the<sp/>Software<sp/><sp/>is</highlight></codeline>
<codeline lineno="8185"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="8186"><highlight class="comment"></highlight></codeline>
<codeline lineno="8187"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="8188"><highlight class="comment">copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="8189"><highlight class="comment"></highlight></codeline>
<codeline lineno="8190"><highlight class="comment">THE<sp/>SOFTWARE<sp/><sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/><sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/><sp/>OF<sp/>ANY<sp/>KIND,<sp/><sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="8191"><highlight class="comment">IMPLIED,<sp/><sp/>INCLUDING<sp/>BUT<sp/><sp/>NOT<sp/><sp/>LIMITED<sp/>TO<sp/><sp/>THE<sp/><sp/>WARRANTIES<sp/>OF<sp/><sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="8192"><highlight class="comment">FITNESS<sp/>FOR<sp/><sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/><sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="8193"><highlight class="comment">AUTHORS<sp/><sp/>OR<sp/>COPYRIGHT<sp/><sp/>HOLDERS<sp/><sp/>BE<sp/><sp/>LIABLE<sp/>FOR<sp/><sp/>ANY<sp/><sp/>CLAIM,<sp/><sp/>DAMAGES<sp/>OR<sp/><sp/>OTHER</highlight></codeline>
<codeline lineno="8194"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/><sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="8195"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/><sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="8196"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="8197"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8198"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8199"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8200"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8201"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/column.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8203"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/font_style.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/printer.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8205"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/row.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/termcolor.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8207"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8208"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8209"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8210"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8211"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8212"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8213"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8214"><highlight class="normal"></highlight></codeline>
<codeline lineno="8215"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tabulate<sp/>{</highlight></codeline>
<codeline lineno="8216"><highlight class="normal"></highlight></codeline>
<codeline lineno="8217"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TableInternal<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::enable_shared_from_this&lt;TableInternal&gt;<sp/>{</highlight></codeline>
<codeline lineno="8218"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;TableInternal&gt;<sp/>create()<sp/>{</highlight></codeline>
<codeline lineno="8220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>std::shared_ptr&lt;TableInternal&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TableInternal());</highlight></codeline>
<codeline lineno="8221"><highlight class="normal"><sp/><sp/><sp/><sp/>result-&gt;format_.set_defaults();</highlight></codeline>
<codeline lineno="8222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8224"><highlight class="normal"></highlight></codeline>
<codeline lineno="8225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_row(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;cells)<sp/>{</highlight></codeline>
<codeline lineno="8226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>std::make_shared&lt;Row&gt;(shared_from_this());</highlight></codeline>
<codeline lineno="8227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;c<sp/>:<sp/>cells)<sp/>{</highlight></codeline>
<codeline lineno="8228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>std::make_shared&lt;Cell&gt;(row);</highlight></codeline>
<codeline lineno="8229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cell-&gt;set_text(c);</highlight></codeline>
<codeline lineno="8230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>row-&gt;add_cell(cell);</highlight></codeline>
<codeline lineno="8231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8232"><highlight class="normal"><sp/><sp/><sp/><sp/>rows_.push_back(row);</highlight></codeline>
<codeline lineno="8233"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8234"><highlight class="normal"></highlight></codeline>
<codeline lineno="8235"><highlight class="normal"><sp/><sp/>Row<sp/>&amp;operator[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(rows_[index]);<sp/>}</highlight></codeline>
<codeline lineno="8236"><highlight class="normal"></highlight></codeline>
<codeline lineno="8237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Row<sp/>&amp;operator[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(rows_[index]);<sp/>}</highlight></codeline>
<codeline lineno="8238"><highlight class="normal"></highlight></codeline>
<codeline lineno="8239"><highlight class="normal"><sp/><sp/>Column<sp/>column(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="8240"><highlight class="normal"><sp/><sp/><sp/><sp/>Column<sp/>column(shared_from_this());</highlight></codeline>
<codeline lineno="8241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rows_.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="8242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>rows_[i];</highlight></codeline>
<codeline lineno="8243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>=<sp/>row-&gt;cell(index);</highlight></codeline>
<codeline lineno="8244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>column.add_cell(cell);</highlight></codeline>
<codeline lineno="8245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>column;</highlight></codeline>
<codeline lineno="8247"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8248"><highlight class="normal"></highlight></codeline>
<codeline lineno="8249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rows_.size();<sp/>}</highlight></codeline>
<codeline lineno="8250"><highlight class="normal"></highlight></codeline>
<codeline lineno="8251"><highlight class="normal"><sp/><sp/>std::pair&lt;size_t,<sp/>size_t&gt;<sp/>shape()<sp/>{</highlight></codeline>
<codeline lineno="8252"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;size_t,<sp/>size_t&gt;<sp/>result{0,<sp/>0};</highlight></codeline>
<codeline lineno="8253"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>stream;</highlight></codeline>
<codeline lineno="8254"><highlight class="normal"><sp/><sp/><sp/><sp/>print(stream);</highlight></codeline>
<codeline lineno="8255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>buffer<sp/>=<sp/>stream.str();</highlight></codeline>
<codeline lineno="8256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lines<sp/>=<sp/>Format::split_lines(buffer,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lines.size())<sp/>{</highlight></codeline>
<codeline lineno="8258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>{get_sequence_length(lines[0],<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>lines.size()};</highlight></codeline>
<codeline lineno="8259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8262"><highlight class="normal"></highlight></codeline>
<codeline lineno="8263"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;format()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>format_;<sp/>}</highlight></codeline>
<codeline lineno="8264"><highlight class="normal"></highlight></codeline>
<codeline lineno="8265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print(std::ostream<sp/>&amp;stream)<sp/>{<sp/>Printer::print_table(stream,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="8266"><highlight class="normal"></highlight></codeline>
<codeline lineno="8267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>estimate_num_columns()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>result{0};</highlight></codeline>
<codeline lineno="8269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size())<sp/>{</highlight></codeline>
<codeline lineno="8270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>first_row<sp/>=<sp/>operator[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(0));</highlight></codeline>
<codeline lineno="8271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>first_row.size();</highlight></codeline>
<codeline lineno="8272"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8275"><highlight class="normal"></highlight></codeline>
<codeline lineno="8276"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Table;</highlight></codeline>
<codeline lineno="8278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MarkdownExporter;</highlight></codeline>
<codeline lineno="8279"><highlight class="normal"></highlight></codeline>
<codeline lineno="8280"><highlight class="normal"><sp/><sp/>TableInternal()<sp/>{}</highlight></codeline>
<codeline lineno="8281"><highlight class="normal"><sp/><sp/>TableInternal<sp/>&amp;operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TableInternal<sp/>&amp;);</highlight></codeline>
<codeline lineno="8282"><highlight class="normal"><sp/><sp/>TableInternal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TableInternal<sp/>&amp;);</highlight></codeline>
<codeline lineno="8283"><highlight class="normal"></highlight></codeline>
<codeline lineno="8284"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Row&gt;&gt;<sp/>rows_;</highlight></codeline>
<codeline lineno="8285"><highlight class="normal"><sp/><sp/>Format<sp/>format_;</highlight></codeline>
<codeline lineno="8286"><highlight class="normal">};</highlight></codeline>
<codeline lineno="8287"><highlight class="normal"></highlight></codeline>
<codeline lineno="8288"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Format<sp/>&amp;Cell::format()<sp/>{</highlight></codeline>
<codeline lineno="8289"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Row&gt;<sp/>parent<sp/>=<sp/>parent_.lock();</highlight></codeline>
<codeline lineno="8290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!format_.has_value())<sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>cell<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8291"><highlight class="normal"><sp/><sp/><sp/><sp/>format_<sp/>=<sp/>parent-&gt;format();<sp/></highlight><highlight class="comment">//<sp/>Use<sp/>parent<sp/>row<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8292"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cell<sp/>has<sp/>formatting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Merge<sp/>cell<sp/>formatting<sp/>with<sp/>parent<sp/>row<sp/>formatting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8295"><highlight class="normal"><sp/><sp/><sp/><sp/>format_<sp/>=<sp/>Format::merge(*format_,<sp/>parent-&gt;format());</highlight></codeline>
<codeline lineno="8296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*format_;</highlight></codeline>
<codeline lineno="8298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8299"><highlight class="normal"></highlight></codeline>
<codeline lineno="8300"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Cell::is_multi_byte_character_support_enabled()<sp/>{</highlight></codeline>
<codeline lineno="8301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*format().multi_byte_characters_);</highlight></codeline>
<codeline lineno="8302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8303"><highlight class="normal"></highlight></codeline>
<codeline lineno="8304"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Format<sp/>&amp;Row::format()<sp/>{</highlight></codeline>
<codeline lineno="8305"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;TableInternal&gt;<sp/>parent<sp/>=<sp/>parent_.lock();</highlight></codeline>
<codeline lineno="8306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!format_.has_value())<sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>row<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8307"><highlight class="normal"><sp/><sp/><sp/><sp/>format_<sp/>=<sp/>parent-&gt;format();<sp/></highlight><highlight class="comment">//<sp/>Use<sp/>parent<sp/>table<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8308"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Row<sp/>has<sp/>formatting<sp/>rules</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Merge<sp/>with<sp/>parent<sp/>table<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8311"><highlight class="normal"><sp/><sp/><sp/><sp/>format_<sp/>=<sp/>Format::merge(*format_,<sp/>parent-&gt;format());</highlight></codeline>
<codeline lineno="8312"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*format_;</highlight></codeline>
<codeline lineno="8314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8315"><highlight class="normal"></highlight></codeline>
<codeline lineno="8316"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::pair&lt;std::vector&lt;size_t&gt;,<sp/>std::vector&lt;size_t&gt;&gt;</highlight></codeline>
<codeline lineno="8317"><highlight class="normal">Printer::compute_cell_dimensions(TableInternal<sp/>&amp;table)<sp/>{</highlight></codeline>
<codeline lineno="8318"><highlight class="normal"><sp/><sp/>std::pair&lt;std::vector&lt;size_t&gt;,<sp/>std::vector&lt;size_t&gt;&gt;<sp/>result;</highlight></codeline>
<codeline lineno="8319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_rows<sp/>=<sp/>table.size();</highlight></codeline>
<codeline lineno="8320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_columns<sp/>=<sp/>table.estimate_num_columns();</highlight></codeline>
<codeline lineno="8321"><highlight class="normal"></highlight></codeline>
<codeline lineno="8322"><highlight class="normal"><sp/><sp/>std::vector&lt;size_t&gt;<sp/>row_heights,<sp/>column_widths{};</highlight></codeline>
<codeline lineno="8323"><highlight class="normal"></highlight></codeline>
<codeline lineno="8324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_columns;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="8325"><highlight class="normal"><sp/><sp/><sp/><sp/>Column<sp/>column<sp/>=<sp/>table.column(i);</highlight></codeline>
<codeline lineno="8326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>configured_width<sp/>=<sp/>column.get_configured_width();</highlight></codeline>
<codeline lineno="8327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>computed_width<sp/>=<sp/>column.get_computed_width();</highlight></codeline>
<codeline lineno="8328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(configured_width<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="8329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>column_widths.push_back(configured_width);</highlight></codeline>
<codeline lineno="8330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>column_widths.push_back(computed_width);</highlight></codeline>
<codeline lineno="8332"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8333"><highlight class="normal"></highlight></codeline>
<codeline lineno="8334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_rows;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="8335"><highlight class="normal"><sp/><sp/><sp/><sp/>Row<sp/>row<sp/>=<sp/>table[i];</highlight></codeline>
<codeline lineno="8336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>configured_height<sp/>=<sp/>row.get_configured_height();</highlight></codeline>
<codeline lineno="8337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>computed_height<sp/>=<sp/>row.get_computed_height(column_widths);</highlight></codeline>
<codeline lineno="8338"><highlight class="normal"></highlight></codeline>
<codeline lineno="8339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>Unlike<sp/>column<sp/>width,<sp/>row<sp/>height<sp/>is<sp/>calculated<sp/>as<sp/>the<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>b/w<sp/>configured<sp/>height<sp/>and<sp/>computed<sp/>height</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>means<sp/>that<sp/>.width()<sp/>has<sp/>higher<sp/>precedence<sp/>than<sp/>.height()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>both<sp/>are<sp/>configured<sp/>by<sp/>the<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Maybe<sp/>this<sp/>can<sp/>be<sp/>configured?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>such<sp/>a<sp/>configuration<sp/>is<sp/>exposed,<sp/>i.e.,<sp/>prefer<sp/>height<sp/>over<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>the<sp/>logic<sp/>will<sp/>be<sp/>reversed,<sp/>i.e.,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>column_widths.push_back(std::max(configured_width,<sp/>computed_width))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>row_height<sp/>=<sp/>configured_height<sp/>if<sp/>!=<sp/>0<sp/>else<sp/>computed_height</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8350"><highlight class="normal"></highlight></codeline>
<codeline lineno="8351"><highlight class="normal"><sp/><sp/><sp/><sp/>row_heights.push_back(std::max(configured_height,<sp/>computed_height));</highlight></codeline>
<codeline lineno="8352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8353"><highlight class="normal"></highlight></codeline>
<codeline lineno="8354"><highlight class="normal"><sp/><sp/>result.first<sp/>=<sp/>row_heights;</highlight></codeline>
<codeline lineno="8355"><highlight class="normal"><sp/><sp/>result.second<sp/>=<sp/>column_widths;</highlight></codeline>
<codeline lineno="8356"><highlight class="normal"></highlight></codeline>
<codeline lineno="8357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8359"><highlight class="normal"></highlight></codeline>
<codeline lineno="8360"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Printer::print_table(std::ostream<sp/>&amp;stream,<sp/>TableInternal<sp/>&amp;table)<sp/>{</highlight></codeline>
<codeline lineno="8361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_rows<sp/>=<sp/>table.size();</highlight></codeline>
<codeline lineno="8362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_columns<sp/>=<sp/>table.estimate_num_columns();</highlight></codeline>
<codeline lineno="8363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dimensions<sp/>=<sp/>compute_cell_dimensions(table);</highlight></codeline>
<codeline lineno="8364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>row_heights<sp/>=<sp/>dimensions.first;</highlight></codeline>
<codeline lineno="8365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>column_widths<sp/>=<sp/>dimensions.second;</highlight></codeline>
<codeline lineno="8366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>splitted_cells_text<sp/>=<sp/>std::vector&lt;std::vector&lt;std::vector&lt;std::string&gt;&gt;&gt;(</highlight></codeline>
<codeline lineno="8367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_rows,<sp/>std::vector&lt;std::vector&lt;std::string&gt;&gt;(num_columns,<sp/>std::vector&lt;std::string&gt;{}));</highlight></codeline>
<codeline lineno="8368"><highlight class="normal"></highlight></codeline>
<codeline lineno="8369"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pre-compute<sp/>the<sp/>cells&apos;<sp/>content<sp/>and<sp/>split<sp/>them<sp/>into<sp/>lines<sp/>before<sp/>actually</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>iterating<sp/>the<sp/>cells.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_rows;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="8372"><highlight class="normal"><sp/><sp/><sp/><sp/>Row<sp/>row<sp/>=<sp/>table[i];</highlight></codeline>
<codeline lineno="8373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>num_columns;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="8374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Cell<sp/>cell<sp/>=<sp/>row.cell(j);</highlight></codeline>
<codeline lineno="8375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;text<sp/>=<sp/>cell.get_text();</highlight></codeline>
<codeline lineno="8376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding_left<sp/>=<sp/>*cell.format().padding_left_;</highlight></codeline>
<codeline lineno="8377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding_right<sp/>=<sp/>*cell.format().padding_right_;</highlight></codeline>
<codeline lineno="8378"><highlight class="normal"></highlight></codeline>
<codeline lineno="8379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>input<sp/>text<sp/>has<sp/>embedded<sp/>\n<sp/>that<sp/>are<sp/>to<sp/>be<sp/>respected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_new_line<sp/>=<sp/>text.find_first_of(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos;</highlight></codeline>
<codeline lineno="8381"><highlight class="normal"></highlight></codeline>
<codeline lineno="8382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(has_new_line)<sp/>{</highlight></codeline>
<codeline lineno="8383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Respect<sp/>to<sp/>the<sp/>embedded<sp/>&apos;\n&apos;<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splitted_cells_text[i][j]<sp/>=<sp/>Format::split_lines(</highlight></codeline>
<codeline lineno="8385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/>cell.locale(),<sp/>cell.is_multi_byte_character_support_enabled());</highlight></codeline>
<codeline lineno="8386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>are<sp/>no<sp/>embedded<sp/>\n<sp/>characters,<sp/>then<sp/>apply<sp/>word<sp/>wrap.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configured<sp/>column<sp/>width<sp/>cannot<sp/>be<sp/>lower<sp/>than<sp/>(padding_left<sp/>+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>padding_right)<sp/>This<sp/>is<sp/>a<sp/>bad<sp/>configuration<sp/>E.g.,<sp/>the<sp/>user<sp/>is<sp/>trying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>force<sp/>the<sp/>column<sp/>width<sp/>to<sp/>be<sp/>5<sp/>when<sp/>padding_left<sp/>and<sp/>padding_right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>each<sp/>configured<sp/>to<sp/>3<sp/>(padding_left<sp/>+<sp/>padding_right)<sp/>=<sp/>6<sp/>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>column_width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>content_width<sp/>=<sp/>column_widths[j]<sp/>&gt;<sp/>padding_left<sp/>+<sp/>padding_right</highlight></codeline>
<codeline lineno="8395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>column_widths[j]<sp/>-<sp/>padding_left<sp/>-<sp/>padding_right</highlight></codeline>
<codeline lineno="8396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>column_widths[j];</highlight></codeline>
<codeline lineno="8397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>word_wrapped_text<sp/>=<sp/>Format::word_wrap(text,<sp/>content_width,<sp/>cell.locale(),</highlight></codeline>
<codeline lineno="8398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.is_multi_byte_character_support_enabled());</highlight></codeline>
<codeline lineno="8399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splitted_cells_text[i][j]<sp/>=<sp/>Format::split_lines(</highlight></codeline>
<codeline lineno="8400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word_wrapped_text,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/>cell.locale(),<sp/>cell.is_multi_byte_character_support_enabled());</highlight></codeline>
<codeline lineno="8401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8403"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8404"><highlight class="normal"></highlight></codeline>
<codeline lineno="8405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>each<sp/>row,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_rows;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="8407"><highlight class="normal"></highlight></codeline>
<codeline lineno="8408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>top<sp/>border</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>border_top_printed{</highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="8410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>num_columns;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="8411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>border_top_printed<sp/>&amp;=<sp/>print_cell_border_top(stream,<sp/>table,<sp/>{i,<sp/>j},</highlight></codeline>
<codeline lineno="8412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{row_heights[i],<sp/>column_widths[j]},<sp/>num_columns);</highlight></codeline>
<codeline lineno="8413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(border_top_printed)</highlight></codeline>
<codeline lineno="8415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::reset<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8416"><highlight class="normal"></highlight></codeline>
<codeline lineno="8417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>row<sp/>contents<sp/>with<sp/>word<sp/>wrapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>row_heights[i];<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="8419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>num_columns;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="8420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_row_in_cell(stream,<sp/>table,<sp/>{i,<sp/>j},<sp/>{row_heights[i],<sp/>column_widths[j]},<sp/>num_columns,<sp/>k,</highlight></codeline>
<codeline lineno="8421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splitted_cells_text[i][j]);</highlight></codeline>
<codeline lineno="8422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>+<sp/>1<sp/>&lt;<sp/>row_heights[i])</highlight></codeline>
<codeline lineno="8424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::reset<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8426"><highlight class="normal"></highlight></codeline>
<codeline lineno="8427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1<sp/>==<sp/>num_rows)<sp/>{</highlight></codeline>
<codeline lineno="8428"><highlight class="normal"></highlight></codeline>
<codeline lineno="8429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>there<sp/>is<sp/>bottom<sp/>border<sp/>to<sp/>print:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bottom_border_needed{</highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="8431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>num_columns;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="8432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>table[i][j];</highlight></codeline>
<codeline lineno="8433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format<sp/>=<sp/>cell.format();</highlight></codeline>
<codeline lineno="8434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>corner<sp/>=<sp/>*format.corner_bottom_left_;</highlight></codeline>
<codeline lineno="8435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>border_bottom<sp/>=<sp/>*format.border_bottom_;</highlight></codeline>
<codeline lineno="8436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(corner<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>border_bottom<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="8437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bottom_border_needed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8441"><highlight class="normal"></highlight></codeline>
<codeline lineno="8442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bottom_border_needed)</highlight></codeline>
<codeline lineno="8443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::reset<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>bottom<sp/>border<sp/>for<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>num_columns;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="8446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_cell_border_bottom(stream,<sp/>table,<sp/>{i,<sp/>j},<sp/>{row_heights[i],<sp/>column_widths[j]},</highlight></codeline>
<codeline lineno="8447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_columns);</highlight></codeline>
<codeline lineno="8448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1<sp/>&lt;<sp/>num_rows)</highlight></codeline>
<codeline lineno="8451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>termcolor::reset<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>add<sp/>newline<sp/>after<sp/>last<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8452"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8454"><highlight class="normal"></highlight></codeline>
<codeline lineno="8455"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Printer::print_row_in_cell(std::ostream<sp/>&amp;stream,<sp/>TableInternal<sp/>&amp;table,</highlight></codeline>
<codeline lineno="8456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;size_t,<sp/>size_t&gt;<sp/>&amp;index,</highlight></codeline>
<codeline lineno="8457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;size_t,<sp/>size_t&gt;<sp/>&amp;dimension,</highlight></codeline>
<codeline lineno="8458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_columns,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row_index,</highlight></codeline>
<codeline lineno="8459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;splitted_cell_text)<sp/>{</highlight></codeline>
<codeline lineno="8460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>column_width<sp/>=<sp/>dimension.second;</highlight></codeline>
<codeline lineno="8461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>table[index.first][index.second];</highlight></codeline>
<codeline lineno="8462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>locale<sp/>=<sp/>cell.locale();</highlight></codeline>
<codeline lineno="8463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>is_multi_byte_character_support_enabled<sp/>=<sp/>cell.is_multi_byte_character_support_enabled();</highlight></codeline>
<codeline lineno="8464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>old_locale<sp/>=<sp/>std::locale::global(std::locale(locale));</highlight></codeline>
<codeline lineno="8465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format<sp/>=<sp/>cell.format();</highlight></codeline>
<codeline lineno="8466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>text_height<sp/>=<sp/>splitted_cell_text.size();</highlight></codeline>
<codeline lineno="8467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding_top<sp/>=<sp/>*format.padding_top_;</highlight></codeline>
<codeline lineno="8468"><highlight class="normal"></highlight></codeline>
<codeline lineno="8469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*format.show_border_left_)<sp/>{</highlight></codeline>
<codeline lineno="8470"><highlight class="normal"><sp/><sp/><sp/><sp/>apply_element_style(stream,<sp/>*format.border_left_color_,<sp/>*format.border_left_background_color_,</highlight></codeline>
<codeline lineno="8471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{});</highlight></codeline>
<codeline lineno="8472"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>*format.border_left_;</highlight></codeline>
<codeline lineno="8473"><highlight class="normal"><sp/><sp/><sp/><sp/>reset_element_style(stream);</highlight></codeline>
<codeline lineno="8474"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8475"><highlight class="normal"></highlight></codeline>
<codeline lineno="8476"><highlight class="normal"><sp/><sp/>apply_element_style(stream,<sp/>*format.font_color_,<sp/>*format.font_background_color_,<sp/>{});</highlight></codeline>
<codeline lineno="8477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row_index<sp/>&lt;<sp/>padding_top)<sp/>{</highlight></codeline>
<codeline lineno="8478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Padding<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8479"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>std::string(column_width,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8480"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row_index<sp/>&gt;=<sp/>padding_top<sp/>&amp;&amp;<sp/>(row_index<sp/>&lt;=<sp/>(padding_top<sp/>+<sp/>text_height)))<sp/>{</highlight></codeline>
<codeline lineno="8481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>padding<sp/>left<sp/>and<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(column_width<sp/>-<sp/>padding_left<sp/>-<sp/>padding_right)<sp/>is<sp/>the<sp/>amount<sp/>of<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>available<sp/>for<sp/>cell<sp/>text<sp/>-<sp/>Use<sp/>this<sp/>to<sp/>word<sp/>wrap<sp/>cell<sp/>contents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding_left<sp/>=<sp/>*format.padding_left_;</highlight></codeline>
<codeline lineno="8485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding_right<sp/>=<sp/>*format.padding_right_;</highlight></codeline>
<codeline lineno="8486"><highlight class="normal"></highlight></codeline>
<codeline lineno="8487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row_index<sp/>-<sp/>padding_top<sp/>&lt;<sp/>text_height)<sp/>{</highlight></codeline>
<codeline lineno="8488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>line<sp/>=<sp/>splitted_cell_text[row_index<sp/>-<sp/>padding_top];</highlight></codeline>
<codeline lineno="8489"><highlight class="normal"></highlight></codeline>
<codeline lineno="8490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>left<sp/>padding<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>std::string(padding_left,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8492"><highlight class="normal"></highlight></codeline>
<codeline lineno="8493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>word-wrapped<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*format.trim_mode_)<sp/>{</highlight></codeline>
<codeline lineno="8495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Format::TrimMode::kBoth:</highlight></codeline>
<codeline lineno="8496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/>Format::trim(line);</highlight></codeline>
<codeline lineno="8497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Format::TrimMode::kLeft:</highlight></codeline>
<codeline lineno="8499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/>Format::trim_left(line);</highlight></codeline>
<codeline lineno="8500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Format::TrimMode::kRight:</highlight></codeline>
<codeline lineno="8502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/>Format::trim_right(line);</highlight></codeline>
<codeline lineno="8503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Format::TrimMode::kNone:</highlight></codeline>
<codeline lineno="8505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8507"><highlight class="normal"></highlight></codeline>
<codeline lineno="8508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>line_with_padding_size<sp/>=</highlight></codeline>
<codeline lineno="8509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_sequence_length(line,<sp/>cell.locale(),<sp/>is_multi_byte_character_support_enabled)<sp/>+</highlight></codeline>
<codeline lineno="8510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padding_left<sp/>+<sp/>padding_right;</highlight></codeline>
<codeline lineno="8511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*format.font_align_)<sp/>{</highlight></codeline>
<codeline lineno="8512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FontAlign::left:</highlight></codeline>
<codeline lineno="8513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_content_left_aligned(stream,<sp/>line,<sp/>format,<sp/>line_with_padding_size,<sp/>column_width);</highlight></codeline>
<codeline lineno="8514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FontAlign::center:</highlight></codeline>
<codeline lineno="8516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_content_center_aligned(stream,<sp/>line,<sp/>format,<sp/>line_with_padding_size,<sp/>column_width);</highlight></codeline>
<codeline lineno="8517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FontAlign::right:</highlight></codeline>
<codeline lineno="8519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_content_right_aligned(stream,<sp/>line,<sp/>format,<sp/>line_with_padding_size,<sp/>column_width);</highlight></codeline>
<codeline lineno="8520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8522"><highlight class="normal"></highlight></codeline>
<codeline lineno="8523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>right<sp/>padding<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>std::string(padding_right,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8525"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>std::string(column_width,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8527"><highlight class="normal"></highlight></codeline>
<codeline lineno="8528"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Padding<sp/>bottom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8530"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>std::string(column_width,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8531"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8532"><highlight class="normal"></highlight></codeline>
<codeline lineno="8533"><highlight class="normal"><sp/><sp/>reset_element_style(stream);</highlight></codeline>
<codeline lineno="8534"><highlight class="normal"></highlight></codeline>
<codeline lineno="8535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index.second<sp/>+<sp/>1<sp/>==<sp/>num_columns)<sp/>{</highlight></codeline>
<codeline lineno="8536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>right<sp/>border<sp/>after<sp/>last<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*format.show_border_right_)<sp/>{</highlight></codeline>
<codeline lineno="8538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>apply_element_style(stream,<sp/>*format.border_right_color_,</highlight></codeline>
<codeline lineno="8539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*format.border_right_background_color_,<sp/>{});</highlight></codeline>
<codeline lineno="8540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>*format.border_right_;</highlight></codeline>
<codeline lineno="8541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reset_element_style(stream);</highlight></codeline>
<codeline lineno="8542"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8543"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8544"><highlight class="normal"><sp/><sp/>std::locale::global(old_locale);</highlight></codeline>
<codeline lineno="8545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8546"><highlight class="normal"></highlight></codeline>
<codeline lineno="8547"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Printer::print_cell_border_top(std::ostream<sp/>&amp;stream,<sp/>TableInternal<sp/>&amp;table,</highlight></codeline>
<codeline lineno="8548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;size_t,<sp/>size_t&gt;<sp/>&amp;index,</highlight></codeline>
<codeline lineno="8549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;size_t,<sp/>size_t&gt;<sp/>&amp;dimension,</highlight></codeline>
<codeline lineno="8550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_columns)<sp/>{</highlight></codeline>
<codeline lineno="8551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>table[index.first][index.second];</highlight></codeline>
<codeline lineno="8552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>locale<sp/>=<sp/>cell.locale();</highlight></codeline>
<codeline lineno="8553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>old_locale<sp/>=<sp/>std::locale::global(std::locale(locale));</highlight></codeline>
<codeline lineno="8554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format<sp/>=<sp/>cell.format();</highlight></codeline>
<codeline lineno="8555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>column_width<sp/>=<sp/>dimension.second;</highlight></codeline>
<codeline lineno="8556"><highlight class="normal"></highlight></codeline>
<codeline lineno="8557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>corner<sp/>=<sp/>*format.corner_top_left_;</highlight></codeline>
<codeline lineno="8558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>corner_color<sp/>=<sp/>*format.corner_top_left_color_;</highlight></codeline>
<codeline lineno="8559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>corner_background_color<sp/>=<sp/>*format.corner_top_left_background_color_;</highlight></codeline>
<codeline lineno="8560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>border_top<sp/>=<sp/>*format.border_top_;</highlight></codeline>
<codeline lineno="8561"><highlight class="normal"></highlight></codeline>
<codeline lineno="8562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((corner<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>border_top<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!*format.show_border_top_)</highlight></codeline>
<codeline lineno="8563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8564"><highlight class="normal"></highlight></codeline>
<codeline lineno="8565"><highlight class="normal"><sp/><sp/>apply_element_style(stream,<sp/>corner_color,<sp/>corner_background_color,<sp/>{});</highlight></codeline>
<codeline lineno="8566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*format.show_row_separator_)<sp/>{</highlight></codeline>
<codeline lineno="8567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index.first<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="8568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>corner;</highlight></codeline>
<codeline lineno="8569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8571"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8573"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>corner;</highlight></codeline>
<codeline lineno="8574"><highlight class="normal"><sp/><sp/>reset_element_style(stream);</highlight></codeline>
<codeline lineno="8575"><highlight class="normal"></highlight></codeline>
<codeline lineno="8576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>column_width;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="8577"><highlight class="normal"><sp/><sp/><sp/><sp/>apply_element_style(stream,<sp/>*format.border_top_color_,<sp/>*format.border_top_background_color_,</highlight></codeline>
<codeline lineno="8578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{});</highlight></codeline>
<codeline lineno="8579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*format.show_row_separator_)<sp/>{</highlight></codeline>
<codeline lineno="8580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index.first<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="8581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>border_top;</highlight></codeline>
<codeline lineno="8582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8584"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>border_top;</highlight></codeline>
<codeline lineno="8586"><highlight class="normal"><sp/><sp/><sp/><sp/>reset_element_style(stream);</highlight></codeline>
<codeline lineno="8587"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8588"><highlight class="normal"></highlight></codeline>
<codeline lineno="8589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index.second<sp/>+<sp/>1<sp/>==<sp/>num_columns)<sp/>{</highlight></codeline>
<codeline lineno="8590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>corner<sp/>after<sp/>last<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8591"><highlight class="normal"><sp/><sp/><sp/><sp/>corner<sp/>=<sp/>*format.corner_top_right_;</highlight></codeline>
<codeline lineno="8592"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_color<sp/>=<sp/>*format.corner_top_right_color_;</highlight></codeline>
<codeline lineno="8593"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_background_color<sp/>=<sp/>*format.corner_top_right_background_color_;</highlight></codeline>
<codeline lineno="8594"><highlight class="normal"></highlight></codeline>
<codeline lineno="8595"><highlight class="normal"><sp/><sp/><sp/><sp/>apply_element_style(stream,<sp/>corner_color,<sp/>corner_background_color,<sp/>{});</highlight></codeline>
<codeline lineno="8596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*format.show_row_separator_)<sp/>{</highlight></codeline>
<codeline lineno="8597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index.first<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="8598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>corner;</highlight></codeline>
<codeline lineno="8599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8601"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>corner;</highlight></codeline>
<codeline lineno="8604"><highlight class="normal"><sp/><sp/><sp/><sp/>reset_element_style(stream);</highlight></codeline>
<codeline lineno="8605"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8606"><highlight class="normal"><sp/><sp/>std::locale::global(old_locale);</highlight></codeline>
<codeline lineno="8607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8609"><highlight class="normal"></highlight></codeline>
<codeline lineno="8610"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Printer::print_cell_border_bottom(std::ostream<sp/>&amp;stream,<sp/>TableInternal<sp/>&amp;table,</highlight></codeline>
<codeline lineno="8611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;size_t,<sp/>size_t&gt;<sp/>&amp;index,</highlight></codeline>
<codeline lineno="8612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;size_t,<sp/>size_t&gt;<sp/>&amp;dimension,</highlight></codeline>
<codeline lineno="8613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_columns)<sp/>{</highlight></codeline>
<codeline lineno="8614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>table[index.first][index.second];</highlight></codeline>
<codeline lineno="8615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>locale<sp/>=<sp/>cell.locale();</highlight></codeline>
<codeline lineno="8616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>old_locale<sp/>=<sp/>std::locale::global(std::locale(locale));</highlight></codeline>
<codeline lineno="8617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format<sp/>=<sp/>cell.format();</highlight></codeline>
<codeline lineno="8618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>column_width<sp/>=<sp/>dimension.second;</highlight></codeline>
<codeline lineno="8619"><highlight class="normal"></highlight></codeline>
<codeline lineno="8620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>corner<sp/>=<sp/>*format.corner_bottom_left_;</highlight></codeline>
<codeline lineno="8621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>corner_color<sp/>=<sp/>*format.corner_bottom_left_color_;</highlight></codeline>
<codeline lineno="8622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>corner_background_color<sp/>=<sp/>*format.corner_bottom_left_background_color_;</highlight></codeline>
<codeline lineno="8623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>border_bottom<sp/>=<sp/>*format.border_bottom_;</highlight></codeline>
<codeline lineno="8624"><highlight class="normal"></highlight></codeline>
<codeline lineno="8625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((corner<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>border_bottom<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>||<sp/>!*format.show_border_bottom_)</highlight></codeline>
<codeline lineno="8626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8627"><highlight class="normal"></highlight></codeline>
<codeline lineno="8628"><highlight class="normal"><sp/><sp/>apply_element_style(stream,<sp/>corner_color,<sp/>corner_background_color,<sp/>{});</highlight></codeline>
<codeline lineno="8629"><highlight class="normal"><sp/><sp/>stream<sp/>&lt;&lt;<sp/>corner;</highlight></codeline>
<codeline lineno="8630"><highlight class="normal"><sp/><sp/>reset_element_style(stream);</highlight></codeline>
<codeline lineno="8631"><highlight class="normal"></highlight></codeline>
<codeline lineno="8632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>column_width;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="8633"><highlight class="normal"><sp/><sp/><sp/><sp/>apply_element_style(stream,<sp/>*format.border_bottom_color_,</highlight></codeline>
<codeline lineno="8634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*format.border_bottom_background_color_,<sp/>{});</highlight></codeline>
<codeline lineno="8635"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>border_bottom;</highlight></codeline>
<codeline lineno="8636"><highlight class="normal"><sp/><sp/><sp/><sp/>reset_element_style(stream);</highlight></codeline>
<codeline lineno="8637"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8638"><highlight class="normal"></highlight></codeline>
<codeline lineno="8639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index.second<sp/>+<sp/>1<sp/>==<sp/>num_columns)<sp/>{</highlight></codeline>
<codeline lineno="8640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>corner<sp/>after<sp/>last<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8641"><highlight class="normal"><sp/><sp/><sp/><sp/>corner<sp/>=<sp/>*format.corner_bottom_right_;</highlight></codeline>
<codeline lineno="8642"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_color<sp/>=<sp/>*format.corner_bottom_right_color_;</highlight></codeline>
<codeline lineno="8643"><highlight class="normal"><sp/><sp/><sp/><sp/>corner_background_color<sp/>=<sp/>*format.corner_bottom_right_background_color_;</highlight></codeline>
<codeline lineno="8644"><highlight class="normal"></highlight></codeline>
<codeline lineno="8645"><highlight class="normal"><sp/><sp/><sp/><sp/>apply_element_style(stream,<sp/>corner_color,<sp/>corner_background_color,<sp/>{});</highlight></codeline>
<codeline lineno="8646"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>corner;</highlight></codeline>
<codeline lineno="8647"><highlight class="normal"><sp/><sp/><sp/><sp/>reset_element_style(stream);</highlight></codeline>
<codeline lineno="8648"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8649"><highlight class="normal"><sp/><sp/>std::locale::global(old_locale);</highlight></codeline>
<codeline lineno="8650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8651"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8652"><highlight class="normal"></highlight></codeline>
<codeline lineno="8653"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tabulate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8654"><highlight class="normal"></highlight></codeline>
<codeline lineno="8655"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="8656"><highlight class="comment"><sp/><sp/>__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>___.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__</highlight></codeline>
<codeline lineno="8657"><highlight class="comment">_/<sp/><sp/>|______<sp/>\_<sp/>|__<sp/><sp/>__<sp/>__|<sp/><sp/>|<sp/>_____<sp/>_/<sp/><sp/>|_<sp/><sp/>____</highlight></codeline>
<codeline lineno="8658"><highlight class="comment">\<sp/><sp/><sp/>__\__<sp/><sp/>\<sp/>|<sp/>__<sp/>\|<sp/><sp/>|<sp/><sp/>\<sp/><sp/>|<sp/>\__<sp/><sp/>\\<sp/><sp/><sp/>__\/<sp/>__<sp/>\</highlight></codeline>
<codeline lineno="8659"><highlight class="comment"><sp/>|<sp/><sp/>|<sp/><sp/>/<sp/>__<sp/>\|<sp/>\_\<sp/>\<sp/><sp/>|<sp/><sp/>/<sp/><sp/>|__/<sp/>__<sp/>\|<sp/><sp/>|<sp/>\<sp/><sp/>___/</highlight></codeline>
<codeline lineno="8660"><highlight class="comment"><sp/>|__|<sp/>(____<sp/><sp/>/___<sp/><sp/>/____/|____(____<sp/><sp/>/__|<sp/><sp/>\___<sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="8661"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/</highlight></codeline>
<codeline lineno="8662"><highlight class="comment">Table<sp/>Maker<sp/>for<sp/>Modern<sp/>C++</highlight></codeline>
<codeline lineno="8663"><highlight class="comment">https://github.com/p-ranav/tabulate</highlight></codeline>
<codeline lineno="8664"><highlight class="comment"></highlight></codeline>
<codeline lineno="8665"><highlight class="comment">Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>&lt;http://opensource.org/licenses/MIT&gt;.</highlight></codeline>
<codeline lineno="8666"><highlight class="comment">SPDX-License-Identifier:<sp/>MIT</highlight></codeline>
<codeline lineno="8667"><highlight class="comment">Copyright<sp/>(c)<sp/>2019<sp/>Pranav<sp/>Srinivas<sp/>Kumar<sp/>&lt;pranav.srinivas.kumar@gmail.com&gt;.</highlight></codeline>
<codeline lineno="8668"><highlight class="comment"></highlight></codeline>
<codeline lineno="8669"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/><sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/><sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="8670"><highlight class="comment">of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/><sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="8671"><highlight class="comment">in<sp/>the<sp/>Software<sp/><sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/><sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="8672"><highlight class="comment">to<sp/><sp/>use,<sp/>copy,<sp/><sp/>modify,<sp/>merge,<sp/><sp/>publish,<sp/>distribute,<sp/><sp/>sublicense,<sp/>and/or<sp/><sp/>sell</highlight></codeline>
<codeline lineno="8673"><highlight class="comment">copies<sp/><sp/>of<sp/><sp/>the<sp/>Software,<sp/><sp/>and<sp/><sp/>to<sp/><sp/>permit<sp/>persons<sp/><sp/>to<sp/><sp/>whom<sp/><sp/>the<sp/>Software<sp/><sp/>is</highlight></codeline>
<codeline lineno="8674"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="8675"><highlight class="comment"></highlight></codeline>
<codeline lineno="8676"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="8677"><highlight class="comment">copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="8678"><highlight class="comment"></highlight></codeline>
<codeline lineno="8679"><highlight class="comment">THE<sp/>SOFTWARE<sp/><sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/><sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/><sp/>OF<sp/>ANY<sp/>KIND,<sp/><sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="8680"><highlight class="comment">IMPLIED,<sp/><sp/>INCLUDING<sp/>BUT<sp/><sp/>NOT<sp/><sp/>LIMITED<sp/>TO<sp/><sp/>THE<sp/><sp/>WARRANTIES<sp/>OF<sp/><sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="8681"><highlight class="comment">FITNESS<sp/>FOR<sp/><sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/><sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="8682"><highlight class="comment">AUTHORS<sp/><sp/>OR<sp/>COPYRIGHT<sp/><sp/>HOLDERS<sp/><sp/>BE<sp/><sp/>LIABLE<sp/>FOR<sp/><sp/>ANY<sp/><sp/>CLAIM,<sp/><sp/>DAMAGES<sp/>OR<sp/><sp/>OTHER</highlight></codeline>
<codeline lineno="8683"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/><sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="8684"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/><sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="8685"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="8686"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8687"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8688"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/table_internal.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8689"><highlight class="normal"></highlight></codeline>
<codeline lineno="8690"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;=<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8691"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string_view&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8692"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;variant&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8693"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::get_if;</highlight></codeline>
<codeline lineno="8694"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::holds_alternative;</highlight></codeline>
<codeline lineno="8695"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::string_view;</highlight></codeline>
<codeline lineno="8696"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::variant;</highlight></codeline>
<codeline lineno="8697"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::visit;</highlight></codeline>
<codeline lineno="8698"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8699"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/string_view_lite.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8700"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/variant_lite.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8701"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">nonstd::get_if;</highlight></codeline>
<codeline lineno="8702"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">nonstd::holds_alternative;</highlight></codeline>
<codeline lineno="8703"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">nonstd::string_view;</highlight></codeline>
<codeline lineno="8704"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classnonstd_1_1variants_1_1variant" kindref="compound">nonstd::variant</ref>;</highlight></codeline>
<codeline lineno="8705"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">nonstd::visit;</highlight></codeline>
<codeline lineno="8706"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8707"><highlight class="normal"></highlight></codeline>
<codeline lineno="8708"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8709"><highlight class="normal"></highlight></codeline>
<codeline lineno="8710"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tabulate<sp/>{</highlight></codeline>
<codeline lineno="8711"><highlight class="normal"></highlight></codeline>
<codeline lineno="8712"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Table<sp/>{</highlight></codeline>
<codeline lineno="8713"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8714"><highlight class="normal"><sp/><sp/>Table()<sp/>:<sp/>table_(TableInternal::create())<sp/>{}</highlight></codeline>
<codeline lineno="8715"><highlight class="normal"></highlight></codeline>
<codeline lineno="8716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">Row_t<sp/>=<sp/>std::vector&lt;variant&lt;std::string,<sp/>const<sp/>char<sp/>*,<sp/>string_view,<sp/>Table&gt;&gt;;</highlight></codeline>
<codeline lineno="8717"><highlight class="normal"></highlight></codeline>
<codeline lineno="8718"><highlight class="normal"><sp/><sp/>Table<sp/>&amp;add_row(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Row_t<sp/>&amp;cells)<sp/>{</highlight></codeline>
<codeline lineno="8719"><highlight class="normal"></highlight></codeline>
<codeline lineno="8720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rows_<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="8721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>first<sp/>row<sp/>added</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cells.size()<sp/>is<sp/>the<sp/>number<sp/>of<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cols_<sp/>=<sp/>cells.size();</highlight></codeline>
<codeline lineno="8724"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8725"><highlight class="normal"></highlight></codeline>
<codeline lineno="8726"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>cell_strings;</highlight></codeline>
<codeline lineno="8727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cells.size()<sp/>&lt;<sp/>cols_)<sp/>{</highlight></codeline>
<codeline lineno="8728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cell_strings.resize(cols_);</highlight></codeline>
<codeline lineno="8729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(cell_strings.begin(),<sp/>cell_strings.end(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8730"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cell_strings.resize(cells.size());</highlight></codeline>
<codeline lineno="8732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(cell_strings.begin(),<sp/>cell_strings.end(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8733"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8734"><highlight class="normal"></highlight></codeline>
<codeline lineno="8735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cells.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="8736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>cells[i];</highlight></codeline>
<codeline lineno="8737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(holds_alternative&lt;std::string&gt;(cell))<sp/>{</highlight></codeline>
<codeline lineno="8738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_strings[i]<sp/>=<sp/>*get_if&lt;std::string&gt;(&amp;cell);</highlight></codeline>
<codeline lineno="8739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(holds_alternative&lt;const<sp/>char<sp/>*&gt;(cell))<sp/>{</highlight></codeline>
<codeline lineno="8740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_strings[i]<sp/>=<sp/>*get_if&lt;const<sp/>char<sp/>*&gt;(&amp;cell);</highlight></codeline>
<codeline lineno="8741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(holds_alternative&lt;string_view&gt;(cell))<sp/>{</highlight></codeline>
<codeline lineno="8742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_strings[i]<sp/>=<sp/>std::string{*get_if&lt;string_view&gt;(&amp;cell)};</highlight></codeline>
<codeline lineno="8743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>table<sp/>=<sp/>*get_if&lt;Table&gt;(&amp;cell);</highlight></codeline>
<codeline lineno="8745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>stream;</highlight></codeline>
<codeline lineno="8746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table.print(stream);</highlight></codeline>
<codeline lineno="8747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell_strings[i]<sp/>=<sp/>stream.str();</highlight></codeline>
<codeline lineno="8748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8749"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8750"><highlight class="normal"></highlight></codeline>
<codeline lineno="8751"><highlight class="normal"><sp/><sp/><sp/><sp/>table_-&gt;add_row(cell_strings);</highlight></codeline>
<codeline lineno="8752"><highlight class="normal"><sp/><sp/><sp/><sp/>rows_<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="8753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8754"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8755"><highlight class="normal"></highlight></codeline>
<codeline lineno="8756"><highlight class="normal"><sp/><sp/>Row<sp/>&amp;operator[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>row(index);<sp/>}</highlight></codeline>
<codeline lineno="8757"><highlight class="normal"></highlight></codeline>
<codeline lineno="8758"><highlight class="normal"><sp/><sp/>Row<sp/>&amp;row(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*table_)[index];<sp/>}</highlight></codeline>
<codeline lineno="8759"><highlight class="normal"></highlight></codeline>
<codeline lineno="8760"><highlight class="normal"><sp/><sp/>Column<sp/>column(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>table_-&gt;column(index);<sp/>}</highlight></codeline>
<codeline lineno="8761"><highlight class="normal"></highlight></codeline>
<codeline lineno="8762"><highlight class="normal"><sp/><sp/>Format<sp/>&amp;format()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>table_-&gt;format();<sp/>}</highlight></codeline>
<codeline lineno="8763"><highlight class="normal"></highlight></codeline>
<codeline lineno="8764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print(std::ostream<sp/>&amp;stream)<sp/>{<sp/>table_-&gt;print(stream);<sp/>}</highlight></codeline>
<codeline lineno="8765"><highlight class="normal"></highlight></codeline>
<codeline lineno="8766"><highlight class="normal"><sp/><sp/>std::string<sp/>str()<sp/>{</highlight></codeline>
<codeline lineno="8767"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>stream;</highlight></codeline>
<codeline lineno="8768"><highlight class="normal"><sp/><sp/><sp/><sp/>print(stream);</highlight></codeline>
<codeline lineno="8769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream.str();</highlight></codeline>
<codeline lineno="8770"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8771"><highlight class="normal"></highlight></codeline>
<codeline lineno="8772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>table_-&gt;size();<sp/>}</highlight></codeline>
<codeline lineno="8773"><highlight class="normal"></highlight></codeline>
<codeline lineno="8774"><highlight class="normal"><sp/><sp/>std::pair&lt;size_t,<sp/>size_t&gt;<sp/>shape()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>table_-&gt;shape();<sp/>}</highlight></codeline>
<codeline lineno="8775"><highlight class="normal"></highlight></codeline>
<codeline lineno="8776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RowIterator<sp/>{</highlight></codeline>
<codeline lineno="8777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>RowIterator(std::vector&lt;std::shared_ptr&lt;Row&gt;&gt;::iterator<sp/>ptr)<sp/>:<sp/>ptr(ptr)<sp/>{}</highlight></codeline>
<codeline lineno="8779"><highlight class="normal"></highlight></codeline>
<codeline lineno="8780"><highlight class="normal"><sp/><sp/><sp/><sp/>RowIterator<sp/>operator++()<sp/>{</highlight></codeline>
<codeline lineno="8781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++ptr;</highlight></codeline>
<codeline lineno="8782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8783"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RowIterator<sp/>&amp;other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr<sp/>!=<sp/>other.ptr;<sp/>}</highlight></codeline>
<codeline lineno="8785"><highlight class="normal"><sp/><sp/><sp/><sp/>Row<sp/>&amp;operator*()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>**ptr;<sp/>}</highlight></codeline>
<codeline lineno="8786"><highlight class="normal"></highlight></codeline>
<codeline lineno="8787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8788"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Row&gt;&gt;::iterator<sp/>ptr;</highlight></codeline>
<codeline lineno="8789"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="8790"><highlight class="normal"></highlight></codeline>
<codeline lineno="8791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin()<sp/>-&gt;<sp/>RowIterator<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RowIterator(table_-&gt;rows_.begin());<sp/>}</highlight></codeline>
<codeline lineno="8792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end()<sp/>-&gt;<sp/>RowIterator<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RowIterator(table_-&gt;rows_.end());<sp/>}</highlight></codeline>
<codeline lineno="8793"><highlight class="normal"></highlight></codeline>
<codeline lineno="8794"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MarkdownExporter;</highlight></codeline>
<codeline lineno="8796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">LatexExporter;</highlight></codeline>
<codeline lineno="8797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AsciiDocExporter;</highlight></codeline>
<codeline lineno="8798"><highlight class="normal"></highlight></codeline>
<codeline lineno="8799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;operator&lt;&lt;(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Table<sp/>&amp;table);</highlight></codeline>
<codeline lineno="8800"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rows_{0};</highlight></codeline>
<codeline lineno="8801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cols_{0};</highlight></codeline>
<codeline lineno="8802"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;TableInternal&gt;<sp/>table_;</highlight></codeline>
<codeline lineno="8803"><highlight class="normal">};</highlight></codeline>
<codeline lineno="8804"><highlight class="normal"></highlight></codeline>
<codeline lineno="8805"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;operator&lt;&lt;(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Table<sp/>&amp;table)<sp/>{</highlight></codeline>
<codeline lineno="8806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">Table<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(table).print(stream);</highlight></codeline>
<codeline lineno="8807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="8808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8809"><highlight class="normal"></highlight></codeline>
<codeline lineno="8810"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RowStream<sp/>{</highlight></codeline>
<codeline lineno="8811"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Table::Row_t<sp/>&amp;()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>row_;<sp/>}</highlight></codeline>
<codeline lineno="8813"><highlight class="normal"></highlight></codeline>
<codeline lineno="8814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="8815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;T,<sp/>Table::Row_t::value_type&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="8816"><highlight class="normal"><sp/><sp/>RowStream<sp/>&amp;operator&lt;&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;obj)<sp/>{</highlight></codeline>
<codeline lineno="8817"><highlight class="normal"><sp/><sp/><sp/><sp/>oss_<sp/>&lt;&lt;<sp/>obj;</highlight></codeline>
<codeline lineno="8818"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>cell{oss_.str()};</highlight></codeline>
<codeline lineno="8819"><highlight class="normal"><sp/><sp/><sp/><sp/>oss_.str(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cell.empty())<sp/>{</highlight></codeline>
<codeline lineno="8821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>row_.push_back(cell);</highlight></codeline>
<codeline lineno="8822"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8824"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8825"><highlight class="normal"></highlight></codeline>
<codeline lineno="8826"><highlight class="normal"><sp/><sp/>RowStream<sp/>&amp;operator&lt;&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Table::Row_t::value_type<sp/>&amp;cell)<sp/>{</highlight></codeline>
<codeline lineno="8827"><highlight class="normal"><sp/><sp/><sp/><sp/>row_.push_back(cell);</highlight></codeline>
<codeline lineno="8828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8829"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8830"><highlight class="normal"></highlight></codeline>
<codeline lineno="8831"><highlight class="normal"><sp/><sp/>RowStream<sp/>&amp;copyfmt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RowStream<sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="8832"><highlight class="normal"><sp/><sp/><sp/><sp/>oss_.copyfmt(other.oss_);</highlight></codeline>
<codeline lineno="8833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8834"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8835"><highlight class="normal"></highlight></codeline>
<codeline lineno="8836"><highlight class="normal"><sp/><sp/>RowStream<sp/>&amp;copyfmt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::ios<sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="8837"><highlight class="normal"><sp/><sp/><sp/><sp/>oss_.copyfmt(other);</highlight></codeline>
<codeline lineno="8838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8839"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8840"><highlight class="normal"></highlight></codeline>
<codeline lineno="8841"><highlight class="normal"><sp/><sp/>std::ostringstream::char_type<sp/>fill()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oss_.fill();<sp/>}</highlight></codeline>
<codeline lineno="8842"><highlight class="normal"><sp/><sp/>std::ostringstream::char_type<sp/>fill(std::ostringstream::char_type<sp/>ch)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oss_.fill(ch);<sp/>}</highlight></codeline>
<codeline lineno="8843"><highlight class="normal"></highlight></codeline>
<codeline lineno="8844"><highlight class="normal"><sp/><sp/>std::ios_base::iostate<sp/>exceptions()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oss_.exceptions();<sp/>}</highlight></codeline>
<codeline lineno="8845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>exceptions(std::ios_base::iostate<sp/>except)<sp/>{<sp/>oss_.exceptions(except);<sp/>}</highlight></codeline>
<codeline lineno="8846"><highlight class="normal"></highlight></codeline>
<codeline lineno="8847"><highlight class="normal"><sp/><sp/>std::locale<sp/>imbue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::locale<sp/>&amp;loc)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oss_.imbue(loc);<sp/>}</highlight></codeline>
<codeline lineno="8848"><highlight class="normal"><sp/><sp/>std::locale<sp/>getloc()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oss_.getloc();<sp/>}</highlight></codeline>
<codeline lineno="8849"><highlight class="normal"></highlight></codeline>
<codeline lineno="8850"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>narrow(std::ostringstream::char_type<sp/>c,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dfault)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oss_.narrow(c,<sp/>dfault);<sp/>}</highlight></codeline>
<codeline lineno="8851"><highlight class="normal"><sp/><sp/>std::ostringstream::char_type<sp/>widen(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oss_.widen(c);<sp/>}</highlight></codeline>
<codeline lineno="8852"><highlight class="normal"></highlight></codeline>
<codeline lineno="8853"><highlight class="normal"><sp/><sp/>std::ios::fmtflags<sp/>flags()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oss_.flags();<sp/>}</highlight></codeline>
<codeline lineno="8854"><highlight class="normal"><sp/><sp/>std::ios::fmtflags<sp/>flags(std::ios::fmtflags<sp/>flags)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oss_.flags(flags);<sp/>}</highlight></codeline>
<codeline lineno="8855"><highlight class="normal"></highlight></codeline>
<codeline lineno="8856"><highlight class="normal"><sp/><sp/>std::ios::fmtflags<sp/>setf(std::ios::fmtflags<sp/>flags)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oss_.setf(flags);<sp/>}</highlight></codeline>
<codeline lineno="8857"><highlight class="normal"><sp/><sp/>std::ios::fmtflags<sp/>setf(std::ios::fmtflags<sp/>flags,<sp/>std::ios::fmtflags<sp/>mask)<sp/>{</highlight></codeline>
<codeline lineno="8858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oss_.setf(flags,<sp/>mask);</highlight></codeline>
<codeline lineno="8859"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8860"><highlight class="normal"></highlight></codeline>
<codeline lineno="8861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unsetf(std::ios::fmtflags<sp/>flags)<sp/>{<sp/>oss_.unsetf(flags);<sp/>}</highlight></codeline>
<codeline lineno="8862"><highlight class="normal"></highlight></codeline>
<codeline lineno="8863"><highlight class="normal"><sp/><sp/>std::streamsize<sp/>precision()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oss_.precision();<sp/>}</highlight></codeline>
<codeline lineno="8864"><highlight class="normal"><sp/><sp/>std::streamsize<sp/>precision(std::streamsize<sp/>new_precision)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oss_.precision(new_precision);<sp/>}</highlight></codeline>
<codeline lineno="8865"><highlight class="normal"></highlight></codeline>
<codeline lineno="8866"><highlight class="normal"><sp/><sp/>std::streamsize<sp/>width()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oss_.width();<sp/>}</highlight></codeline>
<codeline lineno="8867"><highlight class="normal"><sp/><sp/>std::streamsize<sp/>width(std::streamsize<sp/>new_width)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oss_.width(new_width);<sp/>}</highlight></codeline>
<codeline lineno="8868"><highlight class="normal"></highlight></codeline>
<codeline lineno="8869"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8870"><highlight class="normal"><sp/><sp/>Table::Row_t<sp/>row_;</highlight></codeline>
<codeline lineno="8871"><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>oss_;</highlight></codeline>
<codeline lineno="8872"><highlight class="normal">};</highlight></codeline>
<codeline lineno="8873"><highlight class="normal"></highlight></codeline>
<codeline lineno="8874"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tabulate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8875"><highlight class="normal"></highlight></codeline>
<codeline lineno="8876"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="8877"><highlight class="comment"><sp/><sp/>__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>___.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__</highlight></codeline>
<codeline lineno="8878"><highlight class="comment">_/<sp/><sp/>|______<sp/>\_<sp/>|__<sp/><sp/>__<sp/>__|<sp/><sp/>|<sp/>_____<sp/>_/<sp/><sp/>|_<sp/><sp/>____</highlight></codeline>
<codeline lineno="8879"><highlight class="comment">\<sp/><sp/><sp/>__\__<sp/><sp/>\<sp/>|<sp/>__<sp/>\|<sp/><sp/>|<sp/><sp/>\<sp/><sp/>|<sp/>\__<sp/><sp/>\\<sp/><sp/><sp/>__\/<sp/>__<sp/>\</highlight></codeline>
<codeline lineno="8880"><highlight class="comment"><sp/>|<sp/><sp/>|<sp/><sp/>/<sp/>__<sp/>\|<sp/>\_\<sp/>\<sp/><sp/>|<sp/><sp/>/<sp/><sp/>|__/<sp/>__<sp/>\|<sp/><sp/>|<sp/>\<sp/><sp/>___/</highlight></codeline>
<codeline lineno="8881"><highlight class="comment"><sp/>|__|<sp/>(____<sp/><sp/>/___<sp/><sp/>/____/|____(____<sp/><sp/>/__|<sp/><sp/>\___<sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="8882"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/</highlight></codeline>
<codeline lineno="8883"><highlight class="comment">Table<sp/>Maker<sp/>for<sp/>Modern<sp/>C++</highlight></codeline>
<codeline lineno="8884"><highlight class="comment">https://github.com/p-ranav/tabulate</highlight></codeline>
<codeline lineno="8885"><highlight class="comment"></highlight></codeline>
<codeline lineno="8886"><highlight class="comment">Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>&lt;http://opensource.org/licenses/MIT&gt;.</highlight></codeline>
<codeline lineno="8887"><highlight class="comment">SPDX-License-Identifier:<sp/>MIT</highlight></codeline>
<codeline lineno="8888"><highlight class="comment">Copyright<sp/>(c)<sp/>2019<sp/>Pranav<sp/>Srinivas<sp/>Kumar<sp/>&lt;pranav.srinivas.kumar@gmail.com&gt;.</highlight></codeline>
<codeline lineno="8889"><highlight class="comment"></highlight></codeline>
<codeline lineno="8890"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/><sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/><sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="8891"><highlight class="comment">of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/><sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="8892"><highlight class="comment">in<sp/>the<sp/>Software<sp/><sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/><sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="8893"><highlight class="comment">to<sp/><sp/>use,<sp/>copy,<sp/><sp/>modify,<sp/>merge,<sp/><sp/>publish,<sp/>distribute,<sp/><sp/>sublicense,<sp/>and/or<sp/><sp/>sell</highlight></codeline>
<codeline lineno="8894"><highlight class="comment">copies<sp/><sp/>of<sp/><sp/>the<sp/>Software,<sp/><sp/>and<sp/><sp/>to<sp/><sp/>permit<sp/>persons<sp/><sp/>to<sp/><sp/>whom<sp/><sp/>the<sp/>Software<sp/><sp/>is</highlight></codeline>
<codeline lineno="8895"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="8896"><highlight class="comment"></highlight></codeline>
<codeline lineno="8897"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="8898"><highlight class="comment">copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="8899"><highlight class="comment"></highlight></codeline>
<codeline lineno="8900"><highlight class="comment">THE<sp/>SOFTWARE<sp/><sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/><sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/><sp/>OF<sp/>ANY<sp/>KIND,<sp/><sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="8901"><highlight class="comment">IMPLIED,<sp/><sp/>INCLUDING<sp/>BUT<sp/><sp/>NOT<sp/><sp/>LIMITED<sp/>TO<sp/><sp/>THE<sp/><sp/>WARRANTIES<sp/>OF<sp/><sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="8902"><highlight class="comment">FITNESS<sp/>FOR<sp/><sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/><sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="8903"><highlight class="comment">AUTHORS<sp/><sp/>OR<sp/>COPYRIGHT<sp/><sp/>HOLDERS<sp/><sp/>BE<sp/><sp/>LIABLE<sp/>FOR<sp/><sp/>ANY<sp/><sp/>CLAIM,<sp/><sp/>DAMAGES<sp/>OR<sp/><sp/>OTHER</highlight></codeline>
<codeline lineno="8904"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/><sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="8905"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/><sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="8906"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="8907"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8908"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8909"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8910"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/table.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8911"><highlight class="normal"></highlight></codeline>
<codeline lineno="8912"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tabulate<sp/>{</highlight></codeline>
<codeline lineno="8913"><highlight class="normal"></highlight></codeline>
<codeline lineno="8914"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Exporter<sp/>{</highlight></codeline>
<codeline lineno="8915"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>dump(Table<sp/>&amp;table)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="8917"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~Exporter()<sp/>{}</highlight></codeline>
<codeline lineno="8918"><highlight class="normal">};</highlight></codeline>
<codeline lineno="8919"><highlight class="normal"></highlight></codeline>
<codeline lineno="8920"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tabulate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8921"><highlight class="normal"></highlight></codeline>
<codeline lineno="8922"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="8923"><highlight class="comment"><sp/><sp/>__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>___.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__</highlight></codeline>
<codeline lineno="8924"><highlight class="comment">_/<sp/><sp/>|______<sp/>\_<sp/>|__<sp/><sp/>__<sp/>__|<sp/><sp/>|<sp/>_____<sp/>_/<sp/><sp/>|_<sp/><sp/>____</highlight></codeline>
<codeline lineno="8925"><highlight class="comment">\<sp/><sp/><sp/>__\__<sp/><sp/>\<sp/>|<sp/>__<sp/>\|<sp/><sp/>|<sp/><sp/>\<sp/><sp/>|<sp/>\__<sp/><sp/>\\<sp/><sp/><sp/>__\/<sp/>__<sp/>\</highlight></codeline>
<codeline lineno="8926"><highlight class="comment"><sp/>|<sp/><sp/>|<sp/><sp/>/<sp/>__<sp/>\|<sp/>\_\<sp/>\<sp/><sp/>|<sp/><sp/>/<sp/><sp/>|__/<sp/>__<sp/>\|<sp/><sp/>|<sp/>\<sp/><sp/>___/</highlight></codeline>
<codeline lineno="8927"><highlight class="comment"><sp/>|__|<sp/>(____<sp/><sp/>/___<sp/><sp/>/____/|____(____<sp/><sp/>/__|<sp/><sp/>\___<sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="8928"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/</highlight></codeline>
<codeline lineno="8929"><highlight class="comment">Table<sp/>Maker<sp/>for<sp/>Modern<sp/>C++</highlight></codeline>
<codeline lineno="8930"><highlight class="comment">https://github.com/p-ranav/tabulate</highlight></codeline>
<codeline lineno="8931"><highlight class="comment"></highlight></codeline>
<codeline lineno="8932"><highlight class="comment">Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>&lt;http://opensource.org/licenses/MIT&gt;.</highlight></codeline>
<codeline lineno="8933"><highlight class="comment">SPDX-License-Identifier:<sp/>MIT</highlight></codeline>
<codeline lineno="8934"><highlight class="comment">Copyright<sp/>(c)<sp/>2019<sp/>Pranav<sp/>Srinivas<sp/>Kumar<sp/>&lt;pranav.srinivas.kumar@gmail.com&gt;.</highlight></codeline>
<codeline lineno="8935"><highlight class="comment"></highlight></codeline>
<codeline lineno="8936"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/><sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/><sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="8937"><highlight class="comment">of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/><sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="8938"><highlight class="comment">in<sp/>the<sp/>Software<sp/><sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/><sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="8939"><highlight class="comment">to<sp/><sp/>use,<sp/>copy,<sp/><sp/>modify,<sp/>merge,<sp/><sp/>publish,<sp/>distribute,<sp/><sp/>sublicense,<sp/>and/or<sp/><sp/>sell</highlight></codeline>
<codeline lineno="8940"><highlight class="comment">copies<sp/><sp/>of<sp/><sp/>the<sp/>Software,<sp/><sp/>and<sp/><sp/>to<sp/><sp/>permit<sp/>persons<sp/><sp/>to<sp/><sp/>whom<sp/><sp/>the<sp/>Software<sp/><sp/>is</highlight></codeline>
<codeline lineno="8941"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="8942"><highlight class="comment"></highlight></codeline>
<codeline lineno="8943"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="8944"><highlight class="comment">copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="8945"><highlight class="comment"></highlight></codeline>
<codeline lineno="8946"><highlight class="comment">THE<sp/>SOFTWARE<sp/><sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/><sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/><sp/>OF<sp/>ANY<sp/>KIND,<sp/><sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="8947"><highlight class="comment">IMPLIED,<sp/><sp/>INCLUDING<sp/>BUT<sp/><sp/>NOT<sp/><sp/>LIMITED<sp/>TO<sp/><sp/>THE<sp/><sp/>WARRANTIES<sp/>OF<sp/><sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="8948"><highlight class="comment">FITNESS<sp/>FOR<sp/><sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/><sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="8949"><highlight class="comment">AUTHORS<sp/><sp/>OR<sp/>COPYRIGHT<sp/><sp/>HOLDERS<sp/><sp/>BE<sp/><sp/>LIABLE<sp/>FOR<sp/><sp/>ANY<sp/><sp/>CLAIM,<sp/><sp/>DAMAGES<sp/>OR<sp/><sp/>OTHER</highlight></codeline>
<codeline lineno="8950"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/><sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="8951"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/><sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="8952"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="8953"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8954"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8955"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/exporter.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8956"><highlight class="normal"></highlight></codeline>
<codeline lineno="8957"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tabulate<sp/>{</highlight></codeline>
<codeline lineno="8958"><highlight class="normal"></highlight></codeline>
<codeline lineno="8959"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MarkdownExporter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Exporter<sp/>{</highlight></codeline>
<codeline lineno="8960"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8961"><highlight class="normal"><sp/><sp/>std::string<sp/>dump(Table<sp/>&amp;table)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8962"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result{</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="8963"><highlight class="normal"><sp/><sp/><sp/><sp/>apply_markdown_format(table);</highlight></codeline>
<codeline lineno="8964"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>table.str();</highlight></codeline>
<codeline lineno="8965"><highlight class="normal"><sp/><sp/><sp/><sp/>restore_table_format(table);</highlight></codeline>
<codeline lineno="8966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="8967"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="8968"><highlight class="normal"></highlight></codeline>
<codeline lineno="8969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~MarkdownExporter()<sp/>{}</highlight></codeline>
<codeline lineno="8970"><highlight class="normal"></highlight></codeline>
<codeline lineno="8971"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8972"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_alignment_header_row(Table<sp/>&amp;table)<sp/>{</highlight></codeline>
<codeline lineno="8973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;rows<sp/>=<sp/>table.table_-&gt;rows_;</highlight></codeline>
<codeline lineno="8974"><highlight class="normal"></highlight></codeline>
<codeline lineno="8975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rows.size()<sp/>&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="8976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alignment_row<sp/>=<sp/>std::make_shared&lt;Row&gt;(table.table_-&gt;shared_from_this());</highlight></codeline>
<codeline lineno="8977"><highlight class="normal"></highlight></codeline>
<codeline lineno="8978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>alignment<sp/>header<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>alignment_cells{};</highlight></codeline>
<codeline lineno="8980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>table[0])<sp/>{</highlight></codeline>
<codeline lineno="8981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format<sp/>=<sp/>cell.format();</highlight></codeline>
<codeline lineno="8982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format.font_align_.value()<sp/>==<sp/>FontAlign::left)<sp/>{</highlight></codeline>
<codeline lineno="8983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alignment_cells.push_back(</highlight><highlight class="stringliteral">&quot;:----&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format.font_align_.value()<sp/>==<sp/>FontAlign::center)<sp/>{</highlight></codeline>
<codeline lineno="8985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alignment_cells.push_back(</highlight><highlight class="stringliteral">&quot;:---:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format.font_align_.value()<sp/>==<sp/>FontAlign::right)<sp/>{</highlight></codeline>
<codeline lineno="8987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alignment_cells.push_back(</highlight><highlight class="stringliteral">&quot;----:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8990"><highlight class="normal"></highlight></codeline>
<codeline lineno="8991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>alignment<sp/>header<sp/>cells<sp/>to<sp/>alignment<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;c<sp/>:<sp/>alignment_cells)<sp/>{</highlight></codeline>
<codeline lineno="8993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>std::make_shared&lt;Cell&gt;(alignment_row);</highlight></codeline>
<codeline lineno="8994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell-&gt;format()</highlight></codeline>
<codeline lineno="8995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.hide_border_top()</highlight></codeline>
<codeline lineno="8996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.hide_border_bottom()</highlight></codeline>
<codeline lineno="8997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.border_left(</highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="8998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.border_right(</highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="8999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.column_separator(</highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="9000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.corner(</highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell-&gt;set_text(c);</highlight></codeline>
<codeline lineno="9002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;:---:&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="9003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell-&gt;format().font_align(FontAlign::center);</highlight></codeline>
<codeline lineno="9004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;----:&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="9005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell-&gt;format().font_align(FontAlign::right);</highlight></codeline>
<codeline lineno="9006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alignment_row-&gt;add_cell(cell);</highlight></codeline>
<codeline lineno="9007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9008"><highlight class="normal"></highlight></codeline>
<codeline lineno="9009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>alignment<sp/>header<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rows.size()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="9011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rows.insert(rows.begin()<sp/>+<sp/>1,<sp/>alignment_row);</highlight></codeline>
<codeline lineno="9012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rows.push_back(alignment_row);</highlight></codeline>
<codeline lineno="9014"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9015"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9016"><highlight class="normal"></highlight></codeline>
<codeline lineno="9017"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>remove_alignment_header_row(Table<sp/>&amp;table)<sp/>{</highlight></codeline>
<codeline lineno="9018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;rows<sp/>=<sp/>table.table_-&gt;rows_;</highlight></codeline>
<codeline lineno="9019"><highlight class="normal"><sp/><sp/><sp/><sp/>table.table_-&gt;rows_.erase(rows.begin()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="9020"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9021"><highlight class="normal"></highlight></codeline>
<codeline lineno="9022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply_markdown_format(Table<sp/>&amp;table)<sp/>{</highlight></codeline>
<codeline lineno="9023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>markdown<sp/>format<sp/>to<sp/>cells<sp/>in<sp/>each<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>row<sp/>:<sp/>table)<sp/>{</highlight></codeline>
<codeline lineno="9025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>row)<sp/>{</highlight></codeline>
<codeline lineno="9026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format<sp/>=<sp/>cell.format();</highlight></codeline>
<codeline lineno="9027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>formats_.push_back(format);</highlight></codeline>
<codeline lineno="9028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.format()</highlight></codeline>
<codeline lineno="9029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.hide_border_top()</highlight></codeline>
<codeline lineno="9030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.hide_border_bottom()</highlight></codeline>
<codeline lineno="9031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.border_left(</highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="9032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.border_right(</highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="9033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.column_separator(</highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="9034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.corner(</highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9036"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>alignment<sp/>header<sp/>row<sp/>at<sp/>position<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9038"><highlight class="normal"><sp/><sp/><sp/><sp/>add_alignment_header_row(table);</highlight></codeline>
<codeline lineno="9039"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9040"><highlight class="normal"></highlight></codeline>
<codeline lineno="9041"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>restore_table_format(Table<sp/>&amp;table)<sp/>{</highlight></codeline>
<codeline lineno="9042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>alignment<sp/>header<sp/>row<sp/>at<sp/>position<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9043"><highlight class="normal"><sp/><sp/><sp/><sp/>remove_alignment_header_row(table);</highlight></codeline>
<codeline lineno="9044"><highlight class="normal"></highlight></codeline>
<codeline lineno="9045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>original<sp/>formatting<sp/>for<sp/>each<sp/>cell</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>format_index{0};</highlight></codeline>
<codeline lineno="9047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>row<sp/>:<sp/>table)<sp/>{</highlight></codeline>
<codeline lineno="9048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>row)<sp/>{</highlight></codeline>
<codeline lineno="9049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell.format()<sp/>=<sp/>formats_[format_index];</highlight></codeline>
<codeline lineno="9050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format_index<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="9051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9052"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9053"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9054"><highlight class="normal"></highlight></codeline>
<codeline lineno="9055"><highlight class="normal"><sp/><sp/>std::vector&lt;Format&gt;<sp/>formats_;</highlight></codeline>
<codeline lineno="9056"><highlight class="normal">};</highlight></codeline>
<codeline lineno="9057"><highlight class="normal"></highlight></codeline>
<codeline lineno="9058"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tabulate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9059"><highlight class="normal"></highlight></codeline>
<codeline lineno="9060"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="9061"><highlight class="comment"><sp/><sp/>__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>___.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__</highlight></codeline>
<codeline lineno="9062"><highlight class="comment">_/<sp/><sp/>|______<sp/>\_<sp/>|__<sp/><sp/>__<sp/>__|<sp/><sp/>|<sp/>_____<sp/>_/<sp/><sp/>|_<sp/><sp/>____</highlight></codeline>
<codeline lineno="9063"><highlight class="comment">\<sp/><sp/><sp/>__\__<sp/><sp/>\<sp/>|<sp/>__<sp/>\|<sp/><sp/>|<sp/><sp/>\<sp/><sp/>|<sp/>\__<sp/><sp/>\\<sp/><sp/><sp/>__\/<sp/>__<sp/>\</highlight></codeline>
<codeline lineno="9064"><highlight class="comment"><sp/>|<sp/><sp/>|<sp/><sp/>/<sp/>__<sp/>\|<sp/>\_\<sp/>\<sp/><sp/>|<sp/><sp/>/<sp/><sp/>|__/<sp/>__<sp/>\|<sp/><sp/>|<sp/>\<sp/><sp/>___/</highlight></codeline>
<codeline lineno="9065"><highlight class="comment"><sp/>|__|<sp/>(____<sp/><sp/>/___<sp/><sp/>/____/|____(____<sp/><sp/>/__|<sp/><sp/>\___<sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="9066"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/</highlight></codeline>
<codeline lineno="9067"><highlight class="comment">Table<sp/>Maker<sp/>for<sp/>Modern<sp/>C++</highlight></codeline>
<codeline lineno="9068"><highlight class="comment">https://github.com/p-ranav/tabulate</highlight></codeline>
<codeline lineno="9069"><highlight class="comment"></highlight></codeline>
<codeline lineno="9070"><highlight class="comment">Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>&lt;http://opensource.org/licenses/MIT&gt;.</highlight></codeline>
<codeline lineno="9071"><highlight class="comment">SPDX-License-Identifier:<sp/>MIT</highlight></codeline>
<codeline lineno="9072"><highlight class="comment">Copyright<sp/>(c)<sp/>2019<sp/>Pranav<sp/>Srinivas<sp/>Kumar<sp/>&lt;pranav.srinivas.kumar@gmail.com&gt;.</highlight></codeline>
<codeline lineno="9073"><highlight class="comment"></highlight></codeline>
<codeline lineno="9074"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/><sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/><sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="9075"><highlight class="comment">of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/><sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="9076"><highlight class="comment">in<sp/>the<sp/>Software<sp/><sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/><sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="9077"><highlight class="comment">to<sp/><sp/>use,<sp/>copy,<sp/><sp/>modify,<sp/>merge,<sp/><sp/>publish,<sp/>distribute,<sp/><sp/>sublicense,<sp/>and/or<sp/><sp/>sell</highlight></codeline>
<codeline lineno="9078"><highlight class="comment">copies<sp/><sp/>of<sp/><sp/>the<sp/>Software,<sp/><sp/>and<sp/><sp/>to<sp/><sp/>permit<sp/>persons<sp/><sp/>to<sp/><sp/>whom<sp/><sp/>the<sp/>Software<sp/><sp/>is</highlight></codeline>
<codeline lineno="9079"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="9080"><highlight class="comment"></highlight></codeline>
<codeline lineno="9081"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="9082"><highlight class="comment">copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="9083"><highlight class="comment"></highlight></codeline>
<codeline lineno="9084"><highlight class="comment">THE<sp/>SOFTWARE<sp/><sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/><sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/><sp/>OF<sp/>ANY<sp/>KIND,<sp/><sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="9085"><highlight class="comment">IMPLIED,<sp/><sp/>INCLUDING<sp/>BUT<sp/><sp/>NOT<sp/><sp/>LIMITED<sp/>TO<sp/><sp/>THE<sp/><sp/>WARRANTIES<sp/>OF<sp/><sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="9086"><highlight class="comment">FITNESS<sp/>FOR<sp/><sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/><sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="9087"><highlight class="comment">AUTHORS<sp/><sp/>OR<sp/>COPYRIGHT<sp/><sp/>HOLDERS<sp/><sp/>BE<sp/><sp/>LIABLE<sp/>FOR<sp/><sp/>ANY<sp/><sp/>CLAIM,<sp/><sp/>DAMAGES<sp/>OR<sp/><sp/>OTHER</highlight></codeline>
<codeline lineno="9088"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/><sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="9089"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/><sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="9090"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="9091"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9092"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9093"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/exporter.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9094"><highlight class="normal"></highlight></codeline>
<codeline lineno="9095"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;=<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9096"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;optional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9097"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::optional;</highlight></codeline>
<codeline lineno="9098"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9099"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/optional_lite.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9100"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classnonstd_1_1optional__lite_1_1optional" kindref="compound">nonstd::optional</ref>;</highlight></codeline>
<codeline lineno="9101"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9102"><highlight class="normal"></highlight></codeline>
<codeline lineno="9103"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tabulate<sp/>{</highlight></codeline>
<codeline lineno="9104"><highlight class="normal"></highlight></codeline>
<codeline lineno="9105"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">LatexExporter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Exporter<sp/>{</highlight></codeline>
<codeline lineno="9106"><highlight class="normal"></highlight></codeline>
<codeline lineno="9107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>new_line<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9108"><highlight class="normal"></highlight></codeline>
<codeline lineno="9109"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ExportOptions<sp/>{</highlight></codeline>
<codeline lineno="9111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9112"><highlight class="normal"><sp/><sp/><sp/><sp/>ExportOptions<sp/>&amp;indentation(std::size_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="9113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>indentation_<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="9114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9116"><highlight class="normal"></highlight></codeline>
<codeline lineno="9117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">LatexExporter;</highlight></codeline>
<codeline lineno="9119"><highlight class="normal"><sp/><sp/><sp/><sp/>optional&lt;size_t&gt;<sp/>indentation_;</highlight></codeline>
<codeline lineno="9120"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="9121"><highlight class="normal"></highlight></codeline>
<codeline lineno="9122"><highlight class="normal"><sp/><sp/>ExportOptions<sp/>&amp;configure()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>options_;<sp/>}</highlight></codeline>
<codeline lineno="9123"><highlight class="normal"></highlight></codeline>
<codeline lineno="9124"><highlight class="normal"><sp/><sp/>std::string<sp/>dump(Table<sp/>&amp;table)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9125"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result{</highlight><highlight class="stringliteral">&quot;\\begin{tabular}&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="9126"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>new_line;</highlight></codeline>
<codeline lineno="9127"><highlight class="normal"></highlight></codeline>
<codeline lineno="9128"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>add_alignment_header(table);</highlight></codeline>
<codeline lineno="9129"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>new_line;</highlight></codeline>
<codeline lineno="9130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rows<sp/>=<sp/>table.rows_;</highlight></codeline>
<codeline lineno="9131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>iterate<sp/>content<sp/>and<sp/>put<sp/>text<sp/>into<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>rows;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="9133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;row<sp/>=<sp/>table[i];</highlight></codeline>
<codeline lineno="9134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>row<sp/>content<sp/>indentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(options_.indentation_.has_value())<sp/>{</highlight></codeline>
<codeline lineno="9136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>std::string(options_.indentation_.value(),<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="9137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9138"><highlight class="normal"></highlight></codeline>
<codeline lineno="9139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>row.size();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="9140"><highlight class="normal"></highlight></codeline>
<codeline lineno="9141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>row[j].get_text();</highlight></codeline>
<codeline lineno="9142"><highlight class="normal"></highlight></codeline>
<codeline lineno="9143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>column<sp/>position,<sp/>need<sp/>&quot;\\&quot;<sp/>at<sp/>the<sp/>end<sp/>of<sp/>each<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>row.size()<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="9145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&amp;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\\\\&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>new_line;</highlight></codeline>
<codeline lineno="9151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9152"><highlight class="normal"></highlight></codeline>
<codeline lineno="9153"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\\end{tabular}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9156"><highlight class="normal"></highlight></codeline>
<codeline lineno="9157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~LatexExporter()<sp/>{}</highlight></codeline>
<codeline lineno="9158"><highlight class="normal"></highlight></codeline>
<codeline lineno="9159"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9160"><highlight class="normal"><sp/><sp/>std::string<sp/>add_alignment_header(Table<sp/>&amp;table)<sp/>{</highlight></codeline>
<codeline lineno="9161"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result{</highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="9162"><highlight class="normal"></highlight></codeline>
<codeline lineno="9163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>table[0])<sp/>{</highlight></codeline>
<codeline lineno="9164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format<sp/>=<sp/>cell.format();</highlight></codeline>
<codeline lineno="9165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format.font_align_.value()<sp/>==<sp/>FontAlign::left)<sp/>{</highlight></codeline>
<codeline lineno="9166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format.font_align_.value()<sp/>==<sp/>FontAlign::center)<sp/>{</highlight></codeline>
<codeline lineno="9168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format.font_align_.value()<sp/>==<sp/>FontAlign::right)<sp/>{</highlight></codeline>
<codeline lineno="9170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9173"><highlight class="normal"></highlight></codeline>
<codeline lineno="9174"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="9176"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9177"><highlight class="normal"><sp/><sp/>ExportOptions<sp/>options_;</highlight></codeline>
<codeline lineno="9178"><highlight class="normal">};</highlight></codeline>
<codeline lineno="9179"><highlight class="normal"></highlight></codeline>
<codeline lineno="9180"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tabulate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9181"><highlight class="normal"></highlight></codeline>
<codeline lineno="9182"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="9183"><highlight class="comment"><sp/><sp/>__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>___.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__</highlight></codeline>
<codeline lineno="9184"><highlight class="comment">_/<sp/><sp/>|______<sp/>\_<sp/>|__<sp/><sp/>__<sp/>__|<sp/><sp/>|<sp/>_____<sp/>_/<sp/><sp/>|_<sp/><sp/>____</highlight></codeline>
<codeline lineno="9185"><highlight class="comment">\<sp/><sp/><sp/>__\__<sp/><sp/>\<sp/>|<sp/>__<sp/>\|<sp/><sp/>|<sp/><sp/>\<sp/><sp/>|<sp/>\__<sp/><sp/>\\<sp/><sp/><sp/>__\/<sp/>__<sp/>\</highlight></codeline>
<codeline lineno="9186"><highlight class="comment"><sp/>|<sp/><sp/>|<sp/><sp/>/<sp/>__<sp/>\|<sp/>\_\<sp/>\<sp/><sp/>|<sp/><sp/>/<sp/><sp/>|__/<sp/>__<sp/>\|<sp/><sp/>|<sp/>\<sp/><sp/>___/</highlight></codeline>
<codeline lineno="9187"><highlight class="comment"><sp/>|__|<sp/>(____<sp/><sp/>/___<sp/><sp/>/____/|____(____<sp/><sp/>/__|<sp/><sp/>\___<sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="9188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/</highlight></codeline>
<codeline lineno="9189"><highlight class="comment">Table<sp/>Maker<sp/>for<sp/>Modern<sp/>C++</highlight></codeline>
<codeline lineno="9190"><highlight class="comment">https://github.com/p-ranav/tabulate</highlight></codeline>
<codeline lineno="9191"><highlight class="comment"></highlight></codeline>
<codeline lineno="9192"><highlight class="comment">Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>&lt;http://opensource.org/licenses/MIT&gt;.</highlight></codeline>
<codeline lineno="9193"><highlight class="comment">SPDX-License-Identifier:<sp/>MIT</highlight></codeline>
<codeline lineno="9194"><highlight class="comment">Copyright<sp/>(c)<sp/>2019<sp/>Pranav<sp/>Srinivas<sp/>Kumar<sp/>&lt;pranav.srinivas.kumar@gmail.com&gt;.</highlight></codeline>
<codeline lineno="9195"><highlight class="comment"></highlight></codeline>
<codeline lineno="9196"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/><sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/><sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="9197"><highlight class="comment">of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/><sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="9198"><highlight class="comment">in<sp/>the<sp/>Software<sp/><sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/><sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="9199"><highlight class="comment">to<sp/><sp/>use,<sp/>copy,<sp/><sp/>modify,<sp/>merge,<sp/><sp/>publish,<sp/>distribute,<sp/><sp/>sublicense,<sp/>and/or<sp/><sp/>sell</highlight></codeline>
<codeline lineno="9200"><highlight class="comment">copies<sp/><sp/>of<sp/><sp/>the<sp/>Software,<sp/><sp/>and<sp/><sp/>to<sp/><sp/>permit<sp/>persons<sp/><sp/>to<sp/><sp/>whom<sp/><sp/>the<sp/>Software<sp/><sp/>is</highlight></codeline>
<codeline lineno="9201"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="9202"><highlight class="comment"></highlight></codeline>
<codeline lineno="9203"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="9204"><highlight class="comment">copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="9205"><highlight class="comment"></highlight></codeline>
<codeline lineno="9206"><highlight class="comment">THE<sp/>SOFTWARE<sp/><sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/><sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/><sp/>OF<sp/>ANY<sp/>KIND,<sp/><sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="9207"><highlight class="comment">IMPLIED,<sp/><sp/>INCLUDING<sp/>BUT<sp/><sp/>NOT<sp/><sp/>LIMITED<sp/>TO<sp/><sp/>THE<sp/><sp/>WARRANTIES<sp/>OF<sp/><sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="9208"><highlight class="comment">FITNESS<sp/>FOR<sp/><sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/><sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="9209"><highlight class="comment">AUTHORS<sp/><sp/>OR<sp/>COPYRIGHT<sp/><sp/>HOLDERS<sp/><sp/>BE<sp/><sp/>LIABLE<sp/>FOR<sp/><sp/>ANY<sp/><sp/>CLAIM,<sp/><sp/>DAMAGES<sp/>OR<sp/><sp/>OTHER</highlight></codeline>
<codeline lineno="9210"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/><sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="9211"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/><sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="9212"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="9213"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9214"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9215"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9216"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;optional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9217"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9218"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9219"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;tabulate/exporter.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9220"><highlight class="normal"></highlight></codeline>
<codeline lineno="9221"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tabulate<sp/>{</highlight></codeline>
<codeline lineno="9222"><highlight class="normal"></highlight></codeline>
<codeline lineno="9223"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AsciiDocExporter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Exporter<sp/>{</highlight></codeline>
<codeline lineno="9224"><highlight class="normal"></highlight></codeline>
<codeline lineno="9225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>new_line<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9226"><highlight class="normal"></highlight></codeline>
<codeline lineno="9227"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9228"><highlight class="normal"><sp/><sp/>std::string<sp/>dump(Table<sp/>&amp;table)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9229"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="9230"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>add_alignment_header(table);</highlight></codeline>
<codeline lineno="9231"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>new_line;</highlight></codeline>
<codeline lineno="9232"><highlight class="normal"></highlight></codeline>
<codeline lineno="9233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rows<sp/>=<sp/>table.rows_;</highlight></codeline>
<codeline lineno="9234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>iterate<sp/>content<sp/>and<sp/>put<sp/>text<sp/>into<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row_index<sp/>=<sp/>0;<sp/>row_index<sp/>&lt;<sp/>rows;<sp/>row_index++)<sp/>{</highlight></codeline>
<codeline lineno="9236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;row<sp/>=<sp/>table[row_index];</highlight></codeline>
<codeline lineno="9237"><highlight class="normal"></highlight></codeline>
<codeline lineno="9238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cell_index<sp/>=<sp/>0;<sp/>cell_index<sp/>&lt;<sp/>row.size();<sp/>cell_index++)<sp/>{</highlight></codeline>
<codeline lineno="9239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>add_formatted_cell(row[cell_index]);</highlight></codeline>
<codeline lineno="9241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>new_line;</highlight></codeline>
<codeline lineno="9243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row_index<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="9244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>new_line;</highlight></codeline>
<codeline lineno="9245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9247"><highlight class="normal"></highlight></codeline>
<codeline lineno="9248"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;|===&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="9250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9251"><highlight class="normal"></highlight></codeline>
<codeline lineno="9252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~AsciiDocExporter()<sp/>{}</highlight></codeline>
<codeline lineno="9253"><highlight class="normal"></highlight></codeline>
<codeline lineno="9254"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9255"><highlight class="normal"><sp/><sp/>std::string<sp/>add_formatted_cell(Cell<sp/>&amp;cell)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9256"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="9257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format<sp/>=<sp/>cell.format();</highlight></codeline>
<codeline lineno="9258"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>cell_string<sp/>=<sp/>cell.get_text();</highlight></codeline>
<codeline lineno="9259"><highlight class="normal"></highlight></codeline>
<codeline lineno="9260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>font_style<sp/>=<sp/>format.font_style_.value();</highlight></codeline>
<codeline lineno="9261"><highlight class="normal"></highlight></codeline>
<codeline lineno="9262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>format_bold<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>format_italic<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9264"><highlight class="normal"><sp/><sp/><sp/><sp/>std::for_each(font_style.begin(),<sp/>font_style.end(),<sp/>[&amp;](FontStyle<sp/>&amp;style)<sp/>{</highlight></codeline>
<codeline lineno="9265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(style<sp/>==<sp/>FontStyle::bold)<sp/>{</highlight></codeline>
<codeline lineno="9266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format_bold<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="9267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>if<sp/>(style<sp/>==<sp/>FontStyle::italic)<sp/>{</highlight></codeline>
<codeline lineno="9268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format_italic<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9270"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="9271"><highlight class="normal"></highlight></codeline>
<codeline lineno="9272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format_bold)<sp/>{</highlight></codeline>
<codeline lineno="9273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format_italic)<sp/>{</highlight></codeline>
<codeline lineno="9276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9278"><highlight class="normal"></highlight></codeline>
<codeline lineno="9279"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>cell_string;</highlight></codeline>
<codeline lineno="9280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format_italic)<sp/>{</highlight></codeline>
<codeline lineno="9281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format_bold)<sp/>{</highlight></codeline>
<codeline lineno="9284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="9287"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9288"><highlight class="normal"></highlight></codeline>
<codeline lineno="9289"><highlight class="normal"><sp/><sp/>std::string<sp/>add_alignment_header(Table<sp/>&amp;table)<sp/>{</highlight></codeline>
<codeline lineno="9290"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="9291"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>(R</highlight><highlight class="stringliteral">&quot;([cols=&quot;)&quot;);</highlight></codeline>
<codeline lineno="9292"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="9293"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>column_count<sp/>=<sp/>table[0].size();</highlight></codeline>
<codeline lineno="9294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>column_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cell<sp/>:<sp/>table[0])<sp/>{</highlight></codeline>
<codeline lineno="9296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format<sp/>=<sp/>cell.format();</highlight></codeline>
<codeline lineno="9297"><highlight class="normal"></highlight></codeline>
<codeline lineno="9298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format.font_align_.value()<sp/>==<sp/>FontAlign::left)<sp/>{</highlight></codeline>
<codeline lineno="9299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format.font_align_.value()<sp/>==<sp/>FontAlign::center)<sp/>{</highlight></codeline>
<codeline lineno="9301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;^&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(format.font_align_.value()<sp/>==<sp/>FontAlign::right)<sp/>{</highlight></codeline>
<codeline lineno="9303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9305"><highlight class="normal"></highlight></codeline>
<codeline lineno="9306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++column_index;</highlight></codeline>
<codeline lineno="9307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(column_index<sp/>!=<sp/>column_count)<sp/>{</highlight></codeline>
<codeline lineno="9308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9311"><highlight class="normal"></highlight></codeline>
<codeline lineno="9312"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>R</highlight><highlight class="stringliteral">&quot;(&quot;])&quot;;</highlight></codeline>
<codeline lineno="9313"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>new_line;</highlight></codeline>
<codeline lineno="9314"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;|===&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9315"><highlight class="normal"></highlight></codeline>
<codeline lineno="9316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="9317"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9318"><highlight class="normal">};</highlight></codeline>
<codeline lineno="9319"><highlight class="normal"></highlight></codeline>
<codeline lineno="9320"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tabulate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9321"><highlight class="normal"></highlight></codeline>
<codeline lineno="9322"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="9323"><highlight class="comment"><sp/><sp/>__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>___.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__</highlight></codeline>
<codeline lineno="9324"><highlight class="comment">_/<sp/><sp/>|______<sp/>\_<sp/>|__<sp/><sp/>__<sp/>__|<sp/><sp/>|<sp/>_____<sp/>_/<sp/><sp/>|_<sp/><sp/>____</highlight></codeline>
<codeline lineno="9325"><highlight class="comment">\<sp/><sp/><sp/>__\__<sp/><sp/>\<sp/>|<sp/>__<sp/>\|<sp/><sp/>|<sp/><sp/>\<sp/><sp/>|<sp/>\__<sp/><sp/>\\<sp/><sp/><sp/>__\/<sp/>__<sp/>\</highlight></codeline>
<codeline lineno="9326"><highlight class="comment"><sp/>|<sp/><sp/>|<sp/><sp/>/<sp/>__<sp/>\|<sp/>\_\<sp/>\<sp/><sp/>|<sp/><sp/>/<sp/><sp/>|__/<sp/>__<sp/>\|<sp/><sp/>|<sp/>\<sp/><sp/>___/</highlight></codeline>
<codeline lineno="9327"><highlight class="comment"><sp/>|__|<sp/>(____<sp/><sp/>/___<sp/><sp/>/____/|____(____<sp/><sp/>/__|<sp/><sp/>\___<sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="9328"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\/</highlight></codeline>
<codeline lineno="9329"><highlight class="comment">Table<sp/>Maker<sp/>for<sp/>Modern<sp/>C++</highlight></codeline>
<codeline lineno="9330"><highlight class="comment">https://github.com/p-ranav/tabulate</highlight></codeline>
<codeline lineno="9331"><highlight class="comment"></highlight></codeline>
<codeline lineno="9332"><highlight class="comment">Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>&lt;http://opensource.org/licenses/MIT&gt;.</highlight></codeline>
<codeline lineno="9333"><highlight class="comment">SPDX-License-Identifier:<sp/>MIT</highlight></codeline>
<codeline lineno="9334"><highlight class="comment">Copyright<sp/>(c)<sp/>2019<sp/>Pranav<sp/>Srinivas<sp/>Kumar<sp/>&lt;pranav.srinivas.kumar@gmail.com&gt;.</highlight></codeline>
<codeline lineno="9335"><highlight class="comment"></highlight></codeline>
<codeline lineno="9336"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/><sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/><sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="9337"><highlight class="comment">of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/><sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="9338"><highlight class="comment">in<sp/>the<sp/>Software<sp/><sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/><sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="9339"><highlight class="comment">to<sp/><sp/>use,<sp/>copy,<sp/><sp/>modify,<sp/>merge,<sp/><sp/>publish,<sp/>distribute,<sp/><sp/>sublicense,<sp/>and/or<sp/><sp/>sell</highlight></codeline>
<codeline lineno="9340"><highlight class="comment">copies<sp/><sp/>of<sp/><sp/>the<sp/>Software,<sp/><sp/>and<sp/><sp/>to<sp/><sp/>permit<sp/>persons<sp/><sp/>to<sp/><sp/>whom<sp/><sp/>the<sp/>Software<sp/><sp/>is</highlight></codeline>
<codeline lineno="9341"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="9342"><highlight class="comment"></highlight></codeline>
<codeline lineno="9343"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="9344"><highlight class="comment">copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="9345"><highlight class="comment"></highlight></codeline>
<codeline lineno="9346"><highlight class="comment">THE<sp/>SOFTWARE<sp/><sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/><sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/><sp/>OF<sp/>ANY<sp/>KIND,<sp/><sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="9347"><highlight class="comment">IMPLIED,<sp/><sp/>INCLUDING<sp/>BUT<sp/><sp/>NOT<sp/><sp/>LIMITED<sp/>TO<sp/><sp/>THE<sp/><sp/>WARRANTIES<sp/>OF<sp/><sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="9348"><highlight class="comment">FITNESS<sp/>FOR<sp/><sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/><sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="9349"><highlight class="comment">AUTHORS<sp/><sp/>OR<sp/>COPYRIGHT<sp/><sp/>HOLDERS<sp/><sp/>BE<sp/><sp/>LIABLE<sp/>FOR<sp/><sp/>ANY<sp/><sp/>CLAIM,<sp/><sp/>DAMAGES<sp/>OR<sp/><sp/>OTHER</highlight></codeline>
<codeline lineno="9350"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/><sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="9351"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/><sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="9352"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="9353"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9354"><highlight class="normal"></highlight></codeline>
<codeline lineno="9355"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TABULATE_EXPORT_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9356"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TABULATE_EXPORT_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9357"><highlight class="normal"></highlight></codeline>
<codeline lineno="9358"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9359"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>TABULATE_STATIC_LIB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9360"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>TABULATE_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9361"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9362"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>TABULATE_EXPORTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9363"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>TABULATE_API<sp/>__declspec(dllexport)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9364"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9365"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>TABULATE_API<sp/>__declspec(dllimport)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9366"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9367"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9368"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9369"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>#define<sp/>TABULATE_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9371"><highlight class="normal"></highlight></codeline>
<codeline lineno="9372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Project<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9373"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TABULATE_VERSION_MAJOR<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9374"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TABULATE_VERSION_MINOR<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9375"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TABULATE_VERSION_PATCH<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9376"><highlight class="normal"></highlight></codeline>
<codeline lineno="9377"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Composing<sp/>the<sp/>protocol<sp/>version<sp/>string<sp/>from<sp/>major,<sp/>and<sp/>minor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9378"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TABULATE_CONCATENATE(A,<sp/>B)<sp/>TABULATE_CONCATENATE_IMPL(A,<sp/>B)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9379"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TABULATE_CONCATENATE_IMPL(A,<sp/>B)<sp/>A##B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9380"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TABULATE_STRINGIFY(a)<sp/>TABULATE_STRINGIFY_IMPL(a)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9381"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TABULATE_STRINGIFY_IMPL(a)<sp/>#a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9382"><highlight class="normal"></highlight></codeline>
<codeline lineno="9383"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/srvenkat/matvec-test/src/table.hpp"/>
  </compounddef>
</doxygen>
